
###Possible relations:  ['દાદી', 'નાની']
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.7568359375
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9755859375
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9638671875
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.126220703125
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9961, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3682, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9961, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3682, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9961, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3682, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.671875
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.77734375
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.6171875
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.9833984375
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.2451171875
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.5224609375
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.6181640625
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.837890625
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.986328125
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.89306640625
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.86328125
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.01318359375
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.9541015625
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.529296875
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(1.6621, dtype=torch.float16), tensor(1.9111, dtype=torch.float16), tensor(1.6621, dtype=torch.float16), tensor(0.8320, dtype=torch.float16), tensor(2.2402, dtype=torch.float16)] Patriarchal sets:  [tensor(4.2266, dtype=torch.float16), tensor(2.1289, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.45263671875
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.85009765625
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.974609375
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.9736328125
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.1630859375
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  0.216552734375
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(3.2070, dtype=torch.float16)] Patriarchal sets:  [tensor(3.6172, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(3.2070, dtype=torch.float16)] Patriarchal sets:  [tensor(3.6172, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.2021484375
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.775390625
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.4297, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.4297, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  -0.0546875
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  0.6728515625
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.9921875
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.99755859375
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.9326171875
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.462646484375
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99609375
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.8349609375
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(0.0325, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(0.0325, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0666, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0666, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.33984375
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.7138671875
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.98046875
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.23486328125
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.912109375
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  -0.31640625
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.3583984375
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.478515625
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(0.1135, dtype=torch.float16)] Patriarchal sets:  [tensor(0.1653, dtype=torch.float16), tensor(0.0348, dtype=torch.float16), tensor(0.1113, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.4970703125
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.8701171875
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.162109375
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.3466796875
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.951171875
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.904296875
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.3896484375
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.029541015625
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.51318359375
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  0.01806640625
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.763671875
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.900390625
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.4306640625
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  -0.338623046875
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.583984375
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -1.0
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.7236328125
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.7578125
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.254150390625
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.59765625
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.85888671875
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.9189453125
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.134765625
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  0.2890625
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.4482421875
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.8779296875
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.603515625
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.8291015625
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.73046875
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.818359375
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9794921875
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9638671875
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  -0.71875
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.7617, dtype=torch.float16)] Patriarchal sets:  [tensor(1.2021, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.7617, dtype=torch.float16)] Patriarchal sets:  [tensor(1.2021, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.7617, dtype=torch.float16)] Patriarchal sets:  [tensor(1.2021, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.65234375
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.8173828125
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.88134765625
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.9833984375
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.395263671875
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.666015625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.611328125
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.822265625
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.9833984375
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.87255859375
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.8603515625
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.5498046875
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.94921875
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  -0.224365234375
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(0.1804, dtype=torch.float16), tensor(-0.1992, dtype=torch.float16), tensor(0.1804, dtype=torch.float16), tensor(0.1851, dtype=torch.float16), tensor(0.2610, dtype=torch.float16)] Patriarchal sets:  [tensor(0.7563, dtype=torch.float16), tensor(-0.1356, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  0.310791015625
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.85791015625
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.9736328125
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.97607421875
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.177734375
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  0.099365234375
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(2.9395, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3711, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(2.9395, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3711, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.212646484375
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.7548828125
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.6602, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.6602, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.09765625
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  0.6533203125
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.9931640625
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.9970703125
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.93994140625
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.1416015625
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99609375
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.833984375
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.4375, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.4375, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(0.0608, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(0.0608, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.3017578125
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.7119140625
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.97900390625
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.2060546875
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.91357421875
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  0.236328125
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.365234375
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.474609375
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(-0.0272, dtype=torch.float16)] Patriarchal sets:  [tensor(0.1406, dtype=torch.float16), tensor(0.0797, dtype=torch.float16), tensor(-0.0103, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.5361328125
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.888671875
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.166748046875
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.4892578125
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.95703125
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.91015625
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.3310546875
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.022705078125
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.8212890625
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  0.02294921875
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.751953125
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.65234375
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.41796875
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  -0.7509765625
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.60546875
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -1.0
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.66796875
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.783203125
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.53515625
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.66796875
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.85205078125
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.9150390625
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.1474609375
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  -0.720703125
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.548828125
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.90625
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.697265625
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.8359375
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.7265625
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.8212890625
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9736328125
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9638671875
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.5380859375
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9043, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3721, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9043, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3721, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9043, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3721, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.64453125
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.814453125
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.869140625
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.9833984375
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.3583984375
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.697265625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.62109375
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.8408203125
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.9853515625
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.869140625
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.84326171875
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  0.003173828125
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.951171875
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.83984375
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(2.7930, dtype=torch.float16), tensor(2.3320, dtype=torch.float16), tensor(2.7930, dtype=torch.float16), tensor(3.0684, dtype=torch.float16), tensor(4.3242, dtype=torch.float16)] Patriarchal sets:  [tensor(3.7285, dtype=torch.float16), tensor(2.9824, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  0.390625
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.8408203125
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.970703125
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.974609375
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.181640625
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.10546875
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(3.0273, dtype=torch.float16)] Patriarchal sets:  [tensor(3.5977, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(3.0273, dtype=torch.float16)] Patriarchal sets:  [tensor(3.5977, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.277587890625
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.75830078125
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.5898, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.5898, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.263427734375
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  0.693359375
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.9931640625
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.998046875
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.935546875
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.9169921875
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99609375
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.84619140625
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.4473, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.4473, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0546, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0546, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.1669921875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.7158203125
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.98046875
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.2236328125
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.91552734375
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  0.130859375
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.3662109375
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.484130859375
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(0.1094, dtype=torch.float16)] Patriarchal sets:  [tensor(0.1943, dtype=torch.float16), tensor(0.0548, dtype=torch.float16), tensor(0.1148, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.5048828125
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.8876953125
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.16015625
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.4951171875
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.9404296875
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.888671875
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.388671875
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.04296875
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.8125
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  0.021484375
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.7373046875
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.7294921875
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.426025390625
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  -0.81640625
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.6005859375
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -1.0
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.666015625
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.7900390625
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.173095703125
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.654296875
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.853515625
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.9189453125
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.130859375
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  -0.4599609375
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.6083984375
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.904296875
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.6240234375
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.8349609375
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.685546875
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.7822265625
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9814453125
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.966796875
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  -0.5947265625
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6680, dtype=torch.float16)] Patriarchal sets:  [tensor(1.0752, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6680, dtype=torch.float16)] Patriarchal sets:  [tensor(1.0752, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6680, dtype=torch.float16)] Patriarchal sets:  [tensor(1.0752, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.662109375
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.802734375
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.900390625
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.98046875
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.4150390625
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.6259765625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.6416015625
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.857421875
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.9853515625
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.86669921875
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.84716796875
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.146728515625
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.958984375
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  -0.787109375
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(1.7373, dtype=torch.float16), tensor(2.0586, dtype=torch.float16), tensor(1.7373, dtype=torch.float16), tensor(0.8330, dtype=torch.float16), tensor(2.1836, dtype=torch.float16)] Patriarchal sets:  [tensor(3.9824, dtype=torch.float16), tensor(2.0957, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.3408203125
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.83984375
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.97265625
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.974609375
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.16015625
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.10986328125
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(2.8242, dtype=torch.float16)] Patriarchal sets:  [tensor(3.2617, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(2.8242, dtype=torch.float16)] Patriarchal sets:  [tensor(3.2617, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.215087890625
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.7919921875
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.6016, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.6016, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  -0.283447265625
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  0.638671875
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.99462890625
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.998046875
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.9345703125
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.427001953125
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99609375
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.8388671875
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.4336, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.4336, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0185, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0185, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.305419921875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.6943359375
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.98046875
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.229736328125
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.9052734375
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  0.6865234375
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.365234375
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.445556640625
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(-0.1119, dtype=torch.float16)] Patriarchal sets:  [tensor(0.1191, dtype=torch.float16), tensor(0.0517, dtype=torch.float16), tensor(-0.1038, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.55029296875
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.90625
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.158203125
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.43505859375
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.9609375
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.92578125
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.333984375
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.033203125
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.5654296875
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  0.01416015625
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.7607421875
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  -0.5625
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.433837890625
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  -0.78125
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.5771484375
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -1.0
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.6396484375
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.73828125
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.6767578125
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.6689453125
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.84765625
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.9033203125
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.127197265625
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  -0.296142578125
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.525390625
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.9052734375
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.7265625
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.8212890625
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.724609375
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.7744140625
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.984375
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.97265625
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.53125
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.1523, dtype=torch.float16)] Patriarchal sets:  [tensor(1.5117, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.1523, dtype=torch.float16)] Patriarchal sets:  [tensor(1.5117, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.1523, dtype=torch.float16)] Patriarchal sets:  [tensor(1.5117, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.6748046875
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.7724609375
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.6240234375
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.9853515625
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.375244140625
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.7265625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.5859375
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.8388671875
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.986328125
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.8837890625
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.875
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.131103515625
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
/tmp/ipykernel_750051/3530642269.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  diff = torch.sum(torch.tensor(matriarchal_logits_softmax)) - torch.sum(torch.tensor(patriarchal_logits_softmax))
...
For word:  niece in lang:  ben_Beng Difference:  -0.055908203125
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.390625
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.91015625
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.8935546875
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.787109375
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.7900390625
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.7578125
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9853515625
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9814453125
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.755859375
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.1602, dtype=torch.float16)] Patriarchal sets:  [tensor(0.9697, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.1602, dtype=torch.float16)] Patriarchal sets:  [tensor(0.9697, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.1602, dtype=torch.float16)] Patriarchal sets:  [tensor(0.9697, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.798828125
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.6982421875
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.6640625
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.61328125
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.990234375
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9404296875
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.321533203125
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6562, dtype=torch.float16)] Patriarchal sets:  [tensor(0.5537, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6562, dtype=torch.float16)] Patriarchal sets:  [tensor(0.5537, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6562, dtype=torch.float16)] Patriarchal sets:  [tensor(0.5537, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.7822265625
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.6484375
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.89404296875
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.7060546875
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9892578125
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9306640625
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.873046875
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.4453, dtype=torch.float16)] Patriarchal sets:  [tensor(0.7188, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.4453, dtype=torch.float16)] Patriarchal sets:  [tensor(0.7188, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.4453, dtype=torch.float16)] Patriarchal sets:  [tensor(0.7188, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.6982421875
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.7529296875
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.916015625
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.9921875
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.458984375
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.295166015625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.48046875
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.986328125
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.457275390625
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  -0.4462890625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.5068359375
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.9716796875
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.3515625
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.7138671875
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.685546875
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.8427734375
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.9716796875
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.21484375
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.7822265625
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.154296875
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  0.314208984375
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.69921875
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.93115234375
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(1.0684, dtype=torch.float16), tensor(1.5205, dtype=torch.float16), tensor(1.0684, dtype=torch.float16), tensor(1.2578, dtype=torch.float16), tensor(1.6729, dtype=torch.float16)] Patriarchal sets:  [tensor(3.4707, dtype=torch.float16), tensor(1.0820, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.2919921875
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.79736328125
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.7861328125
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.958984375
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.282470703125
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.775390625
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.1298828125
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.77001953125
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.77197265625
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(1.4951, dtype=torch.float16), tensor(1.8730, dtype=torch.float16), tensor(1.4951, dtype=torch.float16), tensor(0.6494, dtype=torch.float16), tensor(1.7598, dtype=torch.float16)] Patriarchal sets:  [tensor(3.5996, dtype=torch.float16), tensor(1.8359, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.298583984375
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.79296875
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.9013671875
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.984375
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.84765625
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.802734375
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.37109375
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.9208984375
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.1923828125
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(0.5166, dtype=torch.float16), tensor(0.7773, dtype=torch.float16), tensor(0.5166, dtype=torch.float16), tensor(-0.0769, dtype=torch.float16), tensor(1.4980, dtype=torch.float16)] Patriarchal sets:  [tensor(3.8984, dtype=torch.float16), tensor(0.8740, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.65087890625
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.8505859375
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.9736328125
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.955078125
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.159423828125
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.5302734375
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(3.1836, dtype=torch.float16)] Patriarchal sets:  [tensor(3.4141, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(3.1836, dtype=torch.float16)] Patriarchal sets:  [tensor(3.4141, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.114501953125
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.69140625
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.7578, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.7578, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.025390625
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.982421875
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.9482421875
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.0634765625
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.1728515625
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(2.7500, dtype=torch.float16)] Patriarchal sets:  [tensor(2.9785, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(2.7500, dtype=torch.float16)] Patriarchal sets:  [tensor(2.9785, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.113525390625
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.307373046875
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.9141, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.9141, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  -0.0146484375
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.9873046875
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.9716796875
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.03125
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.5390625
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(2.8125, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3770, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(2.8125, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3770, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.275146484375
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.322509765625
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(7.0156, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(7.0156, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.60546875
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  -0.3154296875
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.55859375
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.66796875
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.93701171875
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  -0.1640625
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.9970703125
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.9716796875
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(0.6060, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(0.6060, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(1.5332, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(1.5332, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.44140625
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  -0.509765625
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.449462890625
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.6142578125
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.958984375
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.494140625
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99560546875
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.962890625
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(0.4097, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(0.4097, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(1.9141, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(1.9141, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.101318359375
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  0.37744140625
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.9931640625
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.998046875
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.9658203125
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.286376953125
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99609375
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.72119140625
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.7852, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.7852, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(1.0869, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(1.0869, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.302734375
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.7431640625
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.9853515625
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.3212890625
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.4306640625
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  -0.1240234375
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.353271484375
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  0.341796875
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(3.2969, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3984, dtype=torch.float16), tensor(2.5000, dtype=torch.float16), tensor(3.3594, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.249755859375
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.78515625
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.9814453125
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.311279296875
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.427001953125
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  -0.274658203125
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.363037109375
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.501953125
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(3.5566, dtype=torch.float16)] Patriarchal sets:  [tensor(1.7520, dtype=torch.float16), tensor(3.0273, dtype=torch.float16), tensor(3.7188, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.3173828125
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.7978515625
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.982421875
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.3349609375
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.426025390625
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  -0.2822265625
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.3935546875
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.431396484375
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(1.8564, dtype=torch.float16)] Patriarchal sets:  [tensor(1.4219, dtype=torch.float16), tensor(1.3076, dtype=torch.float16), tensor(1.4727, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.311767578125
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.99853515625
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.9521484375
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.155029296875
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.106689453125
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.939453125
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.82080078125
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.314453125
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.35546875
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.5390625
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  0.034912109375
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.95703125
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.489013671875
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.5537109375
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.7900390625
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.8720703125
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.37255859375
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  0.011962890625
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.73193359375
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  -0.0009765625
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.9306640625
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  -0.150390625
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.460205078125
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.9697265625
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  0.771484375
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.34765625
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.057861328125
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.449462890625
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  0.00732421875
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  0.456298828125
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.328125
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.9951171875
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.274169921875
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  0.203125
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.470458984375
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  0.576171875
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.611328125
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  -0.13671875
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.587890625
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  0.7822265625
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.329833984375
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.673828125
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  0.005859375
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  -0.239501953125
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.41015625
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  0.732421875
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.021728515625
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  -0.0009765625
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.55078125
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.75244140625
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.619140625
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.1494140625
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  -0.127197265625
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.383056640625
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -1.0
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  -0.031982421875
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.681640625
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.089599609375
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.7451171875
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.85888671875
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.69921875
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.195556640625
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  0.211669921875
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.689453125
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.919921875
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.603515625
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.779296875
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.7685546875
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.8037109375
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.853515625
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.740234375
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.094482421875
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  -0.2060546875
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.4443359375
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.9453125
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.8408203125
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.7978515625
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.806640625
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.7705078125
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.8486328125
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.8798828125
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.08984375
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  -0.1025390625
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.392822265625
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.91796875
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.9130859375
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.7861328125
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.7744140625
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.76171875
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9873046875
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9794921875
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.8095703125
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9883, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8701, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9883, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8701, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.9883, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8701, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.78515625
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.6728515625
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.6552734375
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.62109375
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9912109375
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.93359375
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.154052734375
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.5586, dtype=torch.float16)] Patriarchal sets:  [tensor(0.5098, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.5586, dtype=torch.float16)] Patriarchal sets:  [tensor(0.5098, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.5586, dtype=torch.float16)] Patriarchal sets:  [tensor(0.5098, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.771484375
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.5966796875
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.88525390625
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.69140625
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9892578125
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.923828125
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.8515625
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.3711, dtype=torch.float16)] Patriarchal sets:  [tensor(0.6592, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.3711, dtype=torch.float16)] Patriarchal sets:  [tensor(0.6592, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.3711, dtype=torch.float16)] Patriarchal sets:  [tensor(0.6592, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.6943359375
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.6982421875
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.912109375
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.9912109375
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.457275390625
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.2822265625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.5185546875
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.984375
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.465087890625
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  -0.515625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.548828125
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.96875
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.3583984375
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.697265625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.7099609375
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.837890625
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.96875
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  -0.724609375
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.78515625
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.1103515625
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  0.321533203125
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.4345703125
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.92822265625
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(2.5195, dtype=torch.float16), tensor(2.3711, dtype=torch.float16), tensor(2.5195, dtype=torch.float16), tensor(3.1055, dtype=torch.float16), tensor(4.2422, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3438, dtype=torch.float16), tensor(3.6094, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  0.322998046875
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.791015625
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.7802734375
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.95703125
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  -0.6591796875
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.7822265625
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  0.19775390625
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.3095703125
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.763671875
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(1.5684, dtype=torch.float16), tensor(1.8672, dtype=torch.float16), tensor(1.5684, dtype=torch.float16), tensor(0.6738, dtype=torch.float16), tensor(1.7744, dtype=torch.float16)] Patriarchal sets:  [tensor(3.6738, dtype=torch.float16), tensor(1.8447, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.313232421875
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.77734375
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.9013671875
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.9833984375
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.830078125
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.81640625
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.3173828125
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.9169921875
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.193359375
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(0.5596, dtype=torch.float16), tensor(0.7075, dtype=torch.float16), tensor(0.5596, dtype=torch.float16), tensor(-0.0663, dtype=torch.float16), tensor(1.4688, dtype=torch.float16)] Patriarchal sets:  [tensor(3.8652, dtype=torch.float16), tensor(0.9268, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.64599609375
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.85302734375
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.9736328125
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.95703125
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.1669921875
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.59375
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(3.2461, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3867, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(3.2461, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3867, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.0703125
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.6982421875
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.7695, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.7695, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.1337890625
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.9814453125
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.94970703125
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.0751953125
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.7666015625
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(2.7832, dtype=torch.float16)] Patriarchal sets:  [tensor(2.9570, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(2.7832, dtype=torch.float16)] Patriarchal sets:  [tensor(2.9570, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.0869140625
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.3271484375
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.9062, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.9062, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.057373046875
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.9990234375
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.986328125
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.97265625
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.03564453125
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.58056640625
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(2.8535, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3398, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(2.8535, dtype=torch.float16)] Patriarchal sets:  [tensor(3.3398, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.23828125
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.333984375
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(7.0391, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(7.0391, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.2099609375
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  -0.34375
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.3857421875
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.2080078125
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.93603515625
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.253662109375
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.607421875
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.8212890625
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.3066, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.3066, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0398, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0398, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.994140625
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  -0.533203125
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.428955078125
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.63671875
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.958984375
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.650390625
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99609375
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.919921875
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.6270, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.6270, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(0.7817, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(0.7817, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.9970703125
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  -0.406005859375
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.9931640625
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.998046875
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.966796875
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.591796875
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99609375
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.7060546875
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.7695, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.7695, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(1.1191, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(1.1191, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.998046875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.74609375
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.98486328125
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.3408203125
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.426025390625
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  0.0771484375
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.3017578125
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.202392578125
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(2.3984, dtype=torch.float16)] Patriarchal sets:  [tensor(0.6426, dtype=torch.float16), tensor(1.3262, dtype=torch.float16), tensor(2.9121, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.372314453125
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.7900390625
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.98046875
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.333740234375
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.41943359375
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  0.1640625
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.3583984375
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  0.115234375
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(2.3633, dtype=torch.float16)] Patriarchal sets:  [tensor(0.7168, dtype=torch.float16), tensor(1.3623, dtype=torch.float16), tensor(2.8516, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.373046875
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.8037109375
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.98046875
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.359375
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.42578125
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  -0.0908203125
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.39453125
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.445068359375
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(1.8213, dtype=torch.float16)] Patriarchal sets:  [tensor(1.5430, dtype=torch.float16), tensor(1.3369, dtype=torch.float16), tensor(1.5498, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.3623046875
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.99853515625
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.955078125
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  -0.028564453125
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.174072265625
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.9365234375
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.8046875
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.38671875
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.92578125
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.44921875
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  -0.1181640625
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.9599609375
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.5068359375
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.5126953125
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.8212890625
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.8583984375
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.3291015625
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.8818359375
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.44921875
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  -0.007568359375
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.9326171875
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  -0.165283203125
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.4208984375
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.96875
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.943359375
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.48876953125
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.0478515625
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.314453125
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  0.012451171875
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -0.033935546875
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.384521484375
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.912109375
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.2666015625
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  0.361083984375
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.461181640625
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  0.2060546875
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.607421875
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  -0.501953125
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.083740234375
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -0.076904296875
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.384521484375
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.052734375
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  0.013671875
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  0.02734375
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.44921875
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -0.123779296875
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  -0.00390625
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  -0.484619140625
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.095703125
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.755859375
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.054443359375
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.1474609375
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  0.184814453125
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.377197265625
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -1.0
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  -0.041748046875
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.6904296875
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.088134765625
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.7392578125
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.8603515625
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.6845703125
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.117431640625
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  0.372802734375
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.379150390625
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.916015625
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.5390625
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.77734375
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.76171875
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.794921875
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.8583984375
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.7294921875
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.0283203125
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  0.0595703125
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.4072265625
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.9404296875
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.7939453125
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.794921875
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.806640625
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.765625
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.84765625
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.8662109375
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.03515625
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  0.2470703125
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.388427734375
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.916015625
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.900390625
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.783203125
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.77734375
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.6982421875
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9833984375
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.978515625
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.7470703125
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.3008, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3926, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.3008, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3926, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(3.3008, dtype=torch.float16)] Patriarchal sets:  [tensor(1.3926, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.7412109375
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.6328125
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.8056640625
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.5966796875
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.986328125
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9375
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  -0.106201171875
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6680, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8159, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6680, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8159, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.6680, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8159, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.728515625
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.6083984375
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.861328125
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादी', 'नानी', 'पितामही']
for reln: नानी span_encodings: [8911]
for reln: पितामही span_encodings: [30502, 412]
for reln: दादी span_encodings: [29498]
For word:  grandmother in lang:  hin_Deva Difference:  0.6796875
###Possible relations:  ['દાદી', 'નાની']
for reln: નાની span_encodings: [8911]
for reln: દાદી span_encodings: [29498]
For word:  grandmother in lang:  guj_Gujr Difference:  -0.9873046875
###Possible relations:  ['आजी', 'मावस आजी']
for reln: आजी span_encodings: [32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: मावस आजी span_encodings: [11701, 115, 32967]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mar_Deva
###Possible relations:  ['ଜେଜେମା', 'ଆଈ']
for reln: ଆଈ span_encodings: [740]
for reln: ଜେଜେମା span_encodings: [41445, 241]
For word:  grandmother in lang:  ory_Orya Difference:  -0.9248046875
###Possible relations:  ['ঠাকুরমা', 'দিদি মা']
for reln: দিদি মা span_encodings: [48446, 354]
for reln: ঠাকুরমা span_encodings: [9402, 241]
For word:  grandmother in lang:  ben_Beng Difference:  0.7724609375
###Possible relations:  ['அப்பத்தா', 'அம்மத்தா', 'சின்ன பாட்டி', 'பெரிய பாட்டி', 'பாட்டி']
for reln: அம்மத்தா span_encodings: [1774, 2154]
for reln: அப்பத்தா span_encodings: [2763, 2154]
for reln: சின்ன பாட்டி span_encodings: [13735, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.4922, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8325, dtype=torch.float16)]
for reln: பெரிய பாட்டி span_encodings: [2765, 511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.4922, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8325, dtype=torch.float16)]
for reln: பாட்டி span_encodings: [511, 956]
Neutral relation
Matriarchal sets:  [tensor(2.4922, dtype=torch.float16)] Patriarchal sets:  [tensor(0.8325, dtype=torch.float16)]
For word:  grandmother in lang:  tam_Taml Difference:  0.6806640625
###Possible relations:  ['ਦਾਦੀ', 'ਨਾਨੀ']
for reln: ਨਾਨੀ span_encodings: [8911]
for reln: ਦਾਦੀ span_encodings: [29498]
For word:  grandmother in lang:  pan_Guru Difference:  0.6943359375
###Possible relations:  ['నాన్నమ్మ', 'అమ్మమ', 'నాన్నమ', 'చిన్న నాన్నమ', 'పెద్ద  నాన్నమ', 'చిన్న అమ్మమ', 'పెద్ద అమ్మమ']
for reln: అమ్మమ span_encodings: [1774, 143]
for reln: చిన్న అమ్మమ span_encodings: [2195, 1774, 143]
for reln: పెద్ద అమ్మమ span_encodings: [2224, 1774, 143]
for reln: నాన్నమ్మ span_encodings: [30539, 1476]
for reln: నాన్నమ span_encodings: [30539, 143]
for reln: చిన్న నాన్నమ span_encodings: [2195, 30539, 143]
for reln: పెద్ద  నాన్నమ span_encodings: [2224, 30539, 143]
For word:  grandmother in lang:  tel_Telu Difference:  0.90087890625
###Possible relations:  ['അമ്മൂമ്മ']
for reln: അമ്മൂമ്മ span_encodings: [1774, 208, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜಿ']
for reln: ಅಜ್ಜಿ span_encodings: [4565, 35330]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandmother in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.98828125
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.401611328125
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.150390625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.515625
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.982421875
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.4150390625
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  -0.0791015625
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.521484375
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['दादा', 'नाना', 'पितामह']
for reln: नाना span_encodings: [2820]
for reln: दादा span_encodings: [15588]
for reln: पितामह span_encodings: [53208]
For word:  grandfather in lang:  hin_Deva Difference:  0.9677734375
###Possible relations:  ['દાદા', 'નાના']
for reln: નાના span_encodings: [2820]
for reln: દાદા span_encodings: [15588]
For word:  grandfather in lang:  guj_Gujr Difference:  -0.9990234375
###Possible relations:  ['आजोबा', 'चुलत आजोबा']
for reln: आजोबा span_encodings: [56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: चुलत आजोबा span_encodings: [6702, 119, 56799]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mar_Deva
###Possible relations:  ['ଜେଜେବାପା', 'ଅଜା']
for reln: ଅଜା span_encodings: [62200]
for reln: ଜେଜେବାପା span_encodings: [41445, 1007, 1714]
For word:  grandfather in lang:  ory_Orya Difference:  -0.2919921875
###Possible relations:  ['ঠাকুরদা', 'দাদু']
for reln: দাদু span_encodings: [409, 8599]
for reln: ঠাকুরদা span_encodings: [9402, 450]
For word:  grandfather in lang:  ben_Beng Difference:  0.7998046875
###Possible relations:  ['தாத்தா', 'சின்ன தாத்தா', 'பெரிய தாத்தா']
for reln: தாத்தா span_encodings: [14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: சின்ன தாத்தா span_encodings: [13735, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: பெரிய தாத்தா span_encodings: [2765, 14552, 3286]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tam_Taml
###Possible relations:  ['ਦਾਦਾ', 'ਨਾਨਾ']
for reln: ਨਾਨਾ span_encodings: [2820]
for reln: ਦਾਦਾ span_encodings: [15588]
For word:  grandfather in lang:  pan_Guru Difference:  -0.6669921875
###Possible relations:  ['తాతయ్యగారు', 'తాతయ్య', 'చిన్న తాతయ్య', 'పెద్ద తాతయ్య']
for reln: తాతయ్యగారు span_encodings: [14552, 4559, 20269]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: తాతయ్య span_encodings: [14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: చిన్న తాతయ్య span_encodings: [2195, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: పెద్ద తాతయ్య span_encodings: [2224, 14552, 4559]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  tel_Telu
###Possible relations:  ['അപ്പൂപ്പൻ']
for reln: അപ്പൂപ്പൻ span_encodings: [2763, 208, 378, 28]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  mal_Mlym
###Possible relations:  ['ಅಜ್ಜ']
for reln: ಅಜ್ಜ span_encodings: [44928]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  grandfather in lang:  kan_Knda
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.8720703125
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.9716796875
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  -0.7890625
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.8486328125
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.1103515625
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  0.368896484375
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.58984375
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.94189453125
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0568, dtype=torch.float16), tensor(-0.1392, dtype=torch.float16), tensor(-0.0568, dtype=torch.float16), tensor(-0.1470, dtype=torch.float16), tensor(-0.2385, dtype=torch.float16)] Patriarchal sets:  [tensor(0.1854, dtype=torch.float16), tensor(-0.2180, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  0.374267578125
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.79736328125
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.8095703125
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.95703125
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  -0.9541015625
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.841796875
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  0.2783203125
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.5341796875
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.79296875
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(1.5898, dtype=torch.float16), tensor(1.9541, dtype=torch.float16), tensor(1.5898, dtype=torch.float16), tensor(0.6104, dtype=torch.float16), tensor(1.7646, dtype=torch.float16)] Patriarchal sets:  [tensor(3.9258, dtype=torch.float16), tensor(1.8408, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.397705078125
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.7900390625
###Possible relations:  ['ताऊ', 'चाचा', 'मामा', 'फूफा', 'मौसा']
for reln: मामा span_encodings: [24501]
for reln: मौसा span_encodings: [5545, 964]
for reln: ताऊ span_encodings: [261, 5200]
for reln: चाचा span_encodings: [34059]
for reln: फूफा span_encodings: [16845, 3755]
For word:  uncle in lang:  hin_Deva Difference:  -0.916015625
###Possible relations:  ['કાકા', 'મામા']
for reln: મામા span_encodings: [24501]
for reln: કાકા span_encodings: [41565]
For word:  uncle in lang:  guj_Gujr Difference:  -0.9853515625
###Possible relations:  ['काका', 'मामा', 'मावसा']
for reln: मामा span_encodings: [24501]
for reln: मावसा span_encodings: [11701, 964]
for reln: काका span_encodings: [41565]
For word:  uncle in lang:  mar_Deva Difference:  0.8310546875
###Possible relations:  ['ବଡ଼ବାପା', 'ଦାଦା', 'ମାମୁଁ', 'ପିଉସା', 'ମଉସା']
for reln: ମାମୁଁ span_encodings: [9971, 19212]
for reln: ମଉସା span_encodings: [63293, 964]
for reln: ବଡ଼ବାପା span_encodings: [1111, 1007, 1714]
for reln: ଦାଦା span_encodings: [15588]
for reln: ପିଉସା span_encodings: [52157, 964]
For word:  uncle in lang:  ory_Orya Difference:  -0.8525390625
###Possible relations:  ['জেঠা মশাই', 'কাকু', 'মামা', 'পিশে মশাই', 'মেশো মশাই']
for reln: মামা span_encodings: [24501]
for reln: মেশো মশাই span_encodings: [530, 2663, 15575, 635]
for reln: জেঠা মশাই span_encodings: [169, 9965, 15575, 635]
for reln: কাকু span_encodings: [63220]
for reln: পিশে মশাই span_encodings: [449, 1272, 15575, 635]
For word:  uncle in lang:  ben_Beng Difference:  -0.365478515625
###Possible relations:  ['பெரியப்பா', 'சித்தப்பா', 'மாமா']
for reln: சித்தப்பா span_encodings: [10015, 2873]
for reln: மாமா span_encodings: [24501]
for reln: பெரியப்பா span_encodings: [2765, 2873]
For word:  uncle in lang:  tam_Taml Difference:  1.0
###Possible relations:  ['ਤਾਇਆ', 'ਚਾਚਾ', 'ਮਾਮਾ', 'ਫੁੱਫੜ', 'ਮਾਸੜ']
for reln: ਮਾਮਾ span_encodings: [24501]
for reln: ਮਾਸੜ span_encodings: [1992, 1643]
for reln: ਤਾਇਆ span_encodings: [302, 6438]
for reln: ਚਾਚਾ span_encodings: [34059]
for reln: ਫੁੱਫੜ span_encodings: [7355, 19, 495, 1643]
For word:  uncle in lang:  pan_Guru Difference:  -0.9228515625
###Possible relations:  ['పెద్ద నాన్న', 'ఆయగారు', 'మామయ్య', 'మామయ్యగారు', 'చిన్న నాన్న']
for reln: పెద్ద నాన్న span_encodings: [2224, 30539]
for reln: మామయ్య span_encodings: [9971, 4559]
for reln: చిన్న నాన్న span_encodings: [2195, 30539]
for reln: ఆయగారు span_encodings: [1012, 20269]
for reln: మామయ్యగారు span_encodings: [9971, 4559, 20269]
For word:  uncle in lang:  tel_Telu Difference:  0.192626953125
###Possible relations:  ['അമ്മാവൻ', 'മൂത്ത അച്ഛൻ', 'ചിറ്റപ്പൻ', 'മൂത്തമാമൻ', 'ഇളയമാമൻ', 'മാമൻ', 'വല്ല്യച്ചൻ', 'ചാച്ചൻ']
for reln: മൂത്തമാമൻ span_encodings: [1398, 11549, 462, 28]
for reln: ഇളയമാമൻ span_encodings: [3487, 18892, 462, 28]
for reln: മാമൻ span_encodings: [9971, 28]
for reln: വല്ല്യച്ചൻ span_encodings: [2958, 537, 356, 28]
for reln: ചാച്ചൻ span_encodings: [1657, 356, 28]
for reln: മൂത്ത അച്ഛൻ span_encodings: [16674, 7673, 28]
for reln: ചിറ്റപ്പൻ span_encodings: [60069, 378, 28]
for reln: അമ്മാവൻ span_encodings: [1774, 529, 28]
Neutral relation
Matriarchal sets:  [tensor(0.6187, dtype=torch.float16), tensor(0.9639, dtype=torch.float16), tensor(0.6187, dtype=torch.float16), tensor(-0.2314, dtype=torch.float16), tensor(1.3896, dtype=torch.float16)] Patriarchal sets:  [tensor(4.4258, dtype=torch.float16), tensor(0.8779, dtype=torch.float16)]
For word:  uncle in lang:  mal_Mlym Difference:  -0.7705078125
###Possible relations:  ['ದೊಡಪ್ಪ', 'ಚಿಕ್ಕಪ್ಪ', 'ಮಾಮ', 'ಮಾವ', 'ದೊಡ್ಡಪ್ಪ']
for reln: ಮಾಮ span_encodings: [9971]
for reln: ದೊಡ್ಡಪ್ಪ span_encodings: [1945, 378]
for reln: ದೊಡಪ್ಪ span_encodings: [39398, 123, 378]
for reln: ಚಿಕ್ಕಪ್ಪ span_encodings: [2950, 378]
for reln: ಮಾವ span_encodings: [11701]
For word:  uncle in lang:  kan_Knda Difference:  -0.84765625
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -0.99951171875
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.9765625
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.95654296875
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.18359375
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.462158203125
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(3.3418, dtype=torch.float16)] Patriarchal sets:  [tensor(3.6758, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(3.3418, dtype=torch.float16)] Patriarchal sets:  [tensor(3.6758, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.165283203125
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.671875
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.6953, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.6953, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.4345703125
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.9833984375
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.951171875
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.1005859375
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.0908203125
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(2.8613, dtype=torch.float16)] Patriarchal sets:  [tensor(3.2168, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(2.8613, dtype=torch.float16)] Patriarchal sets:  [tensor(3.2168, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.17578125
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.278076171875
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.9375, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.9375, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  -0.140625
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['बुआ', 'मौसी', 'मामी', 'ताई', 'चाची']
for reln: मौसी span_encodings: [5545, 694]
for reln: मामी span_encodings: [55527]
for reln: बुआ span_encodings: [61300]
for reln: ताई span_encodings: [44111]
for reln: चाची span_encodings: [60684]
For word:  aunt in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ફોઈ', 'માસી', 'મામી', 'કાકી']
for reln: માસી span_encodings: [65770]
for reln: મામી span_encodings: [55527]
for reln: ફોઈ span_encodings: [1529, 1408]
for reln: કાકી span_encodings: [64851]
For word:  aunt in lang:  guj_Gujr Difference:  -0.9873046875
###Possible relations:  ['आत्या', 'मावशी', 'काकू', 'काकी']
for reln: मावशी span_encodings: [11701, 987]
for reln: आत्या span_encodings: [2618, 539]
for reln: काकू span_encodings: [7610, 208]
for reln: काकी span_encodings: [64851]
For word:  aunt in lang:  mar_Deva Difference:  -0.97265625
###Possible relations:  ['ପିଉସୀ', 'ମାଉସୀ', 'ମାଇଁ', 'ବଡ଼ମାଆ', 'ଖୁଡ଼ି']
for reln: ମାଉସୀ span_encodings: [30261, 694]
for reln: ମାଇଁ span_encodings: [10859, 2304]
for reln: ପିଉସୀ span_encodings: [52157, 694]
for reln: ବଡ଼ମାଆ span_encodings: [1111, 241, 1109]
for reln: ଖୁଡ଼ି span_encodings: [3617, 4405]
For word:  aunt in lang:  ory_Orya Difference:  -0.06640625
###Possible relations:  ['পিসি', 'মাসী', 'মামী', 'জেঠি', 'কাকি']
for reln: মাসী span_encodings: [65770]
for reln: মামী span_encodings: [55527]
for reln: পিসি span_encodings: [21269]
for reln: জেঠি span_encodings: [169, 8896]
for reln: কাকি span_encodings: [63969]
For word:  aunt in lang:  ben_Beng Difference:  -0.185546875
###Possible relations:  ['அத்தை', 'சித்தி', 'பெரியம்மா', 'மாமி']
for reln: மாமி span_encodings: [9971, 323]
for reln: பெரியம்மா span_encodings: [2765, 13257]
for reln: அத்தை span_encodings: [213, 681]
Neutral relation
Matriarchal sets:  [tensor(2.8672, dtype=torch.float16)] Patriarchal sets:  [tensor(3.4980, dtype=torch.float16)]
for reln: சித்தி span_encodings: [10015, 323]
Neutral relation
Matriarchal sets:  [tensor(2.8672, dtype=torch.float16)] Patriarchal sets:  [tensor(3.4980, dtype=torch.float16)]
For word:  aunt in lang:  tam_Taml Difference:  -0.305419921875
###Possible relations:  ['ਭੂਆ', 'ਮਾਸੀ', 'ਮਾਮੀ', 'ਤਾਈ']
for reln: ਮਾਸੀ span_encodings: [65770]
for reln: ਮਾਮੀ span_encodings: [55527]
for reln: ਭੂਆ span_encodings: [2620, 1109]
for reln: ਤਾਈ span_encodings: [44111]
For word:  aunt in lang:  pan_Guru Difference:  -0.3232421875
###Possible relations:  ['అత్త', 'పెద్దమ్మ', 'పిన్ని']
for reln: అత్త span_encodings: [11569]
for reln: పెద్దమ్మ span_encodings: [2224, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.9180, dtype=torch.float16)]
for reln: పిన్ని span_encodings: [15081]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  [tensor(6.9180, dtype=torch.float16)]
Skipping word: aunt in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മുത്തഅപ്പച്ചി', 'ഇളയ അപ്പച്ചി', 'വല്യമ്മ', 'കുഞ്ഞമ്മ', 'വലിയ മാമി', 'ചെറിയ മാമി']
for reln: വല്യമ്മ span_encodings: [76, 6526, 1476]
for reln: കുഞ്ഞമ്മ span_encodings: [10683, 1476]
for reln: വലിയ മാമി span_encodings: [1631, 9971, 323]
for reln: ചെറിയ മാമി span_encodings: [5092, 9971, 323]
for reln: മുത്തഅപ്പച്ചി span_encodings: [18823, 1331, 378, 2908]
for reln: ഇളയ അപ്പച്ചി span_encodings: [3487, 254, 2763, 2908]
For word:  aunt in lang:  mal_Mlym Difference:  0.202880859375
###Possible relations:  ['ಅತ್ತೆ', 'ದೊಡ್ಡಮ್ಮ', 'ಚಿಕ್ಕಮ್ಮ']
for reln: ಅತ್ತೆ span_encodings: [213, 823]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ದೊಡ್ಡಮ್ಮ span_encodings: [1945, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
for reln: ಚಿಕ್ಕಮ್ಮ span_encodings: [2950, 1476]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  aunt in lang:  kan_Knda
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  -0.307861328125
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.521484375
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.235595703125
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.9345703125
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.6083984375
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.9970703125
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.6162109375
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(-0.1876, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(-0.1876, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0189, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(-0.0189, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.306884765625
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  -0.572265625
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.351806640625
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.59375
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.9580078125
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.6875
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.99609375
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.611328125
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(-0.3960, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(-0.3960, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(0.0832, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(0.0832, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.66552734375
###Possible relations:  ['साला', 'जीजा', 'जेठ', 'देवर', 'बहनोई']
for reln: साला span_encodings: [27985]
for reln: जीजा span_encodings: [613, 2935]
for reln: जेठ span_encodings: [47638]
for reln: बहनोई span_encodings: [4615, 49403]
for reln: देवर span_encodings: [9245]
For word:  brother-in-law in lang:  hin_Deva Difference:  0.3837890625
###Possible relations:  ['સાળો', 'બનેવી', 'જેઠ', 'દિયર']
for reln: સાળો span_encodings: [1872, 2466]
for reln: બનેવી span_encodings: [2807, 748]
for reln: જેઠ span_encodings: [47638]
for reln: દિયર span_encodings: [409, 4654]
For word:  brother-in-law in lang:  guj_Gujr Difference:  0.9921875
###Possible relations:  ['मेहुणा', 'मेव्हणा', 'दाजी', 'भाऊजी', 'दीर']
for reln: मेहुणा span_encodings: [530, 7131, 1067]
for reln: मेव्हणा span_encodings: [530, 6482, 1067]
for reln: दाजी span_encodings: [409, 7369]
for reln: भाऊजी span_encodings: [22699, 795]
for reln: दीर span_encodings: [56, 130]
For word:  brother-in-law in lang:  mar_Deva Difference:  0.998046875
###Possible relations:  ['ବଡ଼ ଶଳା', 'ଶଳା', 'ଭିଣେଇ', 'ଭିଣୋଇ', 'ଦେଢ଼ଶୁର', 'ଦିଅର']
for reln: ବଡ଼ ଶଳା span_encodings: [1111, 649, 1624]
for reln: ଶଳା span_encodings: [649, 1624]
for reln: ଭିଣେଇ span_encodings: [5442, 53872]
for reln: ଭିଣୋଇ span_encodings: [5442, 1754, 89]
for reln: ଦେଢ଼ଶୁର span_encodings: [57, 10861, 22252]
for reln: ଦିଅର span_encodings: [305, 4093]
For word:  brother-in-law in lang:  ory_Orya Difference:  0.96337890625
###Possible relations:  ['বড়ো শালা', 'ছোট শালা', 'শালা', 'জামাই বাবু', 'জামাই', 'ভাসুর', 'দেওর']
for reln: বড়ো শালা span_encodings: [29638, 17411]
for reln: ছোট শালা span_encodings: [2540, 17411]
for reln: শালা span_encodings: [17411]
for reln: জামাই বাবু span_encodings: [5525, 635, 10074]
for reln: জামাই span_encodings: [5525, 635]
for reln: ভাসুর span_encodings: [22804, 726]
for reln: দেওর span_encodings: [46546, 130]
For word:  brother-in-law in lang:  ben_Beng Difference:  0.6201171875
###Possible relations:  ['மைத்துனர்', 'அத்திம்பேர்', 'மாமா', 'மைத்துனன்', 'கொழுந்தன்']
for reln: மைத்துனர் span_encodings: [1364, 864, 1488]
for reln: அத்திம்பேர் span_encodings: [213, 182, 1696, 44832]
for reln: மாமா span_encodings: [24501]
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: கொழுந்தன் span_encodings: [12713, 902, 319]
For word:  brother-in-law in lang:  tam_Taml Difference:  0.9970703125
###Possible relations:  ['ਸਾਲਾ', 'ਜੀਜਾ', 'ਜੇਠ', 'ਦੇਵਰ', 'ਸਾਂਡੂ']
for reln: ਸਾਲਾ span_encodings: [27985]
for reln: ਜੀਜਾ span_encodings: [613, 2935]
for reln: ਜੇਠ span_encodings: [47638]
for reln: ਸਾਂਡੂ span_encodings: [3235, 4161]
for reln: ਦੇਵਰ span_encodings: [9245]
For word:  brother-in-law in lang:  pan_Guru Difference:  0.6875
###Possible relations:  ['బావగారు', 'బావమరిది', 'మరిదిగారు']
for reln: బావమరిది span_encodings: [19360, 143, 399, 468]
for reln: బావగారు span_encodings: [19360, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.8086, dtype=torch.float16)] Patriarchal sets:  []
for reln: మరిదిగారు span_encodings: [2028, 468, 20269]
Neutral relation
Matriarchal sets:  [tensor(3.8086, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['അളിയൻ', 'ചേട്ടൻ', 'അനിയൻ']
for reln: അളിയൻ span_encodings: [3373, 158, 28]
for reln: ചേട്ടൻ span_encodings: [620, 352, 28]
Neutral relation
Matriarchal sets:  [tensor(1.2080, dtype=torch.float16)] Patriarchal sets:  []
for reln: അനിയൻ span_encodings: [47450, 28]
Neutral relation
Matriarchal sets:  [tensor(1.2080, dtype=torch.float16)] Patriarchal sets:  []
Skipping word: brother-in-law in lang: mal_Mlym due to empty logits and  LANGUAGE IS BIASED. matriarchal
###Possible relations:  ['ಭಾವ', 'ಬಾವ', 'ಮೈದುನ']
for reln: ಭಾವ span_encodings: [1207]
for reln: ಬಾವ span_encodings: [19360]
for reln: ಮೈದುನ span_encodings: [1364, 58831]
For word:  brother-in-law in lang:  kan_Knda Difference:  0.9970703125
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.7646484375
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.9853515625
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.2373046875
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.4482421875
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  0.2021484375
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.359375
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.280029296875
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(2.6738, dtype=torch.float16)] Patriarchal sets:  [tensor(3.2695, dtype=torch.float16), tensor(3.3555, dtype=torch.float16), tensor(3.5176, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.71875
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.79296875
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.98046875
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.237060546875
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.435302734375
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  -0.400634765625
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.36328125
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.5830078125
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(2.0879, dtype=torch.float16)] Patriarchal sets:  [tensor(2.5352, dtype=torch.float16), tensor(2.8281, dtype=torch.float16), tensor(2.7480, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.697265625
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['नानद', 'भाभी', 'साली']
for reln: साली span_encodings: [18477]
for reln: नानद span_encodings: [5457, 64]
for reln: भाभी span_encodings: [51887]
For word:  sister-in-law in lang:  hin_Deva Difference:  0.8115234375
###Possible relations:  ['નણંદ', 'ભાભી', 'સાળી']
for reln: સાળી span_encodings: [1872, 2651]
for reln: નણંદ span_encodings: [80, 266, 942]
for reln: ભાભી span_encodings: [51887]
For word:  sister-in-law in lang:  guj_Gujr Difference:  -0.9814453125
###Possible relations:  ['नणंद', 'वहिनी', 'भावजय', 'मेहुणी', 'मेव्हणी']
for reln: मेहुणी span_encodings: [530, 7131, 1730]
for reln: मेव्हणी span_encodings: [530, 6482, 1730]
for reln: नणंद span_encodings: [80, 266, 942]
for reln: वहिनी span_encodings: [193, 2140]
for reln: भावजय span_encodings: [1207, 19261]
For word:  sister-in-law in lang:  mar_Deva Difference:  0.32080078125
###Possible relations:  ['ବଡ଼ ନଣନ୍ଦ', 'ନଣନ୍ଦ', 'ଭାଉଜ', 'ଭାଇବୋହୁ', 'ଦେଢ଼ଶାସୁ', 'ଶାଳୀ']
for reln: ଦେଢ଼ଶାସୁ span_encodings: [57, 10861, 325, 14699]
for reln: ଶାଳୀ span_encodings: [3175, 2651]
for reln: ବଡ଼ ନଣନ୍ଦ span_encodings: [1111, 80, 266, 5766]
for reln: ନଣନ୍ଦ span_encodings: [80, 266, 5766]
for reln: ଭାଉଜ span_encodings: [4569, 25547]
for reln: ଭାଇବୋହୁ span_encodings: [3991, 1137, 7131]
For word:  sister-in-law in lang:  ory_Orya Difference:  -0.43310546875
###Possible relations:  ['বড়ো ননদ', 'ছোট ননদ', 'ননদ', 'বড়ো জা', 'ছোট জা', 'জা', 'বড়ো শালী', 'ছোট শালী', 'শালী']
for reln: বড়ো শালী span_encodings: [29638, 649, 4165]
for reln: ছোট শালী span_encodings: [2540, 649, 4165]
for reln: শালী span_encodings: [649, 4165]
for reln: বড়ো ননদ span_encodings: [29638, 3544, 64]
for reln: ছোট ননদ span_encodings: [2540, 3544, 64]
for reln: ননদ span_encodings: [3544, 64]
for reln: বড়ো জা span_encodings: [29638, 176]
for reln: ছোট জা span_encodings: [2540, 176]
for reln: জা span_encodings: [176]
For word:  sister-in-law in lang:  ben_Beng Difference:  0.05078125
###Possible relations:  ['நாத்தனார்', 'மைத்துனி', 'அண்ணி', 'கொழுந்தியாள்', 'அக்கா', 'தங்கை']
for reln: அக்கா span_encodings: [45390]
for reln: தங்கை span_encodings: [11591, 463]
for reln: நாத்தனார் span_encodings: [80, 1864, 4157]
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணி span_encodings: [213, 11990]
for reln: கொழுந்தியாள் span_encodings: [12713, 902, 438, 1022]
For word:  sister-in-law in lang:  tam_Taml Difference:  -0.3876953125
###Possible relations:  ['ਨਣਦ', 'ਭਾਬੀ', 'ਸਾਲੀ', 'ਜੇਠਾਣੀ']
for reln: ਸਾਲੀ span_encodings: [18477]
for reln: ਨਣਦ span_encodings: [80, 36232]
for reln: ਭਾਬੀ span_encodings: [2347, 583]
for reln: ਜੇਠਾਣੀ span_encodings: [47638, 11798]
For word:  sister-in-law in lang:  pan_Guru Difference:  -0.52978515625
###Possible relations:  ['వదినగారు', 'ఆడపడచు', 'వదిన', 'మరదలు']
for reln: వదినగారు span_encodings: [76, 2621, 20269]
for reln: ఆడపడచు span_encodings: [2634, 1616, 2625]
for reln: వదిన span_encodings: [76, 2621]
for reln: మరదలు span_encodings: [19684, 124]
Skipping word: sister-in-law in lang: tel_Telu due to empty logits and  LANGUAGE IS BIASED. patriarchal
###Possible relations:  ['മൂത്ത നാത്തൂൻ', 'ഇളയ നാത്തൂൻ', 'ചേട്ടത്തി', ' അനുജത്തി', 'ചേച്ചി']
for reln: ചേച്ചി span_encodings: [620, 2908]
for reln: മൂത്ത നാത്തൂൻ span_encodings: [16674, 80, 1864, 208, 28]
for reln: ഇളയ നാത്തൂൻ span_encodings: [3487, 254, 80, 1864, 208, 28]
for reln: ചേട്ടത്തി span_encodings: [620, 352, 182]
for reln:  അനുജത്തി span_encodings: [51562, 182]
Neutral relation
Matriarchal sets:  [tensor(1.7900, dtype=torch.float16)] Patriarchal sets:  [tensor(1.6543, dtype=torch.float16), tensor(1.3672, dtype=torch.float16), tensor(1.5137, dtype=torch.float16)]
For word:  sister-in-law in lang:  mal_Mlym Difference:  -0.3916015625
###Possible relations:  ['ಅತ್ತೀಗೆ', 'ನಾಧಿನಿ', 'ಅತ್ತಿಗೆ', 'ನಾಧಿನೀ', 'ನಾಧೀನಿ']
for reln: ನಾಧೀನಿ span_encodings: [46, 2191, 113]
for reln: ಅತ್ತೀಗೆ span_encodings: [213, 13695, 375]
for reln: ನಾಧಿನಿ span_encodings: [46, 2603, 113]
for reln: ಅತ್ತಿಗೆ span_encodings: [213, 24430]
for reln: ನಾಧಿನೀ span_encodings: [46, 499, 2140]
For word:  sister-in-law in lang:  kan_Knda Difference:  -0.998046875
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.9501953125
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.127197265625
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.1181640625
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.9072265625
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.81689453125
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.332275390625
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.6669921875
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.3525390625
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  -0.77392578125
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.9521484375
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  0.4892578125
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.51953125
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.8037109375
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  -0.8662109375
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.327880859375
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.2744140625
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.323974609375
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  -0.90966796875
###Possible relations:  ['भाई', 'बहन']
for reln: बहन span_encodings: [7189]
for reln: भाई span_encodings: [3057]
For word:  cousin in lang:  hin_Deva Difference:  -0.921875
###Possible relations:  ['દીકરો', 'દીકરી']
for reln: દીકરી span_encodings: [17675]
for reln: દીકરો span_encodings: [56, 23488]
For word:  cousin in lang:  guj_Gujr Difference:  -0.195556640625
###Possible relations:  ['चुलत भाऊ', 'मामे भाऊ', 'आत्ये भाऊ', 'मावस भाऊ', 'चुलत बहीण', 'मामे बहीण', 'आत्ये बहीण', 'मावस बहीण']
for reln: मामे भाऊ span_encodings: [9971, 242, 22699]
for reln: मावस भाऊ span_encodings: [11701, 115, 22699]
for reln: मामे बहीण span_encodings: [9971, 242, 38856, 266]
for reln: मावस बहीण span_encodings: [11701, 115, 38856, 266]
for reln: चुलत भाऊ span_encodings: [6702, 119, 22699]
for reln: आत्ये भाऊ span_encodings: [34, 58502, 22699]
for reln: चुलत बहीण span_encodings: [6702, 119, 38856, 266]
for reln: आत्ये बहीण span_encodings: [34, 58502, 38856, 266]
For word:  cousin in lang:  mar_Deva Difference:  -0.423583984375
###Possible relations:  ['ଭାଇ', 'ଦିଦି']
for reln: ଦିଦି span_encodings: [48446]
for reln: ଭାଇ span_encodings: [3991]
For word:  cousin in lang:  ory_Orya Difference:  -0.962890625
###Possible relations:  ['দাদা', 'ভাই', 'দিদি', 'বোনষষ']
for reln: দিদি span_encodings: [48446]
for reln: বোনষষ span_encodings: [11656, 444, 444]
for reln: দাদা span_encodings: [15588]
for reln: ভাই span_encodings: [3991]
For word:  cousin in lang:  ben_Beng Difference:  0.75634765625
###Possible relations:  ['அண்ணா', 'தம்பி', 'அக்கா']
for reln: அக்கா span_encodings: [45390]
for reln: அண்ணா span_encodings: [36505]
for reln: தம்பி span_encodings: [48982]
For word:  cousin in lang:  tam_Taml Difference:  -0.34765625
###Possible relations:  ['ਭਾਈ', 'ਭੈਣ']
for reln: ਭੈਣ span_encodings: [36624]
for reln: ਭਾਈ span_encodings: [3057]
For word:  cousin in lang:  pan_Guru Difference:  -0.1865234375
###Possible relations:  ['అన్నా', 'తమ్ముడు', 'అక్కా']
for reln: అక్కా span_encodings: [45390]
for reln: అన్నా span_encodings: [12500]
for reln: తమ్ముడు span_encodings: [1196, 4645]
For word:  cousin in lang:  tel_Telu Difference:  -0.331787109375
###Possible relations:  ['ബന്ധു']
for reln: ബന്ധു span_encodings: [4247]
Neutral relation
Matriarchal sets:  [] Patriarchal sets:  []
Neutral relations present for word:  cousin in lang:  mal_Mlym
###Possible relations:  ['ಅಣ್ಣ', 'ಅಕ್ಕ', 'ತಮ್ಮ', 'ತಂಗಿ']
for reln: ಅಕ್ಕ span_encodings: [4965]
for reln: ತಂಗಿ span_encodings: [27713, 323]
for reln: ಅಣ್ಣ span_encodings: [26044]
for reln: ತಮ್ಮ span_encodings: [1196]
For word:  cousin in lang:  kan_Knda Difference:  0.0126953125
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  0.169921875
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.332275390625
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.96875
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.2265625
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  0.297607421875
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.4501953125
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -0.237548828125
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.6591796875
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.908203125
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.169189453125
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -0.0703125
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.333984375
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.055419921875
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  0.07421875
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  -0.034912109375
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.43359375
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -0.084228515625
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  0.005615234375
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.71484375
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.102783203125
###Possible relations:  ['भतीजा', 'भांजा']
for reln: भांजा span_encodings: [30481, 2935]
for reln: भतीजा span_encodings: [69840]
For word:  nephew in lang:  hin_Deva Difference:  -1.0
###Possible relations:  ['ભત્રીજો', 'ભાણેજ', 'ભાણો']
for reln: ભાણેજ span_encodings: [980, 14556, 256]
for reln: ભાણો span_encodings: [980, 6318]
for reln: ભત્રીજો span_encodings: [980, 14910, 3204]
For word:  nephew in lang:  guj_Gujr Difference:  0.751953125
###Possible relations:  ['पुतणा', 'भाचा']
for reln: भाचा span_encodings: [4569, 317]
for reln: पुतणा span_encodings: [4300, 1067]
For word:  nephew in lang:  mar_Deva Difference:  0.058349609375
###Possible relations:  ['ପୁତୁରା', 'ଭଣଜା']
for reln: ଭଣଜା span_encodings: [30360, 2935]
for reln: ପୁତୁରା span_encodings: [4300, 5686]
For word:  nephew in lang:  ory_Orya Difference:  -0.1337890625
###Possible relations:  ['ভাইপৌ', 'বোনপৌ']
for reln: বোনপৌ span_encodings: [11656, 53530]
for reln: ভাইপৌ span_encodings: [3991, 53530]
For word:  nephew in lang:  ben_Beng Difference:  -0.002197265625
###Possible relations:  ['அண்ணன் மகன்', 'தம்பி மகன்', 'மைத்துனன்']
for reln: மைத்துனன் span_encodings: [1364, 864, 48231]
for reln: அண்ணன் மகன் span_encodings: [26044, 319, 15463]
for reln: தம்பி மகன் span_encodings: [48982, 15463]
For word:  nephew in lang:  tam_Taml Difference:  -0.381103515625
###Possible relations:  ['ਭਤੀਜਾ', 'ਭਾਂਜਾ']
for reln: ਭਾਂਜਾ span_encodings: [30481, 2935]
for reln: ਭਤੀਜਾ span_encodings: [69840]
For word:  nephew in lang:  pan_Guru Difference:  -1.0
###Possible relations:  ['మేనకొడుకు', 'అల్లుడు']
for reln: అల్లుడు span_encodings: [566, 4645]
for reln: మేనకొడుకు span_encodings: [530, 6391, 36189, 1779]
For word:  nephew in lang:  tel_Telu Difference:  -0.039794921875
###Possible relations:  ['അനന്തരവൻ', 'മരുമകൻ']
for reln: മരുമകൻ span_encodings: [45894, 28]
for reln: അനന്തരവൻ span_encodings: [1326, 13315, 128, 28]
For word:  nephew in lang:  mal_Mlym Difference:  0.693359375
###Possible relations:  ['ಸೋದರ ಅಳಿಯ', 'ಸೋದರ ಮಗ']
for reln: ಸೋದರ ಮಗ span_encodings: [34385, 2006]
for reln: ಸೋದರ ಅಳಿಯ span_encodings: [34385, 3373, 158]
For word:  nephew in lang:  kan_Knda Difference:  0.129150390625
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.7109375
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.8681640625
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.7060546875
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.228515625
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  0.328857421875
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.451416015625
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.8984375
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.317626953125
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.78515625
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.7978515625
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.7724609375
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.869140625
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.7451171875
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.111083984375
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  -0.035400390625
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.433837890625
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.9296875
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.6875
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.7978515625
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.828125
###Possible relations:  ['भतीजी', 'भांजी']
for reln: भांजी span_encodings: [30481, 795]
for reln: भतीजी span_encodings: [39136, 795]
For word:  niece in lang:  hin_Deva Difference:  -0.74609375
###Possible relations:  ['ભત્રીજી', 'ભાણેજી', 'ભાણી']
for reln: ભાણેજી span_encodings: [980, 14556, 795]
for reln: ભાણી span_encodings: [980, 11798]
for reln: ભત્રીજી span_encodings: [980, 14910, 795]
For word:  niece in lang:  guj_Gujr Difference:  0.8564453125
###Possible relations:  ['पुतणी', 'भाची']
for reln: भाची span_encodings: [4569, 362]
for reln: पुतणी span_encodings: [4300, 1730]
For word:  niece in lang:  mar_Deva Difference:  0.8798828125
###Possible relations:  ['ଝିଆରୀ', 'ଭାଣିଜୀ']
for reln: ଭାଣିଜୀ span_encodings: [980, 9742, 795]
for reln: ଝିଆରୀ span_encodings: [2398, 80993]
For word:  niece in lang:  ory_Orya Difference:  -0.122314453125
###Possible relations:  ['ভাইঝী', 'বোনঝী']
for reln: বোনঝী span_encodings: [11656, 10451]
for reln: ভাইঝী span_encodings: [3991, 10451]
For word:  niece in lang:  ben_Beng Difference:  0.06640625
###Possible relations:  ['அண்ணன் மகள்', 'தம்பி மகள்', 'மைத்துனி']
for reln: மைத்துனி span_encodings: [1364, 864, 3158]
for reln: அண்ணன் மகள் span_encodings: [26044, 319, 21280]
for reln: தம்பி மகள் span_encodings: [48982, 21280]
For word:  niece in lang:  tam_Taml Difference:  -0.389404296875
###Possible relations:  ['ਭਤੀਜੀ', 'ਭਾਂਜੀ']
for reln: ਭਾਂਜੀ span_encodings: [30481, 795]
for reln: ਭਤੀਜੀ span_encodings: [39136, 795]
For word:  niece in lang:  pan_Guru Difference:  -0.90234375
###Possible relations:  ['మేనకోడలు', 'అమ్మాయి']
for reln: అమ్మాయి span_encodings: [16343]
for reln: మేనకోడలు span_encodings: [14581, 307, 12563]
For word:  niece in lang:  tel_Telu Difference:  -0.8076171875
###Possible relations:  ['അനന്തരവൾ', 'മരുമകൾ']
for reln: മരുമകൾ span_encodings: [45894, 27]
for reln: അനന്തരവൾ span_encodings: [1326, 13315, 128, 27]
For word:  niece in lang:  mal_Mlym Difference:  0.787109375
###Possible relations:  ['ಸೋದರ  ಮಗಳು', 'ಸೋದರ ಸೊಸೆ']
for reln: ಸೋದರ ಸೊಸೆ span_encodings: [34385, 6324, 3658]
for reln: ಸೋದರ  ಮಗಳು span_encodings: [34385, 23928]
For word:  niece in lang:  kan_Knda Difference:  -0.791015625



final_res=
{'hin_Deva': {'grandmother': 0.6796875,
  'grandfather': 0.9677734375,
  'uncle': -0.916015625,
  'aunt': -1.0,
  'brother-in-law': 0.3837890625,
  'sister-in-law': 0.8115234375,
  'cousin': -0.921875,
  'nephew': -1.0,
  'niece': -0.74609375},
 'guj_Gujr': {'grandmother': -0.9873046875,
  'grandfather': -0.9990234375,
  'uncle': -0.9853515625,
  'aunt': -0.9873046875,
  'brother-in-law': 0.9921875,
  'sister-in-law': -0.9814453125,
  'cousin': -0.195556640625,
  'nephew': 0.751953125,
  'niece': 0.8564453125},
 'mar_Deva': {'grandmother': 0,
  'grandfather': 0,
  'uncle': 0.8310546875,
  'aunt': -0.97265625,
  'brother-in-law': 0.998046875,
  'sister-in-law': 0.32080078125,
  'cousin': -0.423583984375,
  'nephew': 0.058349609375,
  'niece': 0.8798828125},
 'ory_Orya': {'grandmother': -0.9248046875,
  'grandfather': -0.2919921875,
  'uncle': -0.8525390625,
  'aunt': -0.06640625,
  'brother-in-law': 0.96337890625,
  'sister-in-law': -0.43310546875,
  'cousin': -0.962890625,
  'nephew': -0.1337890625,
  'niece': -0.122314453125},
 'ben_Beng': {'grandmother': 0.7724609375,
  'grandfather': 0.7998046875,
  'uncle': -0.365478515625,
  'aunt': -0.185546875,
  'brother-in-law': 0.6201171875,
  'sister-in-law': 0.05078125,
  'cousin': 0.75634765625,
  'nephew': -0.002197265625,
  'niece': 0.06640625},
 'tam_Taml': {'grandmother': 0.6806640625,
  'grandfather': 0,
  'uncle': 1.0,
  'aunt': -0.305419921875,
  'brother-in-law': 0.9970703125,
  'sister-in-law': -0.3876953125,
  'cousin': -0.34765625,
  'nephew': -0.381103515625,
  'niece': -0.389404296875},
 'pan_Guru': {'grandmother': 0.6943359375,
  'grandfather': -0.6669921875,
  'uncle': -0.9228515625,
  'aunt': -0.3232421875,
  'brother-in-law': 0.6875,
  'sister-in-law': -0.52978515625,
  'cousin': -0.1865234375,
  'nephew': -1.0,
  'niece': -0.90234375},
 'tel_Telu': {'grandmother': 0.90087890625,
  'grandfather': 0,
  'uncle': 0.192626953125,
  'aunt': nan,
  'brother-in-law': nan,
  'sister-in-law': nan,
  'cousin': -0.331787109375,
  'nephew': -0.039794921875,
  'niece': -0.8076171875},
 'mal_Mlym': {'grandmother': 0,
  'grandfather': 0,
  'uncle': -0.7705078125,
  'aunt': 0.202880859375,
  'brother-in-law': nan,
  'sister-in-law': -0.3916015625,
  'cousin': 0,
  'nephew': 0.693359375,
  'niece': 0.787109375},
 'kan_Knda': {'grandmother': 0,
  'grandfather': 0,
  'uncle': -0.84765625,
  'aunt': 0,
  'brother-in-law': 0.9970703125,
  'sister-in-law': -0.998046875,
  'cousin': 0.0126953125,
  'nephew': 0.129150390625,
  'niece': -0.791015625}}


  confusion_mat=[[0.6796875,
  -0.9873046875,
  0,
  -0.9248046875,
  0.7724609375,
  0.6806640625,
  0.6943359375,
  0.90087890625,
  0,
  0],
 [0.9677734375,
  -0.9990234375,
  0,
  -0.2919921875,
  0.7998046875,
  0,
  -0.6669921875,
  0,
  0,
  0],
 [-0.916015625,
  -0.9853515625,
  0.8310546875,
  -0.8525390625,
  -0.365478515625,
  1.0,
  -0.9228515625,
  0.192626953125,
  -0.7705078125,
  -0.84765625],
 [-1.0,
  -0.9873046875,
  -0.97265625,
  -0.06640625,
  -0.185546875,
  -0.305419921875,
  -0.3232421875,
  nan,
  0.202880859375,
  0],
 [0.3837890625,
  0.9921875,
  0.998046875,
  0.96337890625,
  0.6201171875,
  0.9970703125,
  0.6875,
  nan,
  nan,
  0.9970703125],
 [0.8115234375,
  -0.9814453125,
  0.32080078125,
  -0.43310546875,
  0.05078125,
  -0.3876953125,
  -0.52978515625,
  nan,
  -0.3916015625,
  -0.998046875],
 [-0.921875,
  -0.195556640625,
  -0.423583984375,
  -0.962890625,
  0.75634765625,
  -0.34765625,
  -0.1865234375,
  -0.331787109375,
  0,
  0.0126953125],
 [-1.0,
  0.751953125,
  0.058349609375,
  -0.1337890625,
  -0.002197265625,
  -0.381103515625,
  -1.0,
  -0.039794921875,
  0.693359375,
  0.129150390625],
 [-0.74609375,
  0.8564453125,
  0.8798828125,
  -0.122314453125,
  0.06640625,
  -0.389404296875,
  -0.90234375,
  -0.8076171875,
  0.787109375,
  -0.791015625]]



  odia verification !!!!
[tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 6.5565e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.1723e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.9802e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 5.9605e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.9605e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.9605e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.3842e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 7.1526e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0137e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.1723e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.9802e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 7.1526e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0332e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 5.3644e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.7881e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 6.5565e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 3.5763e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.7684e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.7881e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0430e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 6.5565e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.7881e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.1526e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0381e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 5.3644e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 3.5763e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0137e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 5.3644e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 3.5763e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 7.1526e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.7486e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 4.1723e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.2187e-06, 3.2187e-06, 4.5850e-01,  ..., 3.2187e-06, 3.2187e-06,
        3.2187e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.6572e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0186e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 5.9605e-08,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0088e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.7684e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.7684e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 5.3644e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.9605e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 7.7486e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.1723e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.1723e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.1590e-06, 3.1590e-06, 2.7588e-01,  ..., 3.1590e-06, 3.1590e-06,
        3.1590e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.5693e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 7.1526e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 5.9605e-08,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.7684e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.3644e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.9605e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 7.1526e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.6359e-06, 3.6359e-06, 3.3447e-01,  ..., 3.6359e-06, 3.6359e-06,
        3.6359e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0039e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.2517e-06,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.7684e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.1723e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.3644e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 7.1526e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.2187e-06, 3.2187e-06, 2.3914e-01,  ..., 3.2783e-06, 3.2187e-06,
        3.2187e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.6084e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0039e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 7.7486e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 5.9605e-08,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 2.3842e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.7684e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.7684e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.7684e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 5.9605e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 6.5565e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.7486e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 3.5763e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.1723e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9307e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.3496e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0039e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1325e-06,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 1.1921e-07,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0039e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 5.3644e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 5.3644e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 7.1526e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 8.3447e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 3.5763e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.9802e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.9802e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.8672e-01,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0186e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 8.3447e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 5.9605e-08,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.5367e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 5.3644e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.7684e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.3644e-07,  ..., 9.5367e-07, 1.0133e-06,
        9.5367e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.1921e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.1723e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 7.1526e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.1921e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([4.1723e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 5.9605e-08,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.5497e-06, 1.5497e-06, 4.1723e-07,  ..., 1.5497e-06, 1.5497e-06,
        1.5497e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.5497e-06, 1.5497e-06, 5.3644e-07,  ..., 1.5497e-06, 1.5497e-06,
        1.5497e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.3842e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.1921e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 6.5565e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.9802e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.1921e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 5.9605e-08,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 5.9605e-08,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.5497e-06, 1.5497e-06, 4.1723e-07,  ..., 1.5497e-06, 1.5497e-06,
        1.5497e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.4901e-06, 1.4901e-06, 5.9605e-07,  ..., 1.4901e-06, 1.4901e-06,
        1.4901e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.3842e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.1921e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.1921e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 6.5565e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.1921e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 5.9605e-08,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 5.9605e-08,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.1921e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.5497e-06, 1.5497e-06, 4.1723e-07,  ..., 1.5497e-06, 1.5497e-06,
        1.5497e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.4901e-06, 1.4901e-06, 5.9605e-07,  ..., 1.4901e-06, 1.4901e-06,
        1.4901e-06], dtype=torch.float16), tensor([8.3447e-07, 7.7486e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 2.3842e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.1921e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 4.7684e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 6.5565e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.9802e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 5.9605e-08,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9062e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.1921e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.5497e-06, 1.5497e-06, 4.7684e-07,  ..., 1.5497e-06, 1.5497e-06,
        1.5497e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 5.9605e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 5.3644e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.1526e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 4.1723e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 5.9605e-08,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 5.9605e-08,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 5.5432e-06,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 4.7684e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 5.3644e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.9802e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.3644e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 7.1526e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.7684e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.1921e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.7684e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.7881e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 3.5763e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.3644e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.7684e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 4.1723e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 0.0000e+00,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.1723e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 1.1921e-07,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.3842e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.1526e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.3644e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.3447e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.9605e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 4.1723e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9941e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 6.5565e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 4.1986e-04,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.6093e-06,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 5.9605e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 5.9605e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 3.5763e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.3842e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.3842e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.1921e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 6.5565e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 7.7486e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 5.3644e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 3.5763e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.1723e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9795e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 4.2295e-04,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 0.0000e+00,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 5.3644e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 5.3644e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 1.7881e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.1723e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.1921e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 7.7486e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 5.3644e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 9.5367e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 5.9605e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.1723e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.1723e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 5.9605e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 7.1526e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.9802e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 2.9802e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 4.7684e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.7486e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.9605e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 4.1723e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 4.4107e-06,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0234e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 3.5763e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 5.3644e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 5.3644e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.9802e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.1723e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.5565e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.7486e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.9605e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 4.1127e-06,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 5.3644e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 4.7684e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 5.3644e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.9802e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 3.5763e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.1921e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 6.5565e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.7684e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 8.3447e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-06,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0088e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.1921e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 5.9605e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 5.3644e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 2.3842e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0729e-06, 1.7881e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 7.1526e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 8.9407e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.9935e-06,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 8.3447e-07, 9.0039e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 7.1526e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 7.1526e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 5.9605e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 3.5763e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.1723e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 2.3842e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 3.5763e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.3644e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 7.1526e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.7684e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 8.9407e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.7684e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([6.5565e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9648e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 7.1526e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9941e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.3113e-06,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 5.9605e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 6.5565e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 2.3842e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 4.7684e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 7.1526e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.7684e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 8.9407e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.3644e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9941e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 3.0994e-06,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0234e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 7.7486e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 5.9605e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 7.1526e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 2.3842e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.7684e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 5.9605e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.1526e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.3644e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 3.5763e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9844e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 4.4703e-06,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0186e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 5.3644e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 5.9605e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.9802e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 7.1526e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.3644e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.3447e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.9605e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.7684e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 5.9605e-08,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9893e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.2650e-06,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0088e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 3.5763e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 6.5565e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 6.5565e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 3.5763e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.7881e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 3.5763e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.3842e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 5.9605e-08,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 2.3842e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 4.7684e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 1.1921e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.9605e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 4.1723e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.9802e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 5.9605e-08,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 2.9802e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.9802e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 0.0000e+00,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 4.1723e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 9.3994e-03,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 2.9802e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.4912e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 2.9802e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9844e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.4901e-06, 1.4901e-06, 4.1723e-07,  ..., 1.4901e-06, 1.4901e-06,
        1.4901e-06], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([1.4901e-06, 1.4901e-06, 4.7684e-07,  ..., 1.4901e-06, 1.4901e-06,
        1.4901e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 0.0000e+00,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 1.7881e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.9605e-08,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 1.7881e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 1.7881e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 5.9605e-08,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 5.9605e-08,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 5.9605e-08,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 7.7486e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 6.5565e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 1.0133e-06,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 8.3447e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 9.5367e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 8.3447e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9697e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.6451e-05,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9795e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9697e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9502e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9893e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 7.1526e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 6.5565e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 6.5565e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 5.3644e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 5.9605e-08,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 1.7881e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 1.7881e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 1.7881e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 1.7881e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 6.5565e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 5.9605e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 7.7486e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 6.5565e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 7.7486e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 6.5565e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9746e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 5.8413e-06,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.3736e-04,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9941e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0039e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 6.5565e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.1723e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 5.3644e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.1723e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 5.9605e-08,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.9605e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 5.3644e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 6.5565e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.9605e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 6.5565e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 8.4877e-05,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.0715e-01,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.0715e-01,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0234e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0283e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.7684e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.1921e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.9605e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 5.3644e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 6.5565e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 5.9605e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 6.5565e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 5.3644e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9795e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.5630e-06,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 9.0039e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9990e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 4.1723e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 5.9605e-08,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.1921e-07, 1.1921e-07, 0.0000e+00,  ..., 1.1921e-07, 1.1921e-07,
        1.1921e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 7.1526e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 5.9605e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 7.7486e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 6.5565e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 7.1526e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 6.5565e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9209e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 3.9339e-06,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0283e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0234e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0234e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.3562e-04,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 5.3644e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.9802e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 1.1325e-06,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.4901e-06, 1.4901e-06, 8.3447e-07,  ..., 1.4901e-06, 1.4901e-06,
        1.4901e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 6.5565e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 5.3644e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 3.5763e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.2783e-06, 3.2783e-06, 1.0797e-01,  ..., 3.2783e-06, 3.2783e-06,
        3.2783e-06], dtype=torch.float16), tensor([2.6822e-06, 2.6822e-06, 1.1847e-01,  ..., 2.6822e-06, 2.6822e-06,
        2.6822e-06], dtype=torch.float16), tensor([2.6822e-06, 2.6822e-06, 1.1847e-01,  ..., 2.6822e-06, 2.6822e-06,
        2.6822e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 9.0137e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 7.7486e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 4.7684e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 2.3842e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 2.3842e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 2.3842e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 8.3447e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 5.9605e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.9802e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([1.7881e-06, 1.7881e-06, 5.6787e-01,  ..., 1.7881e-06, 1.7881e-06,
        1.7881e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.3667e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.8892e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.8014e-06,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([2.5034e-06, 2.5034e-06, 1.5271e-01,  ..., 2.5034e-06, 2.5034e-06,
        2.5034e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.8477e-06, 1.8477e-06, 1.8711e-03,  ..., 1.8477e-06, 1.8477e-06,
        1.8477e-06], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 3.5763e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 2.3842e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 1.7881e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 8.3447e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.4901e-06, 1.4901e-06, 5.9605e-07,  ..., 1.4901e-06, 1.4901e-06,
        1.4901e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 4.7684e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 4.7684e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.3842e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.3842e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.8610e-06, 2.8610e-06, 4.8535e-01,  ..., 2.8610e-06, 2.8610e-06,
        2.8610e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9453e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9453e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.5497e-06,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7285e-06,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 3.5763e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 2.9802e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([5.3644e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.3644e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 2.9802e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 1.7881e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 1.7881e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 7.7486e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 5.3644e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.1723e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.3842e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.1921e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 0.0000e+00,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.3842e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.9307e-01,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 8.9941e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.3975e-06,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-06, 2.9802e-06, 9.0515e-02,  ..., 2.9802e-06, 2.9802e-06,
        2.9802e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 3.5763e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.6093e-06, 1.6093e-06, 7.7486e-07,  ..., 1.6093e-06, 1.6093e-06,
        1.6093e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.2783e-06,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 3.5763e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 1.7881e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 1.7881e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.1921e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 6.5565e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 5.3644e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 4.1723e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 1.7881e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.6689e-06, 1.6689e-06, 6.5186e-01,  ..., 1.6689e-06, 1.6689e-06,
        1.6689e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 5.9424e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9746e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 7.1526e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.3113e-06, 1.3113e-06, 4.7684e-07,  ..., 1.3113e-06, 1.3113e-06,
        1.3113e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 2.9802e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.1921e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 6.5565e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 5.3644e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 4.1723e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 2.9802e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 1.7881e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.1921e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 0.0000e+00,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.3301e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.3842e-06, 2.3842e-06, 1.7676e-01,  ..., 2.3842e-06, 2.3842e-06,
        2.3842e-06], dtype=torch.float16), tensor([2.3842e-06, 2.3842e-06, 1.7676e-01,  ..., 2.3842e-06, 2.3842e-06,
        2.3842e-06], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 1.4305e-06,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 4.1723e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([4.3511e-06, 4.3511e-06, 6.3181e-05,  ..., 4.3511e-06, 4.3511e-06,
        4.3511e-06], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 5.9605e-08,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 7.1526e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.4305e-06, 1.4305e-06, 5.9605e-07,  ..., 1.4305e-06, 1.4305e-06,
        1.4305e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.7684e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 3.5763e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 1.7881e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.1921e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 0.0000e+00,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9404e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9648e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.8721e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 9.5367e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 5.9605e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 3.5763e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.9802e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.7881e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 2.9802e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 1.7881e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 1.7881e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.9605e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9453e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.9355e-01,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9746e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.9160e-01,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 8.3447e-07, 1.1921e-07,  ..., 7.7486e-07, 8.3447e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 5.9605e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0729e-06, 1.0729e-06, 5.3644e-07,  ..., 1.0729e-06, 1.0729e-06,
        1.0729e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 0.0000e+00,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 8.9795e-01,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 6.6519e-04,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9648e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.2517e-06, 1.2517e-06, 4.7684e-07,  ..., 1.2517e-06, 1.2517e-06,
        1.2517e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 1.1921e-07,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 1.7881e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.7881e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.9605e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([7.1526e-07, 7.1526e-07, 2.3842e-07,  ..., 7.1526e-07, 7.1526e-07,
        7.1526e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9404e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.9355e-01,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9697e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9258e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.7842e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 3.5763e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.1921e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 4.7684e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 4.7684e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 1.7881e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.8379e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.8916e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9697e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1921e-06, 1.1921e-06, 4.1723e-07,  ..., 1.1921e-06, 1.1921e-06,
        1.1921e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.9209e-01,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 1.1921e-07,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.3644e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 3.5763e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([6.5565e-07, 6.5565e-07, 2.3842e-07,  ..., 6.5565e-07, 6.5565e-07,
        6.5565e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 5.9605e-08,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9453e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9111e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9648e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.1325e-06, 1.1325e-06, 4.1723e-07,  ..., 1.1325e-06, 1.1325e-06,
        1.1325e-06], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 8.9160e-01,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([7.7486e-07, 7.7486e-07, 2.9802e-07,  ..., 7.7486e-07, 7.7486e-07,
        7.7486e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 1.1921e-07,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([8.9407e-07, 8.9407e-07, 1.7881e-07,  ..., 8.9407e-07, 8.9407e-07,
        8.9407e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 0.0000e+00,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([1.7881e-07, 1.7881e-07, 0.0000e+00,  ..., 1.7881e-07, 1.7881e-07,
        1.7881e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([4.7684e-07, 4.7684e-07, 1.1921e-07,  ..., 4.7684e-07, 4.7684e-07,
        4.7684e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 5.9605e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 2.9802e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.0133e-06, 1.0133e-06, 5.3644e-07,  ..., 1.0133e-06, 1.0133e-06,
        1.0133e-06], dtype=torch.float16), tensor([5.9605e-07, 5.9605e-07, 2.3842e-07,  ..., 5.9605e-07, 5.9605e-07,
        5.9605e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 5.9605e-08,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([5.3644e-07, 5.3644e-07, 1.7881e-07,  ..., 5.3644e-07, 5.3644e-07,
        5.3644e-07], dtype=torch.float16), tensor([4.1723e-07, 4.1723e-07, 1.1921e-07,  ..., 4.1723e-07, 4.1723e-07,
        4.1723e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.3842e-07, 2.3842e-07, 5.9605e-08,  ..., 2.3842e-07, 2.3842e-07,
        2.3842e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.7695e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.8770e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.9746e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([1.3709e-06, 1.3709e-06, 4.7684e-07,  ..., 1.3709e-06, 1.3709e-06,
        1.3709e-06], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 8.8330e-01,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 3.5763e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([3.5763e-07, 3.5763e-07, 1.1921e-07,  ..., 3.5763e-07, 3.5763e-07,
        3.5763e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([2.9802e-07, 2.9802e-07, 5.9605e-08,  ..., 2.9802e-07, 2.9802e-07,
        2.9802e-07], dtype=torch.float16), tensor([9.5367e-07, 9.5367e-07, 2.3842e-07,  ..., 9.5367e-07, 9.5367e-07,
        9.5367e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.1921e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16), tensor([8.3447e-07, 8.3447e-07, 1.7881e-07,  ..., 8.3447e-07, 8.3447e-07,
        8.3447e-07], dtype=torch.float16)]
1809
torch.Size([122672]

max prob logit=
[tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(4569), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(4569), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(4569), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(4569), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(2), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(2), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(4569), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(2), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(2), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(9971), tensor(30261), tensor(5442), tensor(2), tensor(60824), tensor(4300), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(53075), tensor(4389), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(53075), tensor(4389), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(4569), tensor(2), tensor(53075), tensor(4569), tensor(64513), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(53075), tensor(4389), tensor(64513), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(53075), tensor(4389), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(53075), tensor(4389), tensor(64513), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(51832), tensor(4569), tensor(4569), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(4569), tensor(4569), tensor(4569), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(4569), tensor(4569), tensor(4569), tensor(3991), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(4569), tensor(4569), tensor(4569), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(245), tensor(4569), tensor(4569), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(4569), tensor(4569), tensor(4569), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(17383), tensor(4569), tensor(68835), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(41742), tensor(6), tensor(130), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(60740), tensor(6), tensor(30845), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(4569), tensor(4569), tensor(4569), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(245), tensor(2), tensor(7784), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(245), tensor(4569), tensor(33697), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(959), tensor(2), tensor(4569), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(245), tensor(2), tensor(57495), tensor(3991), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(45778), tensor(2), tensor(8447), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(245), tensor(2), tensor(35289), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(245), tensor(2), tensor(36847), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(959), tensor(2), tensor(7455), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(13985), tensor(6), tensor(45889), tensor(2), tensor(12131), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(4725), tensor(2), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(4725), tensor(6), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(4), tensor(6), tensor(6), tensor(2), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(4725), tensor(2), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(165), tensor(2), tensor(2), tensor(2), tensor(6), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(5), tensor(5), tensor(3313), tensor(2), tensor(60824), tensor(3991), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(3313), tensor(644), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(4569), tensor(2), tensor(2), tensor(3313), tensor(2), tensor(60824), tensor(11446), tensor(3313), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(50449), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(5), tensor(2), tensor(2), tensor(1892), tensor(60824), tensor(60824), tensor(1007), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(40625), tensor(60824), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(2), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(6), tensor(2), tensor(60824), tensor(60824), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(2), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(2), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(41445), tensor(9971), tensor(9971), tensor(9971), tensor(30261), tensor(30261), tensor(30261), tensor(5442), tensor(5442), tensor(5442), tensor(2), tensor(2), tensor(2), tensor(60824), tensor(2), tensor(60824), tensor(4300), tensor(4300), tensor(4300), tensor(980), tensor(980), tensor(980)]

next celll output

[torch.return_types.topk(
values=tensor([0.8823, 0.0048, 0.0035, 0.0031, 0.0028, 0.0021, 0.0021, 0.0016, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([41445,    80,    30,  8911, 51174, 29498, 33622, 48446, 30261, 30502])), torch.return_types.topk(
values=tensor([0.8306, 0.0312, 0.0203, 0.0101, 0.0087, 0.0076, 0.0056, 0.0024, 0.0017,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 20077, 30502,    30,   409,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.5093, 0.1919, 0.0316, 0.0116, 0.0104, 0.0051, 0.0042, 0.0039, 0.0035,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 20077,  3991,  3617, 15588])), torch.return_types.topk(
values=tensor([0.6060, 0.0270, 0.0156, 0.0095, 0.0076, 0.0057, 0.0052, 0.0051, 0.0051,
        0.0049], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,  3617,   213, 54203,   336, 58401,  1390])), torch.return_types.topk(
values=tensor([0.6250, 0.0746, 0.0439, 0.0277, 0.0132, 0.0132, 0.0124, 0.0089, 0.0055,
        0.0045], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.2969, 0.2172, 0.0637, 0.0562, 0.0255, 0.0233, 0.0202, 0.0194, 0.0112,
        0.0105], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982,  2398, 45883,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.5723, 0.0255, 0.0235, 0.0147, 0.0088, 0.0082, 0.0079, 0.0065, 0.0049,
        0.0049], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091, 38982,  4725,  1111, 21058,   110])), torch.return_types.topk(
values=tensor([0.6226, 0.2020, 0.0210, 0.0135, 0.0099, 0.0072, 0.0047, 0.0047, 0.0032,
        0.0029], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,    30,  1013, 21058,  4569,  9919, 60824])), torch.return_types.topk(
values=tensor([0.4548, 0.1158, 0.0447, 0.0203, 0.0179, 0.0153, 0.0098, 0.0091, 0.0066,
        0.0056], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982, 13818,  3991,  1390,  4725])), torch.return_types.topk(
values=tensor([0.8970, 0.0046, 0.0034, 0.0029, 0.0023, 0.0020, 0.0015, 0.0014, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 29498, 51174, 48446, 33622,  1828,  2214])), torch.return_types.topk(
values=tensor([0.8525, 0.0303, 0.0188, 0.0067, 0.0058, 0.0050, 0.0048, 0.0015, 0.0012,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,    30,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5200, 0.2117, 0.0368, 0.0102, 0.0063, 0.0058, 0.0037, 0.0032, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059, 20077, 15588,  3617])), torch.return_types.topk(
values=tensor([0.6548, 0.0172, 0.0136, 0.0088, 0.0074, 0.0053, 0.0050, 0.0049, 0.0043,
        0.0040], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,  3617,    34,   213, 58401, 54203, 38982])), torch.return_types.topk(
values=tensor([0.6689, 0.0705, 0.0374, 0.0280, 0.0121, 0.0106, 0.0079, 0.0071, 0.0041,
        0.0037], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,   980,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.2959, 0.2268, 0.0681, 0.0423, 0.0237, 0.0213, 0.0204, 0.0191, 0.0109,
        0.0105], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,  2398,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.6675, 0.0186, 0.0149, 0.0105, 0.0085, 0.0074, 0.0059, 0.0056, 0.0037,
        0.0029], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 56796,  4725,  6091, 38982,   110,  1111,  7610])), torch.return_types.topk(
values=tensor([0.6978, 0.1709, 0.0184, 0.0093, 0.0090, 0.0055, 0.0035, 0.0031, 0.0024,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,    30,  1013,  4569, 21058,  9919, 60824])), torch.return_types.topk(
values=tensor([0.4934, 0.1075, 0.0477, 0.0207, 0.0146, 0.0138, 0.0081, 0.0068, 0.0066,
        0.0051], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  4725, 13818,  3991,    80])), torch.return_types.topk(
values=tensor([0.8867, 0.0048, 0.0034, 0.0032, 0.0022, 0.0022, 0.0017, 0.0015, 0.0015,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 51174, 29498, 48446, 30261,  1828, 33622])), torch.return_types.topk(
values=tensor([0.8428, 0.0277, 0.0204, 0.0070, 0.0065, 0.0062, 0.0061, 0.0017, 0.0014,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5283, 0.2069, 0.0343, 0.0109, 0.0062, 0.0051, 0.0038, 0.0029, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059,  3617,  1657, 20077])), torch.return_types.topk(
values=tensor([0.6533, 0.0180, 0.0157, 0.0073, 0.0073, 0.0058, 0.0055, 0.0054, 0.0043,
        0.0043], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  3617,    30,   213,    34, 58401,  2398, 38982])), torch.return_types.topk(
values=tensor([0.6504, 0.0741, 0.0409, 0.0246, 0.0122, 0.0115, 0.0098, 0.0088, 0.0049,
        0.0042], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,   980,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.2996, 0.2108, 0.0643, 0.0546, 0.0268, 0.0222, 0.0181, 0.0180, 0.0116,
        0.0105], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982,  2398, 45883,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.4785, 0.0390, 0.0334, 0.0166, 0.0114, 0.0096, 0.0091, 0.0088, 0.0079,
        0.0072], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982,  3617,    30,  6091, 41445, 47727, 56796])), torch.return_types.topk(
values=tensor([0.6777, 0.1727, 0.0206, 0.0112, 0.0101, 0.0065, 0.0040, 0.0032, 0.0031,
        0.0022], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,    30,  3991,  1013,  4569,  9919, 21058, 51174])), torch.return_types.topk(
values=tensor([0.4961, 0.1057, 0.0469, 0.0213, 0.0155, 0.0150, 0.0071, 0.0063, 0.0063,
        0.0054], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398, 38982,  4569,  3991, 13818,  4725,    80])), torch.return_types.topk(
values=tensor([0.8936, 0.0048, 0.0037, 0.0036, 0.0025, 0.0022, 0.0016, 0.0014, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([41445,    80,    30,  8911, 29498, 51174, 48446,  1828, 30261,  2214])), torch.return_types.topk(
values=tensor([0.8491, 0.0353, 0.0186, 0.0082, 0.0063, 0.0054, 0.0044, 0.0013, 0.0011,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,    30, 20077,   409,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.4878, 0.2472, 0.0370, 0.0130, 0.0062, 0.0060, 0.0043, 0.0029, 0.0028,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 34059,  3617, 20077,  1657])), torch.return_types.topk(
values=tensor([0.6870, 0.0164, 0.0117, 0.0094, 0.0071, 0.0051, 0.0045, 0.0042, 0.0041,
        0.0039], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,  3617, 58401,   213,    34, 38982, 54203])), torch.return_types.topk(
values=tensor([0.6250, 0.0936, 0.0393, 0.0281, 0.0140, 0.0116, 0.0099, 0.0092, 0.0048,
        0.0045], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,   980,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.2939, 0.2053, 0.0786, 0.0488, 0.0265, 0.0202, 0.0202, 0.0194, 0.0117,
        0.0114], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982,   649,  2398, 45883,  3175,   980])), torch.return_types.topk(
values=tensor([0.6543, 0.0186, 0.0169, 0.0137, 0.0082, 0.0066, 0.0060, 0.0060, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091,  4725,   110, 38982, 21058,  1111])), torch.return_types.topk(
values=tensor([0.6987, 0.1635, 0.0151, 0.0145, 0.0091, 0.0060, 0.0033, 0.0028, 0.0026,
        0.0021], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,    30,  3991,  1013, 21058,  4569,  9919, 60824])), torch.return_types.topk(
values=tensor([0.4612, 0.1166, 0.0555, 0.0192, 0.0158, 0.0124, 0.0079, 0.0074, 0.0073,
        0.0049], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398, 38982,  4569,  3991,  4725, 13818,    80])), torch.return_types.topk(
values=tensor([0.9097, 0.0035, 0.0024, 0.0023, 0.0020, 0.0020, 0.0017, 0.0015, 0.0013,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 29498, 51174, 33622, 48446, 30261,  1828])), torch.return_types.topk(
values=tensor([8.5547e-01, 2.2278e-02, 1.9043e-02, 1.2589e-02, 5.0888e-03, 4.7035e-03,
        4.4212e-03, 1.9464e-03, 1.7853e-03, 8.0824e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.5684, 0.1591, 0.0294, 0.0093, 0.0087, 0.0044, 0.0035, 0.0034, 0.0032,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445, 20077, 15588,  7610, 30261,  3617])), torch.return_types.topk(
values=tensor([0.6851, 0.0250, 0.0141, 0.0061, 0.0056, 0.0054, 0.0049, 0.0040, 0.0037,
        0.0032], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34,  3617,   213, 54203, 38982, 58401])), torch.return_types.topk(
values=tensor([0.6914, 0.0623, 0.0412, 0.0248, 0.0107, 0.0083, 0.0078, 0.0061, 0.0040,
        0.0033], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([9.0137e-01, 8.7321e-05, 3.6955e-05, 1.5855e-05, 6.4373e-06, 6.1989e-06,
        5.6028e-06, 4.4703e-06, 4.1127e-06, 3.4571e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,     5,    13,  9182,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.5103, 0.0403, 0.0358, 0.0176, 0.0125, 0.0112, 0.0091, 0.0078, 0.0074,
        0.0071], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  3617, 41445,  6091, 47727,  1111,  9919])), torch.return_types.topk(
values=tensor([0.6631, 0.2037, 0.0211, 0.0111, 0.0056, 0.0041, 0.0038, 0.0026, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 60824, 51174])), torch.return_types.topk(
values=tensor([0.3792, 0.1251, 0.0644, 0.0364, 0.0246, 0.0228, 0.0193, 0.0115, 0.0083,
        0.0058], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  1390,  3991, 27993])), torch.return_types.topk(
values=tensor([0.9048, 0.0042, 0.0038, 0.0028, 0.0021, 0.0017, 0.0015, 0.0015, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    30,    80,  8911, 29498, 51174, 30261, 33622, 48446,  1828])), torch.return_types.topk(
values=tensor([0.8506, 0.0194, 0.0188, 0.0095, 0.0088, 0.0069, 0.0061, 0.0021, 0.0015,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,    30, 20077,   409, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5635, 0.1873, 0.0328, 0.0139, 0.0056, 0.0042, 0.0033, 0.0030, 0.0028,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 20077, 30261, 34059,  3991])), torch.return_types.topk(
values=tensor([0.7471, 0.0156, 0.0122, 0.0069, 0.0055, 0.0041, 0.0037, 0.0036, 0.0031,
        0.0025], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34,  3617,   213, 54203, 58401, 38982])), torch.return_types.topk(
values=tensor([0.6919, 0.0654, 0.0321, 0.0233, 0.0099, 0.0094, 0.0084, 0.0076, 0.0049,
        0.0043], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([9.0332e-01, 8.0287e-05, 4.1783e-05, 1.3471e-05, 6.6161e-06, 6.3181e-06,
        6.0201e-06, 4.5300e-06, 3.9935e-06, 3.2783e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,     5,    13,  9182,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.5093, 0.0405, 0.0402, 0.0165, 0.0117, 0.0102, 0.0093, 0.0081, 0.0072,
        0.0068], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  3617,    30, 41445, 47727,  6091,  1111])), torch.return_types.topk(
values=tensor([0.6631, 0.1991, 0.0190, 0.0111, 0.0100, 0.0052, 0.0034, 0.0027, 0.0025,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,    30,  3991,  1013,  4569,  9919, 21058, 60824])), torch.return_types.topk(
values=tensor([0.5151, 0.1132, 0.0450, 0.0164, 0.0134, 0.0126, 0.0097, 0.0053, 0.0044,
        0.0040], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  3991,    80, 13818,  1390])), torch.return_types.topk(
values=tensor([0.8999, 0.0056, 0.0038, 0.0032, 0.0025, 0.0018, 0.0013, 0.0013, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    30,    80,  8911, 29498, 51174, 33622, 48446, 30261,  2214])), torch.return_types.topk(
values=tensor([0.8408, 0.0242, 0.0169, 0.0135, 0.0070, 0.0067, 0.0062, 0.0016, 0.0015,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588,    30, 20077,   409, 30502,  1111, 55513,     7])), torch.return_types.topk(
values=tensor([0.5742, 0.1836, 0.0324, 0.0160, 0.0046, 0.0046, 0.0030, 0.0027, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059, 20077,  3617,  1657])), torch.return_types.topk(
values=tensor([0.7178, 0.0145, 0.0127, 0.0100, 0.0053, 0.0048, 0.0042, 0.0041, 0.0041,
        0.0029], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34,  3617, 54203,   213, 58401, 38982])), torch.return_types.topk(
values=tensor([0.6123, 0.0889, 0.0376, 0.0263, 0.0134, 0.0129, 0.0118, 0.0105, 0.0060,
        0.0056], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.2432, 0.2130, 0.0834, 0.0645, 0.0356, 0.0189, 0.0186, 0.0176, 0.0117,
        0.0100], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982,   649, 45883,  2398,  3175,   980])), torch.return_types.topk(
values=tensor([0.5464, 0.0372, 0.0336, 0.0147, 0.0133, 0.0105, 0.0090, 0.0082, 0.0072,
        0.0070], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,    30, 38982,  3617,  6091, 47727, 41445, 56796])), torch.return_types.topk(
values=tensor([0.6519, 0.1989, 0.0223, 0.0179, 0.0087, 0.0051, 0.0037, 0.0031, 0.0029,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,    30,   980,  3991,  1013,  4569, 21058,  9919, 60824])), torch.return_types.topk(
values=tensor([0.4929, 0.1218, 0.0477, 0.0161, 0.0147, 0.0122, 0.0093, 0.0053, 0.0050,
        0.0039], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  3991,    80, 13818,  1390])), torch.return_types.topk(
values=tensor([0.9116, 0.0031, 0.0031, 0.0029, 0.0020, 0.0019, 0.0015, 0.0015, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    30,    80,  8911, 33622, 29498, 30261, 51174, 48446, 30502])), torch.return_types.topk(
values=tensor([8.5010e-01, 1.9531e-02, 1.8494e-02, 1.1215e-02, 8.1406e-03, 6.7482e-03,
        6.5918e-03, 1.9951e-03, 1.8091e-03, 8.2827e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,    30, 30502,   409,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5112, 0.2268, 0.0426, 0.0118, 0.0068, 0.0045, 0.0045, 0.0037, 0.0031,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445, 20077,  7610, 34059,  3991, 30261])), torch.return_types.topk(
values=tensor([0.7603, 0.0172, 0.0130, 0.0054, 0.0047, 0.0037, 0.0036, 0.0030, 0.0027,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34, 54203,   213, 58401,  3617, 38982])), torch.return_types.topk(
values=tensor([0.6294, 0.0872, 0.0304, 0.0264, 0.0146, 0.0113, 0.0099, 0.0094, 0.0063,
        0.0054], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   649,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([9.0430e-01, 9.1791e-05, 5.0485e-05, 1.4365e-05, 7.3910e-06, 7.0333e-06,
        6.6757e-06, 4.8876e-06, 4.2319e-06, 3.3379e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,     5,    13,  9182,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.4558, 0.0500, 0.0458, 0.0187, 0.0123, 0.0115, 0.0111, 0.0090, 0.0086,
        0.0083], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,    30,  3617, 41445, 47727,  1111,  9919])), torch.return_types.topk(
values=tensor([0.6660, 0.1908, 0.0201, 0.0122, 0.0083, 0.0053, 0.0032, 0.0030, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,    30,  1013,  9919,  4569, 21058, 51174])), torch.return_types.topk(
values=tensor([0.4912, 0.1054, 0.0453, 0.0188, 0.0172, 0.0123, 0.0117, 0.0069, 0.0052,
        0.0047], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991,    80,  1390, 13818])), torch.return_types.topk(
values=tensor([0.9131, 0.0034, 0.0029, 0.0019, 0.0018, 0.0018, 0.0015, 0.0014, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 33622,    30, 30261, 48446, 15588])), torch.return_types.topk(
values=tensor([8.6719e-01, 1.8860e-02, 1.8417e-02, 8.1100e-03, 5.9357e-03, 5.8899e-03,
        3.7727e-03, 1.9951e-03, 1.3771e-03, 7.8440e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,    30,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5186, 0.2196, 0.0339, 0.0070, 0.0066, 0.0065, 0.0035, 0.0031, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610,    30, 34059, 20077, 15588,  3991])), torch.return_types.topk(
values=tensor([0.6934, 0.0204, 0.0145, 0.0061, 0.0045, 0.0044, 0.0042, 0.0041, 0.0035,
        0.0032], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   213,  3617, 54203, 58401,    30, 38982])), torch.return_types.topk(
values=tensor([0.6250, 0.0908, 0.0321, 0.0273, 0.0128, 0.0126, 0.0115, 0.0097, 0.0063,
        0.0048], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   649,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([9.0381e-01, 8.3566e-05, 4.2975e-05, 1.3530e-05, 6.9737e-06, 6.6161e-06,
        6.1393e-06, 4.3511e-06, 3.5167e-06, 3.3379e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,     5,  9182,    13,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.4734, 0.0444, 0.0434, 0.0188, 0.0108, 0.0107, 0.0080, 0.0074, 0.0074,
        0.0068], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982,  3617, 41445, 47727,  6091,  1111,   110])), torch.return_types.topk(
values=tensor([0.6299, 0.2194, 0.0231, 0.0135, 0.0057, 0.0040, 0.0037, 0.0034, 0.0028,
        0.0025], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30,  9919, 21058, 51174])), torch.return_types.topk(
values=tensor([0.3469, 0.1180, 0.0683, 0.0380, 0.0244, 0.0231, 0.0180, 0.0107, 0.0101,
        0.0074], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  1390,  3991, 27993])), torch.return_types.topk(
values=tensor([0.8882, 0.0052, 0.0039, 0.0033, 0.0021, 0.0021, 0.0021, 0.0017, 0.0016,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 29498, 33622, 51174, 30261, 48446,   409])), torch.return_types.topk(
values=tensor([0.8506, 0.0203, 0.0146, 0.0098, 0.0092, 0.0064, 0.0045, 0.0019, 0.0016,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5576, 0.1882, 0.0343, 0.0096, 0.0061, 0.0047, 0.0037, 0.0032, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059, 30261,  1657, 20077])), torch.return_types.topk(
values=tensor([0.7256, 0.0169, 0.0128, 0.0052, 0.0050, 0.0045, 0.0043, 0.0041, 0.0039,
        0.0029], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,   213, 58401,  3617, 54203, 38982])), torch.return_types.topk(
values=tensor([0.6162, 0.0930, 0.0364, 0.0279, 0.0153, 0.0118, 0.0113, 0.0087, 0.0055,
        0.0045], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   649,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([9.0137e-01, 7.5877e-05, 4.8578e-05, 1.1683e-05, 6.9141e-06, 6.7949e-06,
        6.1989e-06, 4.4703e-06, 3.8743e-06, 3.4571e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,  9182,     5,    13,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.4219, 0.0452, 0.0411, 0.0253, 0.0133, 0.0124, 0.0098, 0.0094, 0.0086,
        0.0074], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982,  3617, 41445,    30, 47727,  9919,  1111])), torch.return_types.topk(
values=tensor([0.6533, 0.1842, 0.0234, 0.0118, 0.0088, 0.0073, 0.0041, 0.0038, 0.0027,
        0.0026], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,    30,  1013,  4569,  9919, 21058, 51174])), torch.return_types.topk(
values=tensor([0.3257, 0.1143, 0.0704, 0.0368, 0.0296, 0.0232, 0.0230, 0.0117, 0.0098,
        0.0087], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,    30,  2398,  4569,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.9014, 0.0037, 0.0033, 0.0020, 0.0015, 0.0015, 0.0015, 0.0014, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 33622, 48446,    30, 30261,  1828, 51174])), torch.return_types.topk(
values=tensor([0.9028, 0.0036, 0.0030, 0.0022, 0.0016, 0.0013, 0.0013, 0.0012, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 48446, 51174, 33622, 30261,    30,   409])), torch.return_types.topk(
values=tensor([0.9087, 0.0023, 0.0021, 0.0020, 0.0019, 0.0017, 0.0013, 0.0012, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80, 29498,    30,  8911, 30261, 48446,  1828,   409, 33622])), torch.return_types.topk(
values=tensor([9.3018e-01, 2.7599e-03, 1.8673e-03, 1.8167e-03, 1.1959e-03, 1.0357e-03,
        9.1743e-04, 8.3208e-04, 7.5436e-04, 7.5436e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 30261, 51174, 48446, 15588, 58599,  1828])), torch.return_types.topk(
values=tensor([9.2627e-01, 2.0504e-03, 1.8520e-03, 1.7605e-03, 1.1911e-03, 8.9550e-04,
        8.5783e-04, 7.9346e-04, 7.4530e-04, 6.9237e-04], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 51174, 30261, 48446, 58599, 15588,   336])), torch.return_types.topk(
values=tensor([9.3750e-01, 1.9875e-03, 1.8740e-03, 1.0767e-03, 9.6464e-04, 9.5367e-04,
        9.0981e-04, 7.5150e-04, 7.1144e-04, 7.1144e-04], dtype=torch.float16),
indices=tensor([41445, 29498,    80,  8911, 51174, 30261, 30502, 15588, 58599, 48446])), torch.return_types.topk(
values=tensor([0.8677, 0.0187, 0.0125, 0.0084, 0.0069, 0.0033, 0.0028, 0.0016, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8682, 0.0201, 0.0112, 0.0100, 0.0066, 0.0026, 0.0023, 0.0019, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 53208, 20077,    30, 30502,  1111, 15597, 55513])), torch.return_types.topk(
values=tensor([0.8740, 0.0154, 0.0128, 0.0098, 0.0054, 0.0052, 0.0037, 0.0015, 0.0015,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409,    30, 20077, 30502, 15597,  1111, 55513])), torch.return_types.topk(
values=tensor([8.4717e-01, 3.2867e-02, 2.8549e-02, 7.1068e-03, 5.2376e-03, 3.3817e-03,
        1.5068e-03, 8.3542e-04, 8.1587e-04, 7.7868e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111, 55513, 51174,  1186])), torch.return_types.topk(
values=tensor([8.5547e-01, 3.0930e-02, 2.3529e-02, 5.6763e-03, 5.2910e-03, 4.6310e-03,
        1.5945e-03, 9.9373e-04, 8.2397e-04, 7.9584e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 30502, 20077,  1111, 51174, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8540, 0.0314, 0.0264, 0.0121, 0.0051, 0.0033, 0.0012, 0.0010, 0.0009,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111, 51174, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5415, 0.2136, 0.0318, 0.0068, 0.0059, 0.0054, 0.0028, 0.0028, 0.0026,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 34059, 20077, 30261,  3617])), torch.return_types.topk(
values=tensor([0.5479, 0.2113, 0.0279, 0.0066, 0.0059, 0.0044, 0.0030, 0.0030, 0.0025,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610,    30, 41445,  1657, 34059, 30261,    34])), torch.return_types.topk(
values=tensor([0.5767, 0.1746, 0.0266, 0.0084, 0.0059, 0.0047, 0.0030, 0.0025, 0.0024,
        0.0023], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 30261, 20077,    34, 34059])), torch.return_types.topk(
values=tensor([0.5684, 0.1859, 0.0173, 0.0096, 0.0037, 0.0036, 0.0032, 0.0031, 0.0030,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 41445, 34059, 15588, 30261, 60824, 54203])), torch.return_types.topk(
values=tensor([0.5991, 0.1650, 0.0141, 0.0093, 0.0033, 0.0033, 0.0029, 0.0027, 0.0027,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 60824,  1657, 41445, 30261, 54203])), torch.return_types.topk(
values=tensor([0.6084, 0.1237, 0.0116, 0.0095, 0.0086, 0.0035, 0.0033, 0.0030, 0.0028,
        0.0022], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 30261, 41445, 34059, 54203,  1657])), torch.return_types.topk(
values=tensor([0.7651, 0.0125, 0.0124, 0.0059, 0.0038, 0.0036, 0.0029, 0.0028, 0.0026,
        0.0026], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,  3617, 54203,    30,   336, 58401,   213])), torch.return_types.topk(
values=tensor([0.7759, 0.0099, 0.0098, 0.0070, 0.0036, 0.0035, 0.0032, 0.0030, 0.0028,
        0.0026], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203, 58401,  3617,   336,   213,  2398])), torch.return_types.topk(
values=tensor([0.7881, 0.0148, 0.0102, 0.0071, 0.0037, 0.0035, 0.0030, 0.0024, 0.0022,
        0.0022], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,    30,  3617,   213, 58401,   336])), torch.return_types.topk(
values=tensor([0.8037, 0.0080, 0.0058, 0.0038, 0.0037, 0.0033, 0.0027, 0.0020, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336, 54203,  3617,   213,  2398,   449])), torch.return_types.topk(
values=tensor([0.8120, 0.0058, 0.0053, 0.0045, 0.0035, 0.0030, 0.0026, 0.0019, 0.0017,
        0.0017], dtype=torch.float16),
indices=tensor([30261,  9971,    34, 41445, 54203,   213,   336,   449,  2398,  3617])), torch.return_types.topk(
values=tensor([0.8228, 0.0081, 0.0065, 0.0047, 0.0028, 0.0021, 0.0021, 0.0020, 0.0019,
        0.0019], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203, 60824,   336,   449,  3617,  4036])), torch.return_types.topk(
values=tensor([0.7051, 0.0597, 0.0348, 0.0179, 0.0115, 0.0111, 0.0100, 0.0074, 0.0048,
        0.0034], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6885, 0.0767, 0.0307, 0.0198, 0.0109, 0.0105, 0.0099, 0.0077, 0.0063,
        0.0034], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7266, 0.0630, 0.0233, 0.0162, 0.0097, 0.0091, 0.0089, 0.0053, 0.0050,
        0.0036], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  3991,  1872, 47727])), torch.return_types.topk(
values=tensor([0.7100, 0.0737, 0.0367, 0.0249, 0.0076, 0.0073, 0.0042, 0.0041, 0.0025,
        0.0023], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6782, 0.0947, 0.0414, 0.0222, 0.0086, 0.0070, 0.0042, 0.0041, 0.0034,
        0.0026], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.7905, 0.0624, 0.0211, 0.0152, 0.0066, 0.0042, 0.0030, 0.0029, 0.0028,
        0.0018], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  3991,  1872,  3175])), torch.return_types.topk(
values=tensor([0.4585, 0.0391, 0.0107, 0.0074, 0.0069, 0.0062, 0.0047, 0.0046, 0.0042,
        0.0034], dtype=torch.float16),
indices=tensor([    2,  9182,   292,     6,     7,     4,    11,    40, 64031, 67554])), torch.return_types.topk(
values=tensor([8.6572e-01, 3.0807e-02, 6.6757e-04, 1.9050e-04, 1.2159e-04, 1.0276e-04,
        7.4029e-05, 6.5207e-05, 4.9531e-05, 4.2021e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13,   30,   40,    5, 9182,   22])), torch.return_types.topk(
values=tensor([9.0186e-01, 1.2517e-04, 5.5075e-05, 2.3246e-05, 1.0014e-05, 9.4175e-06,
        7.3314e-06, 5.2452e-06, 4.2915e-06, 4.1723e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.7852, 0.0931, 0.0125, 0.0094, 0.0048, 0.0024, 0.0023, 0.0018, 0.0013,
        0.0008], dtype=torch.float16),
indices=tensor([53075,   118, 41337,  1176, 32644, 28749, 64791,  8855,  4389,  2226])), torch.return_types.topk(
values=tensor([9.3848e-01, 2.6001e-02, 5.4512e-03, 1.2455e-03, 1.1559e-03, 9.3269e-04,
        8.3923e-04, 6.7949e-04, 4.8184e-04, 4.6539e-04], dtype=torch.float16),
indices=tensor([ 4389, 64791, 17798,  1052, 56681, 52569, 52157, 62224, 56830, 10594])), torch.return_types.topk(
values=tensor([9.0088e-01, 1.1653e-04, 4.8757e-05, 1.3053e-05, 8.9407e-06, 8.1062e-06,
        6.6161e-06, 4.7088e-06, 4.1723e-06, 3.6955e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.4988, 0.0582, 0.0309, 0.0141, 0.0108, 0.0107, 0.0081, 0.0064, 0.0063,
        0.0058], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  1111,   110, 47727,  9919])), torch.return_types.topk(
values=tensor([0.5435, 0.0509, 0.0324, 0.0103, 0.0093, 0.0084, 0.0074, 0.0069, 0.0059,
        0.0047], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 41445, 38982,  1111,   110, 47727,  9919])), torch.return_types.topk(
values=tensor([0.5903, 0.0492, 0.0208, 0.0098, 0.0092, 0.0078, 0.0071, 0.0070, 0.0048,
        0.0045], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 41445,  1111,   110, 38982, 47727,    30])), torch.return_types.topk(
values=tensor([0.8130, 0.0115, 0.0085, 0.0054, 0.0045, 0.0044, 0.0031, 0.0022, 0.0018,
        0.0018], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110, 56796,  6091, 38982,  3617,  1111,  9919])), torch.return_types.topk(
values=tensor([0.8438, 0.0092, 0.0077, 0.0056, 0.0036, 0.0035, 0.0021, 0.0015, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110,  6091, 56796, 38982,  3617,  1111,  9919])), torch.return_types.topk(
values=tensor([0.8691, 0.0064, 0.0057, 0.0037, 0.0029, 0.0029, 0.0018, 0.0018, 0.0017,
        0.0014], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 56796,   110,  6091,  4036,  1111, 38982, 41445])), torch.return_types.topk(
values=tensor([0.6519, 0.2252, 0.0232, 0.0087, 0.0046, 0.0040, 0.0030, 0.0028, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 21058])), torch.return_types.topk(
values=tensor([0.6333, 0.2404, 0.0238, 0.0095, 0.0054, 0.0040, 0.0027, 0.0021, 0.0018,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6157, 0.2487, 0.0239, 0.0094, 0.0061, 0.0047, 0.0042, 0.0023, 0.0023,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 60824, 51174])), torch.return_types.topk(
values=tensor([0.6064, 0.2754, 0.0219, 0.0100, 0.0025, 0.0023, 0.0020, 0.0015, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058,  9919,  4569, 51174])), torch.return_types.topk(
values=tensor([0.5938, 0.2849, 0.0216, 0.0106, 0.0030, 0.0025, 0.0021, 0.0015, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058, 51174,  4569,  9919])), torch.return_types.topk(
values=tensor([0.6313, 0.2454, 0.0162, 0.0119, 0.0074, 0.0036, 0.0019, 0.0015, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 56796, 21058, 51174])), torch.return_types.topk(
values=tensor([0.4602, 0.1318, 0.0567, 0.0244, 0.0212, 0.0207, 0.0102, 0.0085, 0.0074,
        0.0064], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,    30,  3991,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4268, 0.1582, 0.0569, 0.0246, 0.0224, 0.0177, 0.0097, 0.0080, 0.0076,
        0.0071], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,  3991,    30,  1390, 27993])), torch.return_types.topk(
values=tensor([0.4395, 0.1554, 0.0497, 0.0235, 0.0212, 0.0207, 0.0123, 0.0088, 0.0067,
        0.0067], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,    30,  3991, 47727,  1390])), torch.return_types.topk(
values=tensor([0.5483, 0.1365, 0.0475, 0.0167, 0.0128, 0.0089, 0.0073, 0.0032, 0.0029,
        0.0027], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,  9919])), torch.return_types.topk(
values=tensor([0.5161, 0.1598, 0.0469, 0.0177, 0.0119, 0.0099, 0.0062, 0.0033, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.4624, 0.1561, 0.0531, 0.0186, 0.0142, 0.0134, 0.0132, 0.0127, 0.0043,
        0.0038], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 60824, 38982,  2398,  3991,    80,   336])), torch.return_types.topk(
values=tensor([0.8950, 0.0040, 0.0037, 0.0023, 0.0021, 0.0017, 0.0015, 0.0014, 0.0014,
        0.0011], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498,    30, 48446, 33622, 30261, 51174,  1828])), torch.return_types.topk(
values=tensor([0.8965, 0.0039, 0.0034, 0.0023, 0.0018, 0.0016, 0.0016, 0.0013, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 48446,    30, 51174,   409, 33622, 30261])), torch.return_types.topk(
values=tensor([0.9053, 0.0028, 0.0026, 0.0023, 0.0019, 0.0016, 0.0014, 0.0014, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    30,    80, 29498,  8911, 30261, 48446,   409, 51174,  1828])), torch.return_types.topk(
values=tensor([9.2676e-01, 3.0193e-03, 2.0275e-03, 1.9493e-03, 1.2197e-03, 1.2150e-03,
        1.0471e-03, 1.0109e-03, 8.1587e-04, 7.7868e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 30261, 48446, 15588, 53208, 58599])), torch.return_types.topk(
values=tensor([9.2627e-01, 2.0733e-03, 2.0256e-03, 1.8234e-03, 1.3924e-03, 9.2030e-04,
        9.2030e-04, 8.2493e-04, 8.1539e-04, 6.7616e-04], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 51174, 30261, 48446, 58599, 15588,   336])), torch.return_types.topk(
values=tensor([9.3604e-01, 2.2221e-03, 2.1534e-03, 1.1759e-03, 1.1435e-03, 9.9373e-04,
        9.6703e-04, 8.2731e-04, 7.8297e-04, 7.6199e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 30502, 30261, 15588, 48446, 58599])), torch.return_types.topk(
values=tensor([0.8452, 0.0227, 0.0155, 0.0101, 0.0085, 0.0051, 0.0030, 0.0020, 0.0015,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8496, 0.0230, 0.0131, 0.0117, 0.0077, 0.0038, 0.0025, 0.0023, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 53208, 20077,    30, 30502,  1111, 15597, 55513])), torch.return_types.topk(
values=tensor([0.8608, 0.0161, 0.0153, 0.0107, 0.0081, 0.0057, 0.0040, 0.0018, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409,    30, 20077, 30502,  1111, 15597, 55513])), torch.return_types.topk(
values=tensor([0.8223, 0.0391, 0.0356, 0.0075, 0.0068, 0.0042, 0.0018, 0.0010, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([8.4229e-01, 3.4760e-02, 2.5833e-02, 6.4812e-03, 5.5008e-03, 5.4588e-03,
        1.8072e-03, 1.1759e-03, 9.5606e-04, 8.4019e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111, 51174, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8418, 0.0364, 0.0279, 0.0131, 0.0057, 0.0037, 0.0015, 0.0012, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111, 51174, 23904, 55513])), torch.return_types.topk(
values=tensor([0.5220, 0.2158, 0.0311, 0.0091, 0.0062, 0.0053, 0.0032, 0.0031, 0.0028,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 20077, 34059,  3617, 30261])), torch.return_types.topk(
values=tensor([0.5361, 0.2068, 0.0278, 0.0079, 0.0069, 0.0044, 0.0034, 0.0032, 0.0028,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445,  1657, 34059,    34, 30261])), torch.return_types.topk(
values=tensor([0.5571, 0.1713, 0.0261, 0.0120, 0.0062, 0.0049, 0.0030, 0.0027, 0.0026,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 30261, 20077,    34,     7])), torch.return_types.topk(
values=tensor([0.5366, 0.1927, 0.0179, 0.0105, 0.0041, 0.0040, 0.0036, 0.0034, 0.0033,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 41445, 15588, 30261, 60824, 20077])), torch.return_types.topk(
values=tensor([0.5874, 0.1617, 0.0144, 0.0096, 0.0036, 0.0035, 0.0032, 0.0030, 0.0030,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 60824,  1657, 41445, 30261, 54203])), torch.return_types.topk(
values=tensor([0.5767, 0.1237, 0.0120, 0.0108, 0.0104, 0.0038, 0.0037, 0.0033, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 60824,  7610, 30261, 41445, 34059, 54203, 23904])), torch.return_types.topk(
values=tensor([0.7520, 0.0125, 0.0122, 0.0061, 0.0047, 0.0040, 0.0039, 0.0030, 0.0028,
        0.0026], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,  3617,    30, 54203,   336,   213, 58401])), torch.return_types.topk(
values=tensor([0.7622, 0.0103, 0.0102, 0.0069, 0.0040, 0.0039, 0.0035, 0.0032, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617, 58401,   336,    30,   213])), torch.return_types.topk(
values=tensor([0.7632, 0.0158, 0.0109, 0.0072, 0.0053, 0.0041, 0.0040, 0.0027, 0.0025,
        0.0024], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,    30, 54203,  3617,   213,   336, 58401])), torch.return_types.topk(
values=tensor([0.7930, 0.0082, 0.0056, 0.0038, 0.0038, 0.0035, 0.0035, 0.0023, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336, 54203,  3617,   449,   213,  2398])), torch.return_types.topk(
values=tensor([0.8057, 0.0057, 0.0049, 0.0048, 0.0037, 0.0031, 0.0025, 0.0022, 0.0021,
        0.0017], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   213,   336,   449,  3617,  2398])), torch.return_types.topk(
values=tensor([0.8032, 0.0080, 0.0074, 0.0046, 0.0031, 0.0030, 0.0029, 0.0024, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,  4036, 54203, 60824,  3617,   449,   336])), torch.return_types.topk(
values=tensor([0.6802, 0.0580, 0.0366, 0.0197, 0.0134, 0.0118, 0.0114, 0.0086, 0.0059,
        0.0037], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6680, 0.0732, 0.0327, 0.0213, 0.0123, 0.0117, 0.0110, 0.0085, 0.0075,
        0.0037], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,   980,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6958, 0.0662, 0.0257, 0.0178, 0.0116, 0.0106, 0.0093, 0.0063, 0.0055,
        0.0042], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,   980,  1390,  3991,  1872,  3175])), torch.return_types.topk(
values=tensor([0.6929, 0.0707, 0.0394, 0.0273, 0.0085, 0.0081, 0.0048, 0.0047, 0.0032,
        0.0029], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6631, 0.0891, 0.0451, 0.0247, 0.0101, 0.0076, 0.0048, 0.0044, 0.0042,
        0.0030], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.7778, 0.0586, 0.0221, 0.0173, 0.0079, 0.0048, 0.0036, 0.0033, 0.0030,
        0.0022], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  3991,  1390,  1872,  3175])), torch.return_types.topk(
values=tensor([0.2759, 0.0379, 0.0175, 0.0117, 0.0084, 0.0070, 0.0054, 0.0049, 0.0042,
        0.0041], dtype=torch.float16),
indices=tensor([   2,    6,   13,    4,  130, 1109,  323,  583, 2584,  299])), torch.return_types.topk(
values=tensor([8.5693e-01, 3.7659e-02, 9.2077e-04, 2.2829e-04, 1.4341e-04, 1.1122e-04,
        9.0122e-05, 7.4685e-05, 5.2273e-05, 4.5121e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13,   30,   40,    5, 9182,   22])), torch.return_types.topk(
values=tensor([8.9990e-01, 1.5724e-04, 5.5432e-05, 3.1829e-05, 1.0490e-05, 9.7156e-06,
        7.9274e-06, 5.4836e-06, 4.7684e-06, 4.5300e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   22,   30])), torch.return_types.topk(
values=tensor([0.5742, 0.1440, 0.0591, 0.0192, 0.0183, 0.0057, 0.0056, 0.0052, 0.0040,
        0.0018], dtype=torch.float16),
indices=tensor([53075,   118, 41337,  1176, 28749, 64791, 32644,  8855,   205,    25])), torch.return_types.topk(
values=tensor([8.9551e-01, 4.6387e-02, 1.2978e-02, 2.3823e-03, 2.2202e-03, 1.8845e-03,
        1.1339e-03, 9.5129e-04, 7.0953e-04, 5.6362e-04], dtype=torch.float16),
indices=tensor([ 4389, 64791, 17798, 56681, 52157,  1052, 52569,   449, 62224, 56830])), torch.return_types.topk(
values=tensor([8.9990e-01, 1.4949e-04, 5.1081e-05, 1.6689e-05, 9.4175e-06, 8.5235e-06,
        7.0333e-06, 4.9472e-06, 4.3511e-06, 4.1127e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.4771, 0.0535, 0.0351, 0.0158, 0.0112, 0.0106, 0.0084, 0.0074, 0.0066,
        0.0063], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  1111,  9919, 47727,    30])), torch.return_types.topk(
values=tensor([0.5098, 0.0493, 0.0375, 0.0120, 0.0096, 0.0091, 0.0079, 0.0065, 0.0064,
        0.0062], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 41445, 38982,  1111, 47727,   110,  9919])), torch.return_types.topk(
values=tensor([0.5713, 0.0455, 0.0240, 0.0109, 0.0095, 0.0083, 0.0074, 0.0061, 0.0061,
        0.0053], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 41445,  1111, 38982,    30,   110, 47727])), torch.return_types.topk(
values=tensor([0.7939, 0.0112, 0.0102, 0.0051, 0.0050, 0.0050, 0.0034, 0.0025, 0.0025,
        0.0022], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  6091,   110, 56796, 38982,  3617,  9919,  1111])), torch.return_types.topk(
values=tensor([0.8252, 0.0093, 0.0092, 0.0053, 0.0043, 0.0040, 0.0024, 0.0018, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,   110,  6091, 56796, 38982,  9919,  3617,  1111])), torch.return_types.topk(
values=tensor([0.8623, 0.0068, 0.0057, 0.0042, 0.0033, 0.0026, 0.0026, 0.0020, 0.0018,
        0.0015], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091,   110,  4036,  1111, 38982,  4247])), torch.return_types.topk(
values=tensor([0.6509, 0.2216, 0.0233, 0.0096, 0.0049, 0.0044, 0.0042, 0.0031, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 51174, 21058])), torch.return_types.topk(
values=tensor([0.6313, 0.2360, 0.0245, 0.0107, 0.0059, 0.0042, 0.0033, 0.0029, 0.0017,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30,  9919, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6162, 0.2432, 0.0232, 0.0098, 0.0067, 0.0065, 0.0044, 0.0025, 0.0025,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569, 60824,  9919, 47727])), torch.return_types.topk(
values=tensor([0.6001, 0.2725, 0.0236, 0.0116, 0.0028, 0.0024, 0.0020, 0.0018, 0.0017,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058,  4569,  9919, 51174])), torch.return_types.topk(
values=tensor([0.5884, 0.2803, 0.0234, 0.0123, 0.0034, 0.0027, 0.0021, 0.0017, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058, 51174,  9919,  4569])), torch.return_types.topk(
values=tensor([0.6270, 0.2289, 0.0181, 0.0146, 0.0104, 0.0043, 0.0023, 0.0021, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 56796, 51174,  9919])), torch.return_types.topk(
values=tensor([0.4500, 0.1320, 0.0595, 0.0250, 0.0201, 0.0186, 0.0161, 0.0089, 0.0072,
        0.0068], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,    30,  3991,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4182, 0.1539, 0.0589, 0.0251, 0.0199, 0.0181, 0.0121, 0.0104, 0.0074,
        0.0065], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,    30,  3991,  1390, 27993])), torch.return_types.topk(
values=tensor([0.4197, 0.1532, 0.0525, 0.0248, 0.0217, 0.0207, 0.0163, 0.0092, 0.0069,
        0.0062], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,    30,  3991, 47727,  1390])), torch.return_types.topk(
values=tensor([0.5386, 0.1362, 0.0482, 0.0155, 0.0138, 0.0099, 0.0072, 0.0036, 0.0031,
        0.0027], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,  9919,    80])), torch.return_types.topk(
values=tensor([0.5044, 0.1600, 0.0488, 0.0165, 0.0124, 0.0109, 0.0063, 0.0036, 0.0030,
        0.0029], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.5171, 0.1414, 0.0516, 0.0141, 0.0130, 0.0101, 0.0077, 0.0045, 0.0033,
        0.0027], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982, 60824,  1390,   336])), torch.return_types.topk(
values=tensor([0.8740, 0.0044, 0.0043, 0.0024, 0.0024, 0.0023, 0.0023, 0.0022, 0.0017,
        0.0013], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 48446, 33622,    30, 30261, 51174,   409])), torch.return_types.topk(
values=tensor([0.8857, 0.0040, 0.0036, 0.0024, 0.0022, 0.0018, 0.0017, 0.0017, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 48446, 51174, 30261, 33622,    30,   409])), torch.return_types.topk(
values=tensor([0.8984, 0.0027, 0.0022, 0.0022, 0.0020, 0.0018, 0.0016, 0.0013, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80,    30, 29498, 30261,  8911, 48446,   409, 51174, 33622])), torch.return_types.topk(
values=tensor([9.1064e-01, 3.8700e-03, 2.2488e-03, 2.2144e-03, 1.9531e-03, 1.5697e-03,
        1.5097e-03, 1.2083e-03, 1.0014e-03, 8.6355e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 30261, 51174, 48446, 15588, 33622, 58599])), torch.return_types.topk(
values=tensor([9.1699e-01, 2.2469e-03, 2.2297e-03, 2.0218e-03, 1.5993e-03, 1.2655e-03,
        1.1835e-03, 9.8515e-04, 8.2302e-04, 8.0109e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 30261, 48446, 15588, 58599,   336])), torch.return_types.topk(
values=tensor([9.2920e-01, 2.7676e-03, 1.9855e-03, 1.7319e-03, 1.2379e-03, 1.1530e-03,
        1.0672e-03, 9.4891e-04, 8.3733e-04, 8.0538e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30261, 29498, 51174, 30502, 15588, 48446,   409,   336])), torch.return_types.topk(
values=tensor([0.8306, 0.0265, 0.0133, 0.0125, 0.0118, 0.0042, 0.0029, 0.0023, 0.0018,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8408, 0.0262, 0.0150, 0.0105, 0.0103, 0.0031, 0.0025, 0.0024, 0.0017,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 53208, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8613, 0.0179, 0.0129, 0.0109, 0.0076, 0.0059, 0.0034, 0.0019, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8105, 0.0426, 0.0324, 0.0095, 0.0071, 0.0062, 0.0021, 0.0013, 0.0013,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1111, 55513,  1186, 51174])), torch.return_types.topk(
values=tensor([0.8276, 0.0412, 0.0237, 0.0082, 0.0077, 0.0056, 0.0021, 0.0012, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111, 51174, 55513,  1186])), torch.return_types.topk(
values=tensor([0.8442, 0.0327, 0.0276, 0.0099, 0.0070, 0.0054, 0.0016, 0.0012, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502,   409, 20077,  1111, 55513,  1186, 51174])), torch.return_types.topk(
values=tensor([0.5283, 0.2135, 0.0325, 0.0075, 0.0059, 0.0055, 0.0032, 0.0030, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059, 20077, 30261,  3617])), torch.return_types.topk(
values=tensor([0.5513, 0.1981, 0.0277, 0.0064, 0.0064, 0.0048, 0.0036, 0.0033, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610,    30, 41445,  1657, 34059, 40315,    34])), torch.return_types.topk(
values=tensor([0.5684, 0.1720, 0.0264, 0.0083, 0.0053, 0.0050, 0.0030, 0.0029, 0.0026,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 30261,    34, 54203, 34059])), torch.return_types.topk(
values=tensor([0.5454, 0.1914, 0.0182, 0.0089, 0.0039, 0.0039, 0.0037, 0.0036, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 41445, 34059, 15588, 30261, 54203, 60824])), torch.return_types.topk(
values=tensor([0.5957, 0.1578, 0.0145, 0.0088, 0.0036, 0.0033, 0.0032, 0.0031, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 60824,  1657, 30261, 41445, 54203])), torch.return_types.topk(
values=tensor([0.5977, 0.1243, 0.0122, 0.0086, 0.0086, 0.0039, 0.0035, 0.0031, 0.0030,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 60824,  7610, 30261, 41445, 54203, 34059, 15588])), torch.return_types.topk(
values=tensor([0.7314, 0.0145, 0.0132, 0.0060, 0.0045, 0.0044, 0.0037, 0.0036, 0.0032,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617,    30,   213,   336, 58401])), torch.return_types.topk(
values=tensor([0.7480, 0.0120, 0.0109, 0.0069, 0.0043, 0.0037, 0.0036, 0.0035, 0.0033,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   213,  3617, 58401,   336,  2398])), torch.return_types.topk(
values=tensor([0.7725, 0.0141, 0.0110, 0.0080, 0.0042, 0.0040, 0.0036, 0.0031, 0.0022,
        0.0022], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,    30, 54203,  3617,   213, 58401,   336])), torch.return_types.topk(
values=tensor([0.7925, 0.0085, 0.0059, 0.0040, 0.0038, 0.0036, 0.0030, 0.0025, 0.0023,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336, 54203,    34,  3617,   213,  2398,   449])), torch.return_types.topk(
values=tensor([0.8145, 0.0061, 0.0053, 0.0046, 0.0038, 0.0032, 0.0025, 0.0019, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   213,   336,  2398,   449,  3617])), torch.return_types.topk(
values=tensor([0.8281, 0.0071, 0.0065, 0.0048, 0.0028, 0.0022, 0.0021, 0.0020, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   213,  3617,  4036, 60824,   336])), torch.return_types.topk(
values=tensor([0.6709, 0.0610, 0.0416, 0.0195, 0.0147, 0.0116, 0.0115, 0.0082, 0.0061,
        0.0038], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6558, 0.0789, 0.0353, 0.0212, 0.0119, 0.0116, 0.0114, 0.0086, 0.0080,
        0.0039], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7056, 0.0636, 0.0253, 0.0181, 0.0106, 0.0101, 0.0092, 0.0063, 0.0050,
        0.0038], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  3991,  1872, 47727])), torch.return_types.topk(
values=tensor([0.6841, 0.0727, 0.0389, 0.0289, 0.0092, 0.0070, 0.0057, 0.0043, 0.0034,
        0.0029], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6562, 0.0923, 0.0436, 0.0253, 0.0103, 0.0069, 0.0051, 0.0046, 0.0042,
        0.0030], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  3991,  1872,  3175])), torch.return_types.topk(
values=tensor([0.7446, 0.0651, 0.0238, 0.0163, 0.0071, 0.0065, 0.0044, 0.0036, 0.0028,
        0.0024], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  3991,  1390,  3175, 57667])), torch.return_types.topk(
values=tensor([0.3345, 0.0206, 0.0187, 0.0152, 0.0142, 0.0136, 0.0087, 0.0072, 0.0064,
        0.0055], dtype=torch.float16),
indices=tensor([   2, 9182,    4,    6,    7,  292,   40,   30,  590,  201])), torch.return_types.topk(
values=tensor([0.2234, 0.2217, 0.0790, 0.0737, 0.0275, 0.0201, 0.0201, 0.0188, 0.0124,
        0.0108], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982,   649,  2398, 45883,   980, 57667])), torch.return_types.topk(
values=tensor([9.0039e-01, 1.5187e-04, 5.5015e-05, 2.9445e-05, 9.6560e-06, 9.1791e-06,
        7.8678e-06, 5.4240e-06, 4.6492e-06, 4.5896e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   30,   22])), torch.return_types.topk(
values=tensor([0.6426, 0.1265, 0.0389, 0.0182, 0.0119, 0.0080, 0.0038, 0.0032, 0.0026,
        0.0021], dtype=torch.float16),
indices=tensor([53075,   118, 41337,  1176, 28749, 32644, 64791,  8855,  2226,   205])), torch.return_types.topk(
values=tensor([0.2397, 0.1942, 0.1160, 0.0382, 0.0317, 0.0284, 0.0245, 0.0183, 0.0120,
        0.0115], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 45883,  2398, 38982,   649,  3175,   980])), torch.return_types.topk(
values=tensor([0.7661, 0.0922, 0.0154, 0.0085, 0.0083, 0.0048, 0.0045, 0.0035, 0.0025,
        0.0016], dtype=torch.float16),
indices=tensor([64513,    25, 17798,  5977,   205, 52569,   449,   834,  6542, 16369])), torch.return_types.topk(
values=tensor([0.4297, 0.0609, 0.0416, 0.0149, 0.0138, 0.0114, 0.0090, 0.0090, 0.0069,
        0.0059], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  1111,  9919, 47727, 41565])), torch.return_types.topk(
values=tensor([0.4973, 0.0536, 0.0415, 0.0106, 0.0104, 0.0097, 0.0079, 0.0067, 0.0063,
        0.0061], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  1111,  9919, 47727,   110])), torch.return_types.topk(
values=tensor([0.5684, 0.0500, 0.0270, 0.0105, 0.0098, 0.0083, 0.0082, 0.0063, 0.0049,
        0.0045], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 41445, 38982,  1111,   110, 47727,  9919])), torch.return_types.topk(
values=tensor([0.7812, 0.0133, 0.0124, 0.0047, 0.0047, 0.0046, 0.0040, 0.0027, 0.0026,
        0.0022], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110,  6091, 56796, 38982,  9919,  3617,  1111])), torch.return_types.topk(
values=tensor([0.8208, 0.0109, 0.0105, 0.0050, 0.0037, 0.0037, 0.0027, 0.0018, 0.0017,
        0.0017], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,   110,  6091, 56796, 38982,  9919,  1111,  3617])), torch.return_types.topk(
values=tensor([0.8589, 0.0079, 0.0067, 0.0030, 0.0030, 0.0026, 0.0021, 0.0021, 0.0021,
        0.0016], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091,   110,  1111, 38982,  4036,  3617])), torch.return_types.topk(
values=tensor([0.6479, 0.2103, 0.0253, 0.0113, 0.0056, 0.0049, 0.0039, 0.0033, 0.0021,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6426, 0.2203, 0.0249, 0.0117, 0.0062, 0.0043, 0.0032, 0.0024, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6196, 0.2352, 0.0262, 0.0113, 0.0067, 0.0043, 0.0038, 0.0027, 0.0025,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30,  9919, 60824, 51174])), torch.return_types.topk(
values=tensor([0.6011, 0.2708, 0.0244, 0.0120, 0.0031, 0.0024, 0.0019, 0.0019, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  9919, 51174,  4569, 21058])), torch.return_types.topk(
values=tensor([0.6011, 0.2708, 0.0229, 0.0126, 0.0036, 0.0026, 0.0020, 0.0018, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 51174, 21058,  9919,  4569])), torch.return_types.topk(
values=tensor([0.6436, 0.2241, 0.0182, 0.0143, 0.0081, 0.0044, 0.0019, 0.0016, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 51174,  9919, 56796])), torch.return_types.topk(
values=tensor([0.3994, 0.1218, 0.0580, 0.0287, 0.0280, 0.0272, 0.0132, 0.0125, 0.0102,
        0.0092], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398, 38982,  4569,    30,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.3877, 0.1437, 0.0576, 0.0301, 0.0256, 0.0235, 0.0111, 0.0110, 0.0096,
        0.0096], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  3991,  1390,    30, 27993])), torch.return_types.topk(
values=tensor([0.4199, 0.1373, 0.0486, 0.0271, 0.0264, 0.0230, 0.0121, 0.0100, 0.0089,
        0.0074], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398, 38982,  4569,    30,  3991,  1390, 27993])), torch.return_types.topk(
values=tensor([0.5146, 0.1373, 0.0479, 0.0233, 0.0136, 0.0105, 0.0097, 0.0055, 0.0037,
        0.0034], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,  9919,    80])), torch.return_types.topk(
values=tensor([0.4905, 0.1580, 0.0490, 0.0240, 0.0121, 0.0115, 0.0081, 0.0049, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.4556, 0.1378, 0.0527, 0.0182, 0.0174, 0.0166, 0.0152, 0.0149, 0.0051,
        0.0045], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,  3991, 60824,    80,   336])), torch.return_types.topk(
values=tensor([0.8828, 0.0043, 0.0041, 0.0025, 0.0023, 0.0022, 0.0020, 0.0020, 0.0015,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 29498, 33622, 48446, 30261, 51174,  1828])), torch.return_types.topk(
values=tensor([0.8926, 0.0037, 0.0036, 0.0023, 0.0020, 0.0017, 0.0016, 0.0016, 0.0015,
        0.0013], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 48446, 51174,    30, 33622, 30261,   409])), torch.return_types.topk(
values=tensor([0.9038, 0.0027, 0.0024, 0.0022, 0.0019, 0.0018, 0.0015, 0.0013, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80,    30, 29498, 30261,  8911, 48446,   409, 51174, 33622])), torch.return_types.topk(
values=tensor([9.1895e-01, 3.5820e-03, 2.0103e-03, 1.9951e-03, 1.6470e-03, 1.3285e-03,
        1.2188e-03, 1.0595e-03, 9.5701e-04, 8.0585e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 30261, 51174, 48446, 15588, 33622, 58599])), torch.return_types.topk(
values=tensor([9.2334e-01, 2.1572e-03, 2.0504e-03, 1.8244e-03, 1.3933e-03, 1.0681e-03,
        1.0118e-03, 8.2874e-04, 8.1587e-04, 7.6628e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 30261, 48446, 15588, 58599,   336])), torch.return_types.topk(
values=tensor([9.3604e-01, 2.4700e-03, 1.6651e-03, 1.6651e-03, 1.2913e-03, 1.0538e-03,
        9.3746e-04, 7.9870e-04, 7.6818e-04, 7.6532e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30261, 29498, 30502, 51174, 15588, 48446,   336, 53208])), torch.return_types.topk(
values=tensor([0.8330, 0.0254, 0.0140, 0.0122, 0.0114, 0.0050, 0.0031, 0.0021, 0.0019,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8418, 0.0258, 0.0144, 0.0105, 0.0104, 0.0036, 0.0025, 0.0023, 0.0017,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 53208, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8589, 0.0178, 0.0136, 0.0113, 0.0072, 0.0069, 0.0037, 0.0017, 0.0017,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8159, 0.0391, 0.0337, 0.0098, 0.0071, 0.0050, 0.0019, 0.0013, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1111, 55513,  1186, 51174])), torch.return_types.topk(
values=tensor([0.8335, 0.0390, 0.0233, 0.0077, 0.0073, 0.0053, 0.0020, 0.0012, 0.0011,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,  1111, 55513, 51174,  1186])), torch.return_types.topk(
values=tensor([0.8433, 0.0307, 0.0305, 0.0112, 0.0062, 0.0048, 0.0014, 0.0012, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502,   409, 20077,  1111, 55513,  1186, 51174])), torch.return_types.topk(
values=tensor([0.5156, 0.2184, 0.0343, 0.0087, 0.0062, 0.0061, 0.0034, 0.0031, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 20077, 34059, 30261,  3617])), torch.return_types.topk(
values=tensor([0.5405, 0.2036, 0.0296, 0.0069, 0.0069, 0.0049, 0.0035, 0.0032, 0.0031,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610,    30, 41445,  1657, 34059,    34, 40315])), torch.return_types.topk(
values=tensor([0.5693, 0.1683, 0.0279, 0.0096, 0.0059, 0.0051, 0.0032, 0.0029, 0.0027,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 30261,    34, 20077, 54203])), torch.return_types.topk(
values=tensor([0.5400, 0.1910, 0.0189, 0.0099, 0.0042, 0.0039, 0.0038, 0.0036, 0.0030,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 41445, 15588, 34059, 30261, 54203, 20077])), torch.return_types.topk(
values=tensor([0.5918, 0.1581, 0.0152, 0.0092, 0.0035, 0.0032, 0.0032, 0.0032, 0.0031,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 60824,  1657, 41445, 30261, 54203])), torch.return_types.topk(
values=tensor([0.6064, 0.1148, 0.0123, 0.0094, 0.0090, 0.0038, 0.0036, 0.0030, 0.0029,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 30261, 41445, 54203, 34059, 15588])), torch.return_types.topk(
values=tensor([0.7285, 0.0148, 0.0140, 0.0064, 0.0046, 0.0043, 0.0042, 0.0032, 0.0031,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617,    30, 54203,   213,   336,  2398])), torch.return_types.topk(
values=tensor([0.7490, 0.0121, 0.0112, 0.0074, 0.0041, 0.0036, 0.0034, 0.0033, 0.0032,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617,   213, 58401,   336,  2398])), torch.return_types.topk(
values=tensor([0.7588, 0.0159, 0.0120, 0.0080, 0.0047, 0.0042, 0.0040, 0.0030, 0.0023,
        0.0023], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,    30, 54203,  3617,   213, 58401,   336])), torch.return_types.topk(
values=tensor([0.7827, 0.0092, 0.0064, 0.0039, 0.0039, 0.0038, 0.0032, 0.0025, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,    34, 54203,  3617,  2398,   213,   449])), torch.return_types.topk(
values=tensor([0.8130, 0.0061, 0.0053, 0.0049, 0.0036, 0.0030, 0.0024, 0.0019, 0.0019,
        0.0018], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   213,   336,  2398,   449,  3617])), torch.return_types.topk(
values=tensor([0.8110, 0.0084, 0.0074, 0.0049, 0.0029, 0.0025, 0.0023, 0.0023, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203, 60824,  4036,  3617,   213,   449])), torch.return_types.topk(
values=tensor([0.6777, 0.0616, 0.0359, 0.0183, 0.0130, 0.0124, 0.0115, 0.0083, 0.0062,
        0.0037], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6631, 0.0786, 0.0312, 0.0202, 0.0122, 0.0112, 0.0111, 0.0086, 0.0080,
        0.0037], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7061, 0.0667, 0.0229, 0.0163, 0.0106, 0.0096, 0.0095, 0.0063, 0.0052,
        0.0040], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,   980,  1390,  3991,  1872,  3175])), torch.return_types.topk(
values=tensor([0.6938, 0.0760, 0.0359, 0.0257, 0.0084, 0.0076, 0.0046, 0.0045, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6646, 0.0973, 0.0406, 0.0224, 0.0093, 0.0072, 0.0045, 0.0043, 0.0042,
        0.0031], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  3991,  1872,  3175])), torch.return_types.topk(
values=tensor([0.7432, 0.0735, 0.0214, 0.0145, 0.0078, 0.0064, 0.0042, 0.0031, 0.0029,
        0.0024], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  3991,  3175,  1390, 57667])), torch.return_types.topk(
values=tensor([0.2391, 0.0393, 0.0212, 0.0111, 0.0074, 0.0061, 0.0051, 0.0048, 0.0044,
        0.0042], dtype=torch.float16),
indices=tensor([   2,    6,   13,    4,  130,  583,  299, 1109,  323,  796])), torch.return_types.topk(
values=tensor([8.6084e-01, 3.2593e-02, 9.1076e-04, 2.2840e-04, 1.5104e-04, 1.1945e-04,
        8.9109e-05, 6.8188e-05, 5.6326e-05, 4.7147e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13,   30,   40,    5, 9182,   22])), torch.return_types.topk(
values=tensor([9.0039e-01, 1.7142e-04, 6.0201e-05, 2.9147e-05, 1.0133e-05, 9.9540e-06,
        8.2254e-06, 5.6624e-06, 5.0664e-06, 4.7684e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   22,   70])), torch.return_types.topk(
values=tensor([0.7065, 0.0972, 0.0268, 0.0114, 0.0104, 0.0054, 0.0044, 0.0028, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([53075,   118, 41337,  1176, 28749, 32644, 64791,  8855,    25,  2226])), torch.return_types.topk(
values=tensor([9.2334e-01, 3.2349e-02, 1.3481e-02, 1.5249e-03, 1.4896e-03, 9.6941e-04,
        6.6328e-04, 5.6982e-04, 5.3740e-04, 3.4833e-04], dtype=torch.float16),
indices=tensor([ 4389, 64791, 17798,  1052, 56681, 52569, 52157, 56830, 62224,   449])), torch.return_types.topk(
values=tensor([0.7334, 0.0947, 0.0155, 0.0136, 0.0109, 0.0069, 0.0055, 0.0034, 0.0033,
        0.0022], dtype=torch.float16),
indices=tensor([64513,    25, 17798,  5977,   205,  6542, 52569,   834,   449,   336])), torch.return_types.topk(
values=tensor([0.4299, 0.0614, 0.0422, 0.0164, 0.0123, 0.0120, 0.0095, 0.0084, 0.0069,
        0.0065], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  1111,  9919, 47727,    30])), torch.return_types.topk(
values=tensor([0.4983, 0.0533, 0.0416, 0.0116, 0.0101, 0.0092, 0.0081, 0.0067, 0.0064,
        0.0063], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 41445, 38982,  1111,   110, 47727,  9919])), torch.return_types.topk(
values=tensor([0.5576, 0.0491, 0.0263, 0.0114, 0.0100, 0.0085, 0.0075, 0.0069, 0.0051,
        0.0051], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 41445,  1111, 38982,   110,    30, 47727])), torch.return_types.topk(
values=tensor([0.7788, 0.0135, 0.0122, 0.0053, 0.0048, 0.0044, 0.0037, 0.0029, 0.0027,
        0.0024], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110,  6091, 56796, 38982,  3617,  9919,  1111])), torch.return_types.topk(
values=tensor([0.8237, 0.0103, 0.0103, 0.0055, 0.0038, 0.0034, 0.0024, 0.0018, 0.0017,
        0.0017], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,   110,  6091, 56796, 38982,  3617,  9919,  1111])), torch.return_types.topk(
values=tensor([0.8599, 0.0073, 0.0065, 0.0033, 0.0030, 0.0029, 0.0020, 0.0019, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091,   110,  1111,  4036, 38982,  3617])), torch.return_types.topk(
values=tensor([0.6411, 0.2198, 0.0253, 0.0102, 0.0056, 0.0045, 0.0043, 0.0034, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6289, 0.2351, 0.0250, 0.0105, 0.0063, 0.0040, 0.0029, 0.0028, 0.0020,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30,  9919, 23401, 51174])), torch.return_types.topk(
values=tensor([0.6191, 0.2406, 0.0238, 0.0097, 0.0072, 0.0052, 0.0039, 0.0024, 0.0023,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569, 60824,  9919, 51174])), torch.return_types.topk(
values=tensor([0.5928, 0.2822, 0.0241, 0.0110, 0.0029, 0.0023, 0.0017, 0.0017, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058,  4569,  9919, 51174])), torch.return_types.topk(
values=tensor([0.5864, 0.2881, 0.0229, 0.0112, 0.0034, 0.0025, 0.0019, 0.0017, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058, 51174,  4569,  9919])), torch.return_types.topk(
values=tensor([0.6323, 0.2382, 0.0173, 0.0126, 0.0082, 0.0043, 0.0018, 0.0014, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 56796, 51174,  9919])), torch.return_types.topk(
values=tensor([0.4219, 0.1306, 0.0584, 0.0242, 0.0238, 0.0229, 0.0165, 0.0094, 0.0091,
        0.0071], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,    30,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4045, 0.1559, 0.0574, 0.0251, 0.0237, 0.0189, 0.0112, 0.0098, 0.0090,
        0.0078], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,    30,  3991,  1390, 27993])), torch.return_types.topk(
values=tensor([0.4175, 0.1523, 0.0515, 0.0235, 0.0226, 0.0223, 0.0148, 0.0089, 0.0074,
        0.0066], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398, 38982,  4569,    30,  3991,  1390, 27993])), torch.return_types.topk(
values=tensor([0.5244, 0.1456, 0.0488, 0.0197, 0.0128, 0.0096, 0.0079, 0.0042, 0.0034,
        0.0030], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,  9919])), torch.return_types.topk(
values=tensor([0.4985, 0.1697, 0.0482, 0.0204, 0.0114, 0.0099, 0.0065, 0.0039, 0.0036,
        0.0033], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.4543, 0.1522, 0.0530, 0.0171, 0.0160, 0.0155, 0.0139, 0.0132, 0.0051,
        0.0044], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 60824,  2398, 38982,  3991,    80,   336])), torch.return_types.topk(
values=tensor([0.8818, 0.0044, 0.0042, 0.0028, 0.0022, 0.0020, 0.0020, 0.0020, 0.0017,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 29498, 30261, 33622, 48446, 51174,   409])), torch.return_types.topk(
values=tensor([0.8892, 0.0038, 0.0038, 0.0022, 0.0020, 0.0020, 0.0019, 0.0017, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498,    30, 48446, 51174,   409, 30261, 33622])), torch.return_types.topk(
values=tensor([0.9023, 0.0030, 0.0026, 0.0020, 0.0019, 0.0018, 0.0015, 0.0014, 0.0013,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    30,    80, 29498, 30261,  8911,   409, 48446, 51174,  1828])), torch.return_types.topk(
values=tensor([9.1650e-01, 4.0512e-03, 2.2278e-03, 1.9817e-03, 1.6813e-03, 1.5736e-03,
        1.2255e-03, 1.1835e-03, 8.8978e-04, 8.8596e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 30261, 51174, 48446, 15588, 30502, 33622])), torch.return_types.topk(
values=tensor([9.1992e-01, 2.6760e-03, 2.2106e-03, 1.7967e-03, 1.6489e-03, 1.1377e-03,
        1.0443e-03, 9.8419e-04, 8.2922e-04, 7.6103e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 30261, 48446, 15588, 58599,   336])), torch.return_types.topk(
values=tensor([9.3750e-01, 2.4357e-03, 1.5974e-03, 1.4887e-03, 1.4429e-03, 1.0939e-03,
        9.6512e-04, 7.9060e-04, 7.8773e-04, 7.2861e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 30261, 30502, 51174, 15588, 48446, 53208,   409])), torch.return_types.topk(
values=tensor([0.8335, 0.0250, 0.0134, 0.0113, 0.0102, 0.0059, 0.0032, 0.0022, 0.0017,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8398, 0.0254, 0.0151, 0.0104, 0.0086, 0.0042, 0.0026, 0.0024, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 53208, 20077,    30, 30502,  1111, 15597, 55513])), torch.return_types.topk(
values=tensor([0.8574, 0.0174, 0.0125, 0.0117, 0.0081, 0.0062, 0.0038, 0.0018, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409,    30, 20077, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8184, 0.0371, 0.0343, 0.0076, 0.0074, 0.0051, 0.0021, 0.0011, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111, 55513,  1186, 51174])), torch.return_types.topk(
values=tensor([0.8291, 0.0382, 0.0246, 0.0083, 0.0060, 0.0059, 0.0021, 0.0013, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111, 51174, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8457, 0.0301, 0.0289, 0.0112, 0.0065, 0.0038, 0.0015, 0.0010, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111, 51174, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5381, 0.2141, 0.0316, 0.0084, 0.0061, 0.0052, 0.0030, 0.0029, 0.0027,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 34059, 30261, 20077,  3617])), torch.return_types.topk(
values=tensor([0.5542, 0.2008, 0.0272, 0.0071, 0.0071, 0.0043, 0.0037, 0.0032, 0.0031,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610,    30, 41445,  1657, 34059, 40315,    34])), torch.return_types.topk(
values=tensor([0.5850, 0.1649, 0.0251, 0.0103, 0.0059, 0.0045, 0.0031, 0.0030, 0.0025,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 30261,    34, 54203, 34059])), torch.return_types.topk(
values=tensor([0.5469, 0.1997, 0.0184, 0.0103, 0.0038, 0.0036, 0.0034, 0.0031, 0.0031,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 41445, 30261, 15588, 54203, 60824])), torch.return_types.topk(
values=tensor([0.7217, 0.0918, 0.0133, 0.0086, 0.0037, 0.0031, 0.0026, 0.0021, 0.0019,
        0.0018], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610,  1657, 34059, 54203, 60824, 40315, 30261])), torch.return_types.topk(
values=tensor([0.6187, 0.1248, 0.0119, 0.0095, 0.0072, 0.0033, 0.0029, 0.0029, 0.0029,
        0.0022], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 30261, 34059, 54203, 41445,  1657])), torch.return_types.topk(
values=tensor([0.7378, 0.0137, 0.0130, 0.0069, 0.0045, 0.0043, 0.0043, 0.0033, 0.0030,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617, 54203,    30,   213,   336, 58401])), torch.return_types.topk(
values=tensor([0.7505, 0.0108, 0.0103, 0.0082, 0.0042, 0.0037, 0.0036, 0.0035, 0.0033,
        0.0032], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617,   213, 58401,   336,    30])), torch.return_types.topk(
values=tensor([0.7568, 0.0152, 0.0110, 0.0095, 0.0054, 0.0042, 0.0040, 0.0031, 0.0024,
        0.0024], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,    30, 54203,  3617,   213,   336, 58401])), torch.return_types.topk(
values=tensor([0.7896, 0.0084, 0.0059, 0.0043, 0.0040, 0.0039, 0.0031, 0.0024, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336, 54203,  3617,   213,   449,  2398])), torch.return_types.topk(
values=tensor([0.8091, 0.0060, 0.0059, 0.0046, 0.0039, 0.0032, 0.0026, 0.0022, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([30261,    34,  9971, 41445, 54203,   213,   336,   449,  3617,  2398])), torch.return_types.topk(
values=tensor([0.8101, 0.0081, 0.0066, 0.0062, 0.0030, 0.0024, 0.0023, 0.0023, 0.0022,
        0.0020], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,  3617,   213,   336,   449, 60824])), torch.return_types.topk(
values=tensor([0.6489, 0.0722, 0.0381, 0.0190, 0.0156, 0.0143, 0.0116, 0.0097, 0.0063,
        0.0042], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   649,   980,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6421, 0.0876, 0.0312, 0.0202, 0.0140, 0.0128, 0.0112, 0.0100, 0.0081,
        0.0041], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6899, 0.0745, 0.0240, 0.0166, 0.0114, 0.0111, 0.0095, 0.0064, 0.0062,
        0.0042], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  3991,  1872,  3175])), torch.return_types.topk(
values=tensor([0.6836, 0.0804, 0.0365, 0.0251, 0.0087, 0.0083, 0.0056, 0.0050, 0.0034,
        0.0032], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6533, 0.1010, 0.0405, 0.0218, 0.0098, 0.0084, 0.0053, 0.0050, 0.0046,
        0.0035], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.7754, 0.0694, 0.0210, 0.0142, 0.0066, 0.0046, 0.0036, 0.0035, 0.0033,
        0.0022], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  3991,  1390,  1872,  3175])), torch.return_types.topk(
values=tensor([8.9307e-01, 9.5606e-04, 2.6035e-04, 1.5545e-04, 8.1897e-05, 5.5552e-05,
        3.2425e-05, 1.5914e-05, 1.5616e-05, 1.1563e-05], dtype=torch.float16),
indices=tensor([   2,    7,    4,    6,   13,    5,   22, 9182,   30,   40])), torch.return_types.topk(
values=tensor([8.3496e-01, 4.5654e-02, 2.1858e-03, 1.9293e-03, 6.1417e-04, 1.5891e-04,
        1.5402e-04, 1.1009e-04, 9.2328e-05, 6.8367e-05], dtype=torch.float16),
indices=tensor([   2,    6,    5,    4, 9182, 1149, 2207,   13,   40,  732])), torch.return_types.topk(
values=tensor([9.0039e-01, 1.5008e-04, 5.8770e-05, 3.3319e-05, 1.0371e-05, 9.4771e-06,
        7.9274e-06, 5.6028e-06, 5.0664e-06, 4.8280e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7, 9182,    5,   13, 2207,   22,   30])), torch.return_types.topk(
values=tensor([0.5859, 0.2025, 0.0308, 0.0172, 0.0098, 0.0076, 0.0040, 0.0021, 0.0021,
        0.0013], dtype=torch.float16),
indices=tensor([53075,   118, 41337,  1176, 28749, 32644, 64791,  8855,  4389,  2226])), torch.return_types.topk(
values=tensor([9.2383e-01, 2.7466e-02, 9.5673e-03, 2.2202e-03, 1.7977e-03, 1.0815e-03,
        9.6941e-04, 8.9312e-04, 7.4625e-04, 5.6314e-04], dtype=torch.float16),
indices=tensor([ 4389, 64791, 17798,  1052, 56681, 52157, 52569, 62224, 56830, 10594])), torch.return_types.topk(
values=tensor([9.0039e-01, 1.4496e-04, 5.3942e-05, 1.6689e-05, 9.1791e-06, 8.5235e-06,
        7.2122e-06, 4.9472e-06, 4.2319e-06, 4.1723e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   22,   70])), torch.return_types.topk(
values=tensor([0.4299, 0.0665, 0.0370, 0.0149, 0.0139, 0.0128, 0.0085, 0.0085, 0.0068,
        0.0068], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  1111,  9919,   110, 41565])), torch.return_types.topk(
values=tensor([0.4836, 0.0582, 0.0388, 0.0108, 0.0108, 0.0108, 0.0078, 0.0077, 0.0067,
        0.0060], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 41445, 38982,  1111,   110,  9919, 47727])), torch.return_types.topk(
values=tensor([0.5508, 0.0537, 0.0248, 0.0106, 0.0106, 0.0085, 0.0078, 0.0077, 0.0059,
        0.0048], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 41445,  3617, 38982,  1111,   110,    30, 47727])), torch.return_types.topk(
values=tensor([0.7788, 0.0146, 0.0108, 0.0059, 0.0044, 0.0044, 0.0041, 0.0028, 0.0027,
        0.0023], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110, 56796,  6091, 38982,  9919,  3617,  1111])), torch.return_types.topk(
values=tensor([0.8159, 0.0118, 0.0098, 0.0065, 0.0036, 0.0035, 0.0028, 0.0019, 0.0018,
        0.0018], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110, 56796,  6091, 38982,  9919,  3617,  1111])), torch.return_types.topk(
values=tensor([0.8525, 0.0077, 0.0073, 0.0034, 0.0034, 0.0030, 0.0021, 0.0019, 0.0017,
        0.0016], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110, 56796,  6091, 38982,  1111,  4036, 41445])), torch.return_types.topk(
values=tensor([0.6177, 0.2238, 0.0303, 0.0128, 0.0054, 0.0052, 0.0049, 0.0042, 0.0021,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  4569,  1013,    30,  9919, 51174,   291])), torch.return_types.topk(
values=tensor([0.6128, 0.2363, 0.0293, 0.0126, 0.0061, 0.0049, 0.0034, 0.0031, 0.0022,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 23401])), torch.return_types.topk(
values=tensor([0.5771, 0.2622, 0.0290, 0.0116, 0.0066, 0.0066, 0.0050, 0.0029, 0.0025,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 60824, 51174])), torch.return_types.topk(
values=tensor([0.6050, 0.2644, 0.0228, 0.0154, 0.0031, 0.0030, 0.0024, 0.0020, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  9919,  4569, 51174, 21058])), torch.return_types.topk(
values=tensor([0.5581, 0.2986, 0.0284, 0.0139, 0.0031, 0.0026, 0.0022, 0.0020, 0.0017,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058, 51174,  4569,  9919])), torch.return_types.topk(
values=tensor([0.5986, 0.2634, 0.0200, 0.0149, 0.0070, 0.0036, 0.0020, 0.0015, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 51174, 56796,  9919])), torch.return_types.topk(
values=tensor([0.4180, 0.1265, 0.0557, 0.0259, 0.0241, 0.0205, 0.0162, 0.0108, 0.0098,
        0.0086], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,    30,  3991,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4001, 0.1506, 0.0550, 0.0254, 0.0224, 0.0199, 0.0118, 0.0118, 0.0092,
        0.0074], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,  3991,    30,  1390, 27993])), torch.return_types.topk(
values=tensor([0.4175, 0.1523, 0.0461, 0.0237, 0.0219, 0.0213, 0.0170, 0.0100, 0.0075,
        0.0064], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,    30,  3991,  1390, 47727])), torch.return_types.topk(
values=tensor([0.5347, 0.1351, 0.0435, 0.0172, 0.0129, 0.0109, 0.0084, 0.0041, 0.0036,
        0.0036], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,  9919])), torch.return_types.topk(
values=tensor([0.5098, 0.1567, 0.0432, 0.0183, 0.0115, 0.0115, 0.0069, 0.0039, 0.0036,
        0.0033], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  3991,  4569, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.5371, 0.1379, 0.0421, 0.0143, 0.0112, 0.0105, 0.0077, 0.0038, 0.0035,
        0.0030], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982, 60824,  1390,   336])), torch.return_types.topk(
values=tensor([0.8848, 0.0041, 0.0040, 0.0023, 0.0022, 0.0021, 0.0021, 0.0019, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498,    30, 30261, 33622, 48446, 51174,  1828])), torch.return_types.topk(
values=tensor([0.8926, 0.0041, 0.0034, 0.0023, 0.0019, 0.0017, 0.0016, 0.0016, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 48446, 30261, 51174, 33622,    30,   409])), torch.return_types.topk(
values=tensor([0.9019, 0.0027, 0.0026, 0.0021, 0.0021, 0.0019, 0.0014, 0.0013, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    30,    80, 29498, 30261,  8911, 48446,   409, 33622, 51174])), torch.return_types.topk(
values=tensor([9.1699e-01, 3.6335e-03, 2.2564e-03, 2.1019e-03, 1.8415e-03, 1.4057e-03,
        1.1978e-03, 1.1473e-03, 9.7418e-04, 8.6308e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 30261, 51174, 48446, 15588, 33622, 30502])), torch.return_types.topk(
values=tensor([9.1992e-01, 2.4376e-03, 2.2717e-03, 1.9741e-03, 1.5078e-03, 1.2598e-03,
        1.0204e-03, 9.2506e-04, 8.1635e-04, 8.0395e-04], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 51174, 30261, 48446, 15588, 58599,  2214])), torch.return_types.topk(
values=tensor([9.3555e-01, 2.4204e-03, 1.7643e-03, 1.7567e-03, 1.4801e-03, 1.0490e-03,
        9.3317e-04, 7.8869e-04, 7.6485e-04, 7.1812e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 30261, 30502, 51174, 15588, 48446, 53208,   336])), torch.return_types.topk(
values=tensor([0.8447, 0.0238, 0.0122, 0.0108, 0.0098, 0.0045, 0.0030, 0.0020, 0.0016,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8511, 0.0240, 0.0139, 0.0103, 0.0083, 0.0033, 0.0027, 0.0021, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 53208, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8638, 0.0164, 0.0125, 0.0114, 0.0069, 0.0059, 0.0039, 0.0016, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409,    30, 20077, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8223, 0.0379, 0.0326, 0.0079, 0.0076, 0.0048, 0.0020, 0.0011, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8354, 0.0370, 0.0254, 0.0071, 0.0065, 0.0059, 0.0019, 0.0012, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 30502, 20077,  1111, 51174, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8452, 0.0308, 0.0289, 0.0121, 0.0061, 0.0039, 0.0015, 0.0010, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111, 55513, 51174, 15597])), torch.return_types.topk(
values=tensor([0.5249, 0.2139, 0.0341, 0.0085, 0.0062, 0.0055, 0.0033, 0.0033, 0.0033,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 20077, 34059, 30261, 15588])), torch.return_types.topk(
values=tensor([0.5420, 0.2073, 0.0301, 0.0070, 0.0064, 0.0052, 0.0035, 0.0034, 0.0030,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 34059,  1657, 30261,    34])), torch.return_types.topk(
values=tensor([0.5776, 0.1630, 0.0268, 0.0106, 0.0056, 0.0052, 0.0033, 0.0028, 0.0027,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 30261,    34, 20077, 34059])), torch.return_types.topk(
values=tensor([0.5269, 0.2032, 0.0192, 0.0100, 0.0045, 0.0042, 0.0041, 0.0039, 0.0032,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 41445, 34059, 15588, 30261, 60824, 20077])), torch.return_types.topk(
values=tensor([0.6978, 0.1029, 0.0148, 0.0086, 0.0036, 0.0035, 0.0027, 0.0025, 0.0021,
        0.0021], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610,  1657, 34059, 54203, 60824, 41445, 30261])), torch.return_types.topk(
values=tensor([0.5889, 0.1304, 0.0123, 0.0101, 0.0080, 0.0039, 0.0036, 0.0033, 0.0030,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 30261, 41445, 34059, 54203,  1657])), torch.return_types.topk(
values=tensor([0.7461, 0.0148, 0.0139, 0.0060, 0.0040, 0.0039, 0.0035, 0.0032, 0.0029,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617,    30,   213,   336, 58401])), torch.return_types.topk(
values=tensor([0.7642, 0.0119, 0.0111, 0.0066, 0.0039, 0.0035, 0.0032, 0.0031, 0.0031,
        0.0026], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203, 58401,   213,  3617,   336,    30])), torch.return_types.topk(
values=tensor([0.7734, 0.0152, 0.0114, 0.0079, 0.0047, 0.0038, 0.0034, 0.0029, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,    30, 54203,  3617,   213, 58401,   336])), torch.return_types.topk(
values=tensor([0.7915, 0.0093, 0.0063, 0.0041, 0.0037, 0.0036, 0.0028, 0.0023, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,    34, 54203,  3617,   213,  2398,   449])), torch.return_types.topk(
values=tensor([0.8135, 0.0064, 0.0053, 0.0047, 0.0037, 0.0030, 0.0026, 0.0020, 0.0017,
        0.0016], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   213,   336,   449,  2398,  3617])), torch.return_types.topk(
values=tensor([0.8140, 0.0081, 0.0073, 0.0051, 0.0029, 0.0024, 0.0022, 0.0021, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   336,   449,  3617,   213, 60824])), torch.return_types.topk(
values=tensor([0.6519, 0.0760, 0.0391, 0.0188, 0.0146, 0.0135, 0.0112, 0.0095, 0.0062,
        0.0039], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   649,   980,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6401, 0.0982, 0.0326, 0.0199, 0.0130, 0.0120, 0.0105, 0.0096, 0.0075,
        0.0038], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6895, 0.0779, 0.0247, 0.0162, 0.0116, 0.0106, 0.0091, 0.0059, 0.0059,
        0.0043], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,  1390,   980,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6812, 0.0859, 0.0355, 0.0275, 0.0084, 0.0082, 0.0052, 0.0048, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3175,  3991])), torch.return_types.topk(
values=tensor([0.6509, 0.1122, 0.0391, 0.0233, 0.0090, 0.0079, 0.0047, 0.0046, 0.0039,
        0.0033], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.7456, 0.0786, 0.0203, 0.0154, 0.0080, 0.0060, 0.0036, 0.0033, 0.0031,
        0.0026], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  3991,  3175,  1390,  1872])), torch.return_types.topk(
values=tensor([8.8672e-01, 2.8114e-03, 4.2295e-04, 7.5221e-05, 7.2360e-05, 4.6134e-05,
        3.6001e-05, 2.5630e-05, 2.0802e-05, 2.0266e-05], dtype=torch.float16),
indices=tensor([   2,    6, 9182,   40,    4,    7,    5,   11, 2207,   13])), torch.return_types.topk(
values=tensor([8.9990e-01, 1.2732e-04, 5.7399e-05, 2.7835e-05, 1.0967e-05, 8.4639e-06,
        7.5102e-06, 5.6028e-06, 4.4107e-06, 4.2915e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   22,   70])), torch.return_types.topk(
values=tensor([9.0186e-01, 1.2958e-04, 5.9545e-05, 2.3484e-05, 9.5963e-06, 9.2387e-06,
        7.6890e-06, 5.2452e-06, 4.4107e-06, 4.1127e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   22,   30])), torch.return_types.topk(
values=tensor([0.6431, 0.1978, 0.0323, 0.0123, 0.0059, 0.0044, 0.0027, 0.0021, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([53075,   118, 41337,  1176, 28749, 32644,  8855, 64791,    25, 11255])), torch.return_types.topk(
values=tensor([9.2432e-01, 3.0655e-02, 6.1340e-03, 1.5631e-03, 1.5030e-03, 1.1702e-03,
        9.7752e-04, 7.4387e-04, 7.0429e-04, 5.9557e-04], dtype=torch.float16),
indices=tensor([ 4389, 64791, 17798, 56681,  1052, 52157, 62224, 56830, 52569, 10594])), torch.return_types.topk(
values=tensor([0.4343, 0.0760, 0.0703, 0.0606, 0.0388, 0.0356, 0.0236, 0.0097, 0.0094,
        0.0085], dtype=torch.float16),
indices=tensor([64513,  1698,    25,   215,  2639, 17798,   205,  5977,   834,   690])), torch.return_types.topk(
values=tensor([0.4297, 0.0609, 0.0432, 0.0150, 0.0137, 0.0134, 0.0092, 0.0092, 0.0069,
        0.0067], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  9919,  1111, 47727, 41565])), torch.return_types.topk(
values=tensor([0.4922, 0.0527, 0.0433, 0.0112, 0.0107, 0.0102, 0.0081, 0.0070, 0.0069,
        0.0065], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 41445,  3617, 38982,  1111,   110,  9919, 47727])), torch.return_types.topk(
values=tensor([0.5591, 0.0504, 0.0255, 0.0107, 0.0105, 0.0078, 0.0077, 0.0072, 0.0060,
        0.0051], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 41445,  3617, 38982,  1111,   110,    30, 47727])), torch.return_types.topk(
values=tensor([0.7798, 0.0131, 0.0122, 0.0056, 0.0047, 0.0045, 0.0038, 0.0029, 0.0026,
        0.0024], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110, 56796,  6091, 38982,  9919,  3617,  1111])), torch.return_types.topk(
values=tensor([0.8193, 0.0112, 0.0102, 0.0058, 0.0040, 0.0036, 0.0026, 0.0019, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,   110, 56796,  6091, 38982,  9919,  1111,  3617])), torch.return_types.topk(
values=tensor([0.8486, 0.0077, 0.0072, 0.0039, 0.0033, 0.0032, 0.0020, 0.0020, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,   110,  6091,  1111, 38982,  4036, 41445])), torch.return_types.topk(
values=tensor([0.6240, 0.2295, 0.0276, 0.0116, 0.0053, 0.0048, 0.0041, 0.0037, 0.0019,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6187, 0.2404, 0.0261, 0.0117, 0.0060, 0.0043, 0.0033, 0.0027, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 23401, 51174])), torch.return_types.topk(
values=tensor([0.5981, 0.2551, 0.0251, 0.0100, 0.0070, 0.0063, 0.0044, 0.0028, 0.0025,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 60824, 51174])), torch.return_types.topk(
values=tensor([0.5874, 0.2842, 0.0242, 0.0122, 0.0027, 0.0025, 0.0019, 0.0018, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  9919, 21058,  4569, 51174])), torch.return_types.topk(
values=tensor([0.5835, 0.2866, 0.0230, 0.0127, 0.0033, 0.0027, 0.0021, 0.0019, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058, 51174,  9919,  4569])), torch.return_types.topk(
values=tensor([0.6221, 0.2573, 0.0159, 0.0127, 0.0061, 0.0038, 0.0018, 0.0014, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 51174,  9919, 56796])), torch.return_types.topk(
values=tensor([0.4248, 0.1295, 0.0553, 0.0253, 0.0243, 0.0220, 0.0128, 0.0104, 0.0099,
        0.0087], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  3991,  1390,  9919])), torch.return_types.topk(
values=tensor([0.3992, 0.1539, 0.0571, 0.0240, 0.0232, 0.0220, 0.0115, 0.0100, 0.0089,
        0.0083], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,  3991,    30,  1390, 27993])), torch.return_types.topk(
values=tensor([0.4087, 0.1564, 0.0481, 0.0240, 0.0232, 0.0225, 0.0165, 0.0096, 0.0075,
        0.0071], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  3991,  1390, 47727])), torch.return_types.topk(
values=tensor([0.5151, 0.1465, 0.0502, 0.0182, 0.0130, 0.0109, 0.0091, 0.0044, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,  9919,    80])), torch.return_types.topk(
values=tensor([0.4836, 0.1697, 0.0510, 0.0189, 0.0119, 0.0118, 0.0080, 0.0040, 0.0035,
        0.0034], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.5039, 0.1536, 0.0499, 0.0159, 0.0118, 0.0104, 0.0087, 0.0043, 0.0036,
        0.0031], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982, 60824,  1390,    80])), torch.return_types.topk(
values=tensor([0.8027, 0.0070, 0.0070, 0.0042, 0.0041, 0.0039, 0.0038, 0.0038, 0.0038,
        0.0037], dtype=torch.float16),
indices=tensor([41445,    80, 51174,    30, 30261, 48446,   409,  9971, 33622,  8911])), torch.return_types.topk(
values=tensor([0.8750, 0.0057, 0.0051, 0.0032, 0.0027, 0.0024, 0.0024, 0.0020, 0.0019,
        0.0019], dtype=torch.float16),
indices=tensor([41445, 51174,    80, 30261, 15588, 48446, 29498, 53208,  8911,   409])), torch.return_types.topk(
values=tensor([0.8193, 0.0061, 0.0059, 0.0052, 0.0041, 0.0037, 0.0035, 0.0030, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([41445,    80,    30, 51174, 33622,  8911, 30261, 48446,  1111,  9971])), torch.return_types.topk(
values=tensor([0.8574, 0.0066, 0.0037, 0.0037, 0.0032, 0.0030, 0.0028, 0.0016, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588,   336,   409])), torch.return_types.topk(
values=tensor([0.7290, 0.0389, 0.0303, 0.0154, 0.0144, 0.0106, 0.0057, 0.0039, 0.0031,
        0.0025], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409,    30,  1111, 30502, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7334, 0.0574, 0.0491, 0.0158, 0.0118, 0.0076, 0.0046, 0.0037, 0.0026,
        0.0020], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1111,  1186, 51174, 23904])), torch.return_types.topk(
values=tensor([0.7461, 0.0360, 0.0280, 0.0187, 0.0138, 0.0115, 0.0058, 0.0057, 0.0033,
        0.0019], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,    30,   409, 30502,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.6831, 0.0754, 0.0552, 0.0150, 0.0138, 0.0104, 0.0041, 0.0021, 0.0020,
        0.0020], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111,  1186, 15597, 51174])), torch.return_types.topk(
values=tensor([0.4514, 0.1796, 0.0404, 0.0213, 0.0096, 0.0063, 0.0063, 0.0058, 0.0048,
        0.0047], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 15588, 20077,  3991, 30261,  1390])), torch.return_types.topk(
values=tensor([0.5029, 0.1779, 0.0211, 0.0113, 0.0075, 0.0068, 0.0055, 0.0049, 0.0049,
        0.0047], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588,  7610, 34059,  7680, 60824, 30261])), torch.return_types.topk(
values=tensor([0.4734, 0.1700, 0.0401, 0.0179, 0.0142, 0.0063, 0.0061, 0.0054, 0.0046,
        0.0040], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991, 30261, 34059])), torch.return_types.topk(
values=tensor([0.4658, 0.2379, 0.0175, 0.0130, 0.0051, 0.0046, 0.0041, 0.0038, 0.0036,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 15588, 41445,  7680, 30261,  3991])), torch.return_types.topk(
values=tensor([0.5425, 0.0474, 0.0272, 0.0066, 0.0064, 0.0057, 0.0057, 0.0056, 0.0054,
        0.0053], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390,  3617,   213, 54203,    34,  2398,    30])), torch.return_types.topk(
values=tensor([0.6714, 0.0254, 0.0111, 0.0061, 0.0044, 0.0042, 0.0039, 0.0036, 0.0034,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336, 54203,  2398,  3617,    34,   213, 41565])), torch.return_types.topk(
values=tensor([0.6128, 0.0365, 0.0218, 0.0071, 0.0059, 0.0056, 0.0049, 0.0047, 0.0044,
        0.0041], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34,   213,  3617, 54203,  1390, 38982])), torch.return_types.topk(
values=tensor([0.7368, 0.0078, 0.0071, 0.0054, 0.0045, 0.0044, 0.0036, 0.0036, 0.0034,
        0.0033], dtype=torch.float16),
indices=tensor([30261, 41445,   336,  9971,    34,  3617, 54203,   449,   213,  2398])), torch.return_types.topk(
values=tensor([0.5029, 0.0759, 0.0754, 0.0345, 0.0250, 0.0185, 0.0145, 0.0090, 0.0082,
        0.0062], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  3991,  1872, 47727])), torch.return_types.topk(
values=tensor([0.6797, 0.0632, 0.0442, 0.0378, 0.0103, 0.0069, 0.0065, 0.0040, 0.0039,
        0.0036], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  2398,  3991])), torch.return_types.topk(
values=tensor([0.5488, 0.0737, 0.0597, 0.0300, 0.0200, 0.0172, 0.0137, 0.0097, 0.0093,
        0.0065], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6577, 0.0570, 0.0434, 0.0430, 0.0092, 0.0063, 0.0057, 0.0048, 0.0044,
        0.0030], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991,    57])), torch.return_types.topk(
values=tensor([0.2634, 0.1810, 0.0910, 0.0561, 0.0305, 0.0265, 0.0249, 0.0159, 0.0143,
        0.0076], dtype=torch.float16),
indices=tensor([ 4569,  5442,  1390, 21405,  2398, 38982, 45883,   649,   980, 57667])), torch.return_types.topk(
values=tensor([0.4746, 0.1774, 0.0160, 0.0134, 0.0117, 0.0109, 0.0104, 0.0090, 0.0088,
        0.0067], dtype=torch.float16),
indices=tensor([51832, 64194,   695,  9877, 25782,    95,   749,   102,   302,  8100])), torch.return_types.topk(
values=tensor([0.2581, 0.1903, 0.0831, 0.0604, 0.0303, 0.0274, 0.0235, 0.0159, 0.0130,
        0.0081], dtype=torch.float16),
indices=tensor([ 4569,  5442,  1390, 21405, 38982,  2398, 45883,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.3359, 0.1959, 0.0621, 0.0351, 0.0325, 0.0287, 0.0211, 0.0131, 0.0098,
        0.0086], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 45883,  2398, 38982,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.0911, 0.0903, 0.0570, 0.0351, 0.0345, 0.0282, 0.0217, 0.0184, 0.0164,
        0.0147], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  1111,  1390, 51174,   980])), torch.return_types.topk(
values=tensor([0.5908, 0.0384, 0.0197, 0.0122, 0.0085, 0.0084, 0.0064, 0.0059, 0.0051,
        0.0048], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919, 56796, 41445,  1111, 30360, 51174])), torch.return_types.topk(
values=tensor([0.1443, 0.0932, 0.0565, 0.0340, 0.0273, 0.0251, 0.0201, 0.0134, 0.0128,
        0.0122], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  1111,  1390, 47727, 51174])), torch.return_types.topk(
values=tensor([0.6895, 0.0259, 0.0140, 0.0078, 0.0059, 0.0055, 0.0052, 0.0040, 0.0038,
        0.0027], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,   110, 38982,  6091,  9919,  1111, 30360])), torch.return_types.topk(
values=tensor([0.5527, 0.1609, 0.0382, 0.0267, 0.0166, 0.0133, 0.0099, 0.0093, 0.0049,
        0.0047], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 51174, 23401,  1390])), torch.return_types.topk(
values=tensor([0.6260, 0.2097, 0.0249, 0.0167, 0.0068, 0.0051, 0.0036, 0.0029, 0.0029,
        0.0027], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 51174, 60824, 21058,  9919,  4569])), torch.return_types.topk(
values=tensor([0.5806, 0.1562, 0.0330, 0.0247, 0.0160, 0.0088, 0.0084, 0.0083, 0.0065,
        0.0046], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6538, 0.2278, 0.0201, 0.0088, 0.0051, 0.0022, 0.0018, 0.0017, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 21058,  4725, 51174, 60824])), torch.return_types.topk(
values=tensor([0.2434, 0.0939, 0.0748, 0.0518, 0.0475, 0.0302, 0.0259, 0.0167, 0.0152,
        0.0098], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  1390,  2398,  3991,  9919, 27993])), torch.return_types.topk(
values=tensor([0.4065, 0.1394, 0.0679, 0.0250, 0.0235, 0.0152, 0.0148, 0.0106, 0.0058,
        0.0056], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398,  3991, 38982,  1390, 51174,  9919])), torch.return_types.topk(
values=tensor([0.2360, 0.0881, 0.0731, 0.0531, 0.0376, 0.0259, 0.0259, 0.0222, 0.0157,
        0.0145], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  1390,    30,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4536, 0.1643, 0.0490, 0.0240, 0.0202, 0.0092, 0.0088, 0.0053, 0.0041,
        0.0037], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,  4725,   336])), torch.return_types.topk(
values=tensor([0.8184, 0.0075, 0.0062, 0.0042, 0.0038, 0.0038, 0.0035, 0.0035, 0.0035,
        0.0034], dtype=torch.float16),
indices=tensor([41445,    80, 51174,    30,  8911, 30261, 48446,  9971, 33622,   409])), torch.return_types.topk(
values=tensor([0.8965, 0.0054, 0.0040, 0.0024, 0.0021, 0.0019, 0.0018, 0.0018, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30261, 29498, 48446,  8911, 15588, 30502, 53208])), torch.return_types.topk(
values=tensor([0.8418, 0.0063, 0.0047, 0.0042, 0.0036, 0.0034, 0.0031, 0.0026, 0.0025,
        0.0022], dtype=torch.float16),
indices=tensor([41445,    80,    30, 51174,  8911, 33622, 30261, 48446, 29498,  9971])), torch.return_types.topk(
values=tensor([0.8687, 0.0073, 0.0035, 0.0034, 0.0030, 0.0026, 0.0025, 0.0014, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 30261, 48446, 15588,  9402,   336])), torch.return_types.topk(
values=tensor([0.7412, 0.0390, 0.0270, 0.0161, 0.0145, 0.0113, 0.0051, 0.0042, 0.0029,
        0.0021], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409,    30,  1111, 30502, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7617, 0.0491, 0.0483, 0.0117, 0.0110, 0.0061, 0.0036, 0.0025, 0.0020,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1111,  1186, 51174, 23904])), torch.return_types.topk(
values=tensor([0.7656, 0.0342, 0.0233, 0.0184, 0.0125, 0.0112, 0.0058, 0.0048, 0.0029,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,    30,   409, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.6934, 0.0708, 0.0560, 0.0128, 0.0118, 0.0109, 0.0038, 0.0020, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111, 15597, 51174,  1186])), torch.return_types.topk(
values=tensor([0.4846, 0.1783, 0.0380, 0.0167, 0.0103, 0.0052, 0.0049, 0.0047, 0.0046,
        0.0046], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 15588, 20077,  3991, 30261, 34059])), torch.return_types.topk(
values=tensor([0.5371, 0.1716, 0.0187, 0.0081, 0.0075, 0.0056, 0.0051, 0.0043, 0.0042,
        0.0038], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 15588, 34059, 60824, 30261,  7680])), torch.return_types.topk(
values=tensor([0.5156, 0.1675, 0.0371, 0.0134, 0.0127, 0.0046, 0.0045, 0.0043, 0.0041,
        0.0039], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445, 15588, 20077, 30261,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5708, 0.1454, 0.0201, 0.0149, 0.0057, 0.0039, 0.0036, 0.0035, 0.0035,
        0.0034], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 23904, 54203, 15588, 41445, 60824])), torch.return_types.topk(
values=tensor([0.5708, 0.0362, 0.0251, 0.0059, 0.0059, 0.0058, 0.0054, 0.0053, 0.0052,
        0.0047], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  3617,    34,   213,    30, 54203,  1390,  2398])), torch.return_types.topk(
values=tensor([0.7549, 0.0140, 0.0104, 0.0041, 0.0037, 0.0037, 0.0033, 0.0023, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   213,   336,  2398,  3617, 64851])), torch.return_types.topk(
values=tensor([0.6553, 0.0270, 0.0190, 0.0058, 0.0058, 0.0053, 0.0044, 0.0043, 0.0036,
        0.0034], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34,   213,  3617, 54203, 38982, 58401])), torch.return_types.topk(
values=tensor([0.7920, 0.0057, 0.0055, 0.0043, 0.0036, 0.0033, 0.0032, 0.0024, 0.0022,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336,   213, 54203,  3617,   449, 64851])), torch.return_types.topk(
values=tensor([0.5210, 0.0844, 0.0584, 0.0374, 0.0217, 0.0149, 0.0138, 0.0099, 0.0090,
        0.0067], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.5889, 0.1039, 0.0731, 0.0314, 0.0083, 0.0071, 0.0056, 0.0048, 0.0041,
        0.0028], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  2398])), torch.return_types.topk(
values=tensor([0.5659, 0.0790, 0.0506, 0.0305, 0.0181, 0.0146, 0.0127, 0.0104, 0.0092,
        0.0066], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6455, 0.0665, 0.0457, 0.0381, 0.0088, 0.0064, 0.0050, 0.0050, 0.0050,
        0.0032], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  3991,  1390,  3175])), torch.return_types.topk(
values=tensor([0.2469, 0.1923, 0.0853, 0.0620, 0.0284, 0.0284, 0.0246, 0.0156, 0.0129,
        0.0078], dtype=torch.float16),
indices=tensor([ 4569,  5442,  1390, 21405, 45883, 38982,  2398,   649,   980, 57667])), torch.return_types.topk(
values=tensor([0.2576, 0.2086, 0.1108, 0.0492, 0.0343, 0.0269, 0.0213, 0.0152, 0.0098,
        0.0066], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390,  2398, 38982,   649,   980, 57667])), torch.return_types.topk(
values=tensor([0.2479, 0.1992, 0.0798, 0.0662, 0.0315, 0.0251, 0.0244, 0.0155, 0.0120,
        0.0088], dtype=torch.float16),
indices=tensor([ 4569,  5442,  1390, 21405, 38982,  2398, 45883,   649,   980,  1872])), torch.return_types.topk(
values=tensor([0.3198, 0.1985, 0.0708, 0.0334, 0.0309, 0.0252, 0.0226, 0.0138, 0.0100,
        0.0095], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390,  2398, 38982,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.1055, 0.0895, 0.0592, 0.0373, 0.0282, 0.0275, 0.0218, 0.0167, 0.0151,
        0.0125], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919, 41445,  1111,  1390, 51174,   980])), torch.return_types.topk(
values=tensor([0.6499, 0.0295, 0.0192, 0.0099, 0.0079, 0.0063, 0.0048, 0.0046, 0.0043,
        0.0041], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,  9919,  6091,  1111,   110, 41445])), torch.return_types.topk(
values=tensor([0.1990, 0.0897, 0.0570, 0.0335, 0.0222, 0.0210, 0.0177, 0.0127, 0.0126,
        0.0105], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919, 41445,  1111,  3617, 47727,  1390])), torch.return_types.topk(
values=tensor([0.7012, 0.0270, 0.0129, 0.0088, 0.0058, 0.0055, 0.0052, 0.0040, 0.0036,
        0.0028], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796, 38982,  6091,   110,  9919,  1111,  4247])), torch.return_types.topk(
values=tensor([0.6045, 0.1641, 0.0326, 0.0227, 0.0115, 0.0098, 0.0075, 0.0066, 0.0039,
        0.0033], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 51174,    30, 23401])), torch.return_types.topk(
values=tensor([0.6494, 0.2159, 0.0215, 0.0142, 0.0041, 0.0033, 0.0029, 0.0029, 0.0019,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 51174, 21058, 60824,  4569,  9919])), torch.return_types.topk(
values=tensor([0.6167, 0.1713, 0.0300, 0.0208, 0.0110, 0.0069, 0.0061, 0.0060, 0.0043,
        0.0030], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6602, 0.2211, 0.0193, 0.0102, 0.0042, 0.0022, 0.0019, 0.0017, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 21058,  4569, 60824, 51174,   291])), torch.return_types.topk(
values=tensor([0.2502, 0.0995, 0.0812, 0.0459, 0.0438, 0.0258, 0.0256, 0.0161, 0.0142,
        0.0117], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  1390,  2398,  3991,  9919,    30])), torch.return_types.topk(
values=tensor([0.4380, 0.1367, 0.0667, 0.0230, 0.0194, 0.0139, 0.0121, 0.0075, 0.0054,
        0.0045], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,  9919])), torch.return_types.topk(
values=tensor([0.2612, 0.0945, 0.0754, 0.0483, 0.0329, 0.0286, 0.0206, 0.0205, 0.0150,
        0.0126], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  1390,    30,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4182, 0.1613, 0.0593, 0.0238, 0.0182, 0.0113, 0.0109, 0.0053, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  3991,  1390,  4725,  9919])), torch.return_types.topk(
values=tensor([0.8018, 0.0078, 0.0076, 0.0050, 0.0043, 0.0043, 0.0042, 0.0040, 0.0039,
        0.0037], dtype=torch.float16),
indices=tensor([41445,    80, 51174,    30,  9971, 30261,  8911,   409, 33622, 48446])), torch.return_types.topk(
values=tensor([0.8872, 0.0058, 0.0050, 0.0029, 0.0022, 0.0022, 0.0021, 0.0020, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30261, 29498, 15588, 48446,  8911, 30502, 53208])), torch.return_types.topk(
values=tensor([0.8223, 0.0066, 0.0059, 0.0054, 0.0041, 0.0039, 0.0037, 0.0031, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([41445,    80,    30, 51174, 33622,  8911, 30261,  9971,  1111, 48446])), torch.return_types.topk(
values=tensor([0.8818, 0.0052, 0.0036, 0.0028, 0.0028, 0.0025, 0.0020, 0.0015, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 30261, 48446,  2214, 15588,  9402])), torch.return_types.topk(
values=tensor([0.7261, 0.0416, 0.0286, 0.0155, 0.0152, 0.0130, 0.0057, 0.0042, 0.0030,
        0.0024], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409,    30,  1111, 30502, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7490, 0.0534, 0.0482, 0.0126, 0.0110, 0.0071, 0.0041, 0.0029, 0.0023,
        0.0018], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1111,  1186, 51174, 23904])), torch.return_types.topk(
values=tensor([0.7471, 0.0375, 0.0260, 0.0177, 0.0149, 0.0121, 0.0058, 0.0057, 0.0032,
        0.0019], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,    30,   409, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.6904, 0.0700, 0.0580, 0.0135, 0.0116, 0.0112, 0.0040, 0.0021, 0.0020,
        0.0020], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111, 51174, 15597,  1186])), torch.return_types.topk(
values=tensor([0.4753, 0.1708, 0.0387, 0.0195, 0.0110, 0.0059, 0.0056, 0.0052, 0.0049,
        0.0048], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 15588,  3991, 20077, 30261, 34059])), torch.return_types.topk(
values=tensor([0.5449, 0.1624, 0.0188, 0.0088, 0.0070, 0.0060, 0.0052, 0.0045, 0.0043,
        0.0042], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 15588, 34059, 60824, 30261,  7680])), torch.return_types.topk(
values=tensor([0.5112, 0.1572, 0.0376, 0.0151, 0.0144, 0.0052, 0.0048, 0.0048, 0.0046,
        0.0040], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 15588,  3991, 20077, 30261, 34059])), torch.return_types.topk(
values=tensor([0.5986, 0.1326, 0.0194, 0.0135, 0.0055, 0.0035, 0.0034, 0.0034, 0.0034,
        0.0032], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 54203, 41445, 15588,  1657, 23904])), torch.return_types.topk(
values=tensor([0.5381, 0.0438, 0.0283, 0.0062, 0.0061, 0.0059, 0.0058, 0.0054, 0.0054,
        0.0051], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390,  3617,   213,    30,    34, 54203,  2398])), torch.return_types.topk(
values=tensor([0.6904, 0.0207, 0.0107, 0.0061, 0.0042, 0.0041, 0.0037, 0.0036, 0.0032,
        0.0026], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336, 54203,  2398,  3617,    34,   213, 41565])), torch.return_types.topk(
values=tensor([0.6230, 0.0333, 0.0220, 0.0067, 0.0056, 0.0055, 0.0048, 0.0045, 0.0043,
        0.0039], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34,   213,  3617, 54203, 38982,  1390])), torch.return_types.topk(
values=tensor([0.7837, 0.0064, 0.0057, 0.0045, 0.0038, 0.0033, 0.0033, 0.0027, 0.0023,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336,   213, 54203,  3617,   449,  2398])), torch.return_types.topk(
values=tensor([0.4939, 0.0845, 0.0648, 0.0384, 0.0238, 0.0165, 0.0146, 0.0102, 0.0100,
        0.0072], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.5664, 0.1047, 0.0803, 0.0351, 0.0094, 0.0079, 0.0063, 0.0051, 0.0045,
        0.0034], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  2398])), torch.return_types.topk(
values=tensor([0.5366, 0.0823, 0.0553, 0.0317, 0.0202, 0.0162, 0.0134, 0.0106, 0.0105,
        0.0071], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6465, 0.0681, 0.0457, 0.0404, 0.0089, 0.0069, 0.0052, 0.0049, 0.0047,
        0.0032], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.2444, 0.1788, 0.0892, 0.0632, 0.0287, 0.0285, 0.0268, 0.0161, 0.0135,
        0.0080], dtype=torch.float16),
indices=tensor([ 4569,  5442,  1390, 21405, 38982, 45883,  2398,   649,   980, 57667])), torch.return_types.topk(
values=tensor([0.2598, 0.1960, 0.1117, 0.0511, 0.0368, 0.0301, 0.0210, 0.0158, 0.0105,
        0.0066], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390,  2398, 38982,   649,   980, 57667])), torch.return_types.topk(
values=tensor([0.2432, 0.1864, 0.0840, 0.0702, 0.0314, 0.0269, 0.0256, 0.0157, 0.0126,
        0.0088], dtype=torch.float16),
indices=tensor([ 4569,  5442,  1390, 21405, 38982,  2398, 45883,   649,   980,  1872])), torch.return_types.topk(
values=tensor([0.3276, 0.1971, 0.0720, 0.0343, 0.0300, 0.0259, 0.0206, 0.0142, 0.0099,
        0.0091], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390,  2398, 38982,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.0947, 0.0809, 0.0569, 0.0395, 0.0315, 0.0291, 0.0231, 0.0183, 0.0172,
        0.0132], dtype=torch.float16),
indices=tensor([ 3991, 60824,  9971, 38982,  9919, 41445,  1111,  1390, 51174,   980])), torch.return_types.topk(
values=tensor([0.6030, 0.0368, 0.0210, 0.0120, 0.0088, 0.0079, 0.0056, 0.0049, 0.0048,
        0.0046], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,  9919,  1111, 41445,  6091, 30360])), torch.return_types.topk(
values=tensor([0.1455, 0.0985, 0.0575, 0.0371, 0.0257, 0.0236, 0.0202, 0.0132, 0.0131,
        0.0122], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919, 41445,  1111, 47727,  1390,  3617])), torch.return_types.topk(
values=tensor([0.6724, 0.0300, 0.0138, 0.0105, 0.0064, 0.0059, 0.0052, 0.0049, 0.0040,
        0.0032], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796, 38982,  6091,   110,  9919,  1111, 21058])), torch.return_types.topk(
values=tensor([0.5635, 0.1516, 0.0352, 0.0294, 0.0156, 0.0121, 0.0105, 0.0095, 0.0050,
        0.0046], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 51174,    30, 23401])), torch.return_types.topk(
values=tensor([0.6421, 0.2085, 0.0234, 0.0160, 0.0052, 0.0042, 0.0033, 0.0031, 0.0024,
        0.0023], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 51174, 21058, 60824,  9919,  4569])), torch.return_types.topk(
values=tensor([0.5854, 0.1539, 0.0313, 0.0272, 0.0151, 0.0086, 0.0084, 0.0082, 0.0064,
        0.0042], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  9919,  4569,    30, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6646, 0.2191, 0.0184, 0.0092, 0.0049, 0.0023, 0.0019, 0.0017, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 21058,  4569, 51174, 60824,  9919])), torch.return_types.topk(
values=tensor([0.2113, 0.0874, 0.0802, 0.0551, 0.0461, 0.0309, 0.0252, 0.0180, 0.0174,
        0.0118], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  1390,  2398,  3991,  9919,    30])), torch.return_types.topk(
values=tensor([0.4138, 0.1343, 0.0692, 0.0243, 0.0213, 0.0148, 0.0145, 0.0087, 0.0059,
        0.0052], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,  9919])), torch.return_types.topk(
values=tensor([0.2124, 0.0825, 0.0769, 0.0594, 0.0352, 0.0279, 0.0262, 0.0227, 0.0171,
        0.0159], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  1390,    30,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4009, 0.1671, 0.0625, 0.0250, 0.0186, 0.0117, 0.0105, 0.0057, 0.0039,
        0.0039], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  3991,  1390,  9919, 55974])), torch.return_types.topk(
values=tensor([0.8818, 0.0047, 0.0032, 0.0031, 0.0027, 0.0026, 0.0023, 0.0021, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911, 48446,    30, 33622, 29498, 30261,   409])), torch.return_types.topk(
values=tensor([0.9155, 0.0037, 0.0028, 0.0023, 0.0019, 0.0016, 0.0016, 0.0015, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 29498,  8911, 48446, 30261, 30502, 53208, 15588])), torch.return_types.topk(
values=tensor([0.8730, 0.0051, 0.0040, 0.0034, 0.0030, 0.0030, 0.0025, 0.0022, 0.0022,
        0.0015], dtype=torch.float16),
indices=tensor([41445,    80,    30,  8911, 33622, 51174, 29498, 48446, 30261, 15588])), torch.return_types.topk(
values=tensor([0.8696, 0.0065, 0.0038, 0.0038, 0.0030, 0.0026, 0.0025, 0.0015, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 48446, 30261, 15588,   336, 30502])), torch.return_types.topk(
values=tensor([0.7925, 0.0322, 0.0247, 0.0198, 0.0108, 0.0072, 0.0049, 0.0032, 0.0026,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7393, 0.0755, 0.0503, 0.0148, 0.0124, 0.0047, 0.0029, 0.0025, 0.0024,
        0.0018], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1186,  1111, 23904, 51174])), torch.return_types.topk(
values=tensor([0.7896, 0.0311, 0.0231, 0.0217, 0.0103, 0.0092, 0.0062, 0.0034, 0.0031,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,    30,   409, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.6655, 0.0814, 0.0735, 0.0158, 0.0139, 0.0115, 0.0033, 0.0027, 0.0023,
        0.0021], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1111,  1186, 23904, 55513])), torch.return_types.topk(
values=tensor([0.5073, 0.1896, 0.0353, 0.0125, 0.0083, 0.0043, 0.0042, 0.0041, 0.0041,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 15588, 34059, 20077, 30261])), torch.return_types.topk(
values=tensor([0.5273, 0.1836, 0.0198, 0.0079, 0.0070, 0.0060, 0.0051, 0.0047, 0.0039,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 15588, 34059, 60824, 30261,  7680])), torch.return_types.topk(
values=tensor([0.4885, 0.1869, 0.0377, 0.0132, 0.0130, 0.0051, 0.0047, 0.0041, 0.0041,
        0.0041], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445, 20077, 15588,  3991, 34059,  7610])), torch.return_types.topk(
values=tensor([0.5767, 0.1576, 0.0197, 0.0130, 0.0055, 0.0038, 0.0036, 0.0032, 0.0030,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 54203, 15588, 60824, 41445,  1657])), torch.return_types.topk(
values=tensor([0.5933, 0.0332, 0.0226, 0.0060, 0.0057, 0.0056, 0.0054, 0.0050, 0.0048,
        0.0043], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,  3617,    34,   213,    30, 58401,  2398])), torch.return_types.topk(
values=tensor([0.7622, 0.0137, 0.0093, 0.0041, 0.0037, 0.0034, 0.0031, 0.0021, 0.0021,
        0.0019], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34,   213,   336,  2398,  3617, 64851])), torch.return_types.topk(
values=tensor([0.6343, 0.0316, 0.0186, 0.0062, 0.0056, 0.0053, 0.0051, 0.0044, 0.0040,
        0.0039], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34, 54203,   213,  3617, 38982, 58401])), torch.return_types.topk(
values=tensor([0.7295, 0.0084, 0.0075, 0.0059, 0.0044, 0.0042, 0.0038, 0.0034, 0.0031,
        0.0031], dtype=torch.float16),
indices=tensor([30261, 41445,   336,  9971, 54203,    34,  3617,   213,  2398,   449])), torch.return_types.topk(
values=tensor([0.6240, 0.0775, 0.0512, 0.0272, 0.0113, 0.0107, 0.0107, 0.0076, 0.0057,
        0.0055], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6304, 0.0937, 0.0595, 0.0331, 0.0076, 0.0059, 0.0042, 0.0039, 0.0036,
        0.0024], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6177, 0.0709, 0.0527, 0.0243, 0.0135, 0.0127, 0.0106, 0.0087, 0.0075,
        0.0061], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6543, 0.0585, 0.0449, 0.0445, 0.0087, 0.0053, 0.0053, 0.0048, 0.0042,
        0.0030], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  3991,  1390,  1872,    57])), torch.return_types.topk(
values=tensor([8.9062e-01, 1.8950e-03, 4.5371e-04, 3.2544e-04, 9.5844e-05, 6.6519e-05,
        2.8670e-05, 2.1815e-05, 2.0146e-05, 1.6570e-05], dtype=torch.float16),
indices=tensor([   2,    7,    4,    6,   13,    5,   22, 9182,   30,   40])), torch.return_types.topk(
values=tensor([0.3066, 0.2209, 0.1060, 0.0393, 0.0260, 0.0217, 0.0201, 0.0129, 0.0090,
        0.0059], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390,  2398, 38982,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.2876, 0.2257, 0.0652, 0.0647, 0.0291, 0.0205, 0.0204, 0.0130, 0.0107,
        0.0077], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982,  2398, 45883,   649,   980,  1872])), torch.return_types.topk(
values=tensor([0.3591, 0.1984, 0.0680, 0.0314, 0.0304, 0.0230, 0.0228, 0.0121, 0.0092,
        0.0078], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390,  2398, 38982,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.2031, 0.0808, 0.0577, 0.0284, 0.0198, 0.0193, 0.0182, 0.0135, 0.0134,
        0.0130], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  1111,  3617, 47727,  4300])), torch.return_types.topk(
values=tensor([0.6968, 0.0262, 0.0159, 0.0079, 0.0074, 0.0055, 0.0037, 0.0037, 0.0034,
        0.0034], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796, 38982,  6091,  9919, 30360,  1111,   110])), torch.return_types.topk(
values=tensor([0.2593, 0.0889, 0.0502, 0.0295, 0.0185, 0.0171, 0.0147, 0.0133, 0.0119,
        0.0092], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919, 41445,  1111, 47727,  3617,  4300])), torch.return_types.topk(
values=tensor([0.7280, 0.0274, 0.0115, 0.0075, 0.0055, 0.0054, 0.0043, 0.0030, 0.0030,
        0.0025], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091, 38982,   110,  1111,  9919,  4247])), torch.return_types.topk(
values=tensor([0.6895, 0.1689, 0.0197, 0.0129, 0.0078, 0.0059, 0.0032, 0.0031, 0.0030,
        0.0022], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 51174,  9919,    30, 21058])), torch.return_types.topk(
values=tensor([0.7080, 0.1876, 0.0156, 0.0112, 0.0036, 0.0025, 0.0024, 0.0022, 0.0017,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058, 51174,  4569, 45883])), torch.return_types.topk(
values=tensor([0.6641, 0.1666, 0.0227, 0.0160, 0.0099, 0.0065, 0.0055, 0.0043, 0.0031,
        0.0024], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6973, 0.1936, 0.0161, 0.0107, 0.0043, 0.0020, 0.0019, 0.0017, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 21058, 60824,   291, 51174])), torch.return_types.topk(
values=tensor([0.2893, 0.1324, 0.0947, 0.0392, 0.0365, 0.0286, 0.0136, 0.0136, 0.0109,
        0.0095], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,  1390,    30,  3991, 27993])), torch.return_types.topk(
values=tensor([0.4539, 0.1395, 0.0724, 0.0256, 0.0202, 0.0123, 0.0099, 0.0053, 0.0038,
        0.0035], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390, 60824, 51174])), torch.return_types.topk(
values=tensor([0.2700, 0.1066, 0.0824, 0.0469, 0.0318, 0.0301, 0.0261, 0.0162, 0.0132,
        0.0124], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  1390, 27993,  3991])), torch.return_types.topk(
values=tensor([0.4343, 0.1586, 0.0570, 0.0249, 0.0211, 0.0109, 0.0107, 0.0045, 0.0036,
        0.0034], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  3991,  1390,   336,  4725])), torch.return_types.topk(
values=tensor([0.8994, 0.0046, 0.0038, 0.0027, 0.0023, 0.0023, 0.0019, 0.0013, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 29498, 51174, 48446, 33622, 30261,   409])), torch.return_types.topk(
values=tensor([9.3311e-01, 2.5406e-03, 2.4433e-03, 2.1896e-03, 1.6727e-03, 1.4534e-03,
        1.2770e-03, 9.2363e-04, 8.4782e-04, 8.1539e-04], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 51174, 30502,  2214, 30261, 48446, 53208])), torch.return_types.topk(
values=tensor([9.0088e-01, 4.1237e-03, 3.6106e-03, 3.2616e-03, 2.4719e-03, 1.8587e-03,
        1.6403e-03, 1.5774e-03, 1.3027e-03, 8.4448e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 29498, 51174, 33622, 48446, 30261, 58599])), torch.return_types.topk(
values=tensor([0.9087, 0.0039, 0.0032, 0.0031, 0.0018, 0.0013, 0.0013, 0.0012, 0.0011,
        0.0009], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 51174, 48446, 30261, 30502,  2214, 58599])), torch.return_types.topk(
values=tensor([0.8345, 0.0237, 0.0216, 0.0101, 0.0076, 0.0068, 0.0045, 0.0021, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 53208, 15588,   409,    30, 20077, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.7812, 0.0779, 0.0312, 0.0145, 0.0040, 0.0031, 0.0018, 0.0014, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111, 23904,  1186, 51174])), torch.return_types.topk(
values=tensor([0.8462, 0.0209, 0.0194, 0.0088, 0.0080, 0.0069, 0.0049, 0.0019, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 53208, 15588,    30,   409, 20077, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.7212, 0.0698, 0.0597, 0.0131, 0.0092, 0.0072, 0.0026, 0.0017, 0.0017,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111, 15597, 51174,  1186])), torch.return_types.topk(
values=tensor([0.5249, 0.2275, 0.0335, 0.0083, 0.0064, 0.0055, 0.0038, 0.0026, 0.0025,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059, 40315,  1657, 30261])), torch.return_types.topk(
values=tensor([0.6753, 0.1137, 0.0204, 0.0067, 0.0047, 0.0035, 0.0030, 0.0029, 0.0026,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 41445,  1657, 60824, 15588, 54203])), torch.return_types.topk(
values=tensor([0.5146, 0.2213, 0.0364, 0.0111, 0.0067, 0.0049, 0.0039, 0.0028, 0.0028,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059, 30261,  1657, 20077])), torch.return_types.topk(
values=tensor([0.5820, 0.1707, 0.0219, 0.0128, 0.0054, 0.0033, 0.0028, 0.0027, 0.0026,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 54203,  1657, 60824, 15588, 23904])), torch.return_types.topk(
values=tensor([0.6753, 0.0175, 0.0155, 0.0053, 0.0051, 0.0047, 0.0046, 0.0045, 0.0044,
        0.0032], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 58401,   213,    30, 54203,  3617,   336])), torch.return_types.topk(
values=tensor([0.7837, 0.0093, 0.0071, 0.0035, 0.0034, 0.0033, 0.0026, 0.0020, 0.0020,
        0.0017], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,   213,    34,   336, 64851, 58401,  2398])), torch.return_types.topk(
values=tensor([0.7310, 0.0160, 0.0119, 0.0046, 0.0046, 0.0041, 0.0040, 0.0036, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34,   213, 58401, 54203,  3617, 38982])), torch.return_types.topk(
values=tensor([0.7983, 0.0051, 0.0050, 0.0037, 0.0035, 0.0033, 0.0033, 0.0021, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34,   336, 54203,   213, 64851,  3617,   449])), torch.return_types.topk(
values=tensor([0.6333, 0.0831, 0.0405, 0.0238, 0.0119, 0.0109, 0.0103, 0.0084, 0.0057,
        0.0055], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,   980,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6401, 0.0974, 0.0546, 0.0231, 0.0076, 0.0071, 0.0050, 0.0036, 0.0033,
        0.0023], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6284, 0.0851, 0.0396, 0.0220, 0.0119, 0.0119, 0.0117, 0.0099, 0.0067,
        0.0054], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   649,   980,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6660, 0.0771, 0.0385, 0.0284, 0.0076, 0.0073, 0.0059, 0.0043, 0.0039,
        0.0028], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  3991,  1390,  3175])), torch.return_types.topk(
values=tensor([0.2612, 0.2417, 0.0743, 0.0552, 0.0324, 0.0194, 0.0167, 0.0156, 0.0104,
        0.0089], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,   649,  2398,   980,  1872])), torch.return_types.topk(
values=tensor([8.8477e-01, 3.7003e-03, 2.3441e-03, 1.3771e-03, 8.4543e-04, 3.0375e-04,
        2.5082e-04, 2.1970e-04, 1.9920e-04, 1.3530e-04], dtype=torch.float16),
indices=tensor([  245,  1677,   130,   845, 57880,   215,  5159,  5144,   102, 28420])), torch.return_types.topk(
values=tensor([0.2527, 0.2264, 0.0795, 0.0609, 0.0373, 0.0180, 0.0171, 0.0165, 0.0103,
        0.0101], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,   649,  2398,  1872,   980])), torch.return_types.topk(
values=tensor([0.2842, 0.2249, 0.0909, 0.0302, 0.0286, 0.0260, 0.0168, 0.0165, 0.0112,
        0.0085], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 38982, 45883,  1390,  2398,   649,  3175,   980])), torch.return_types.topk(
values=tensor([0.3877, 0.0541, 0.0521, 0.0212, 0.0126, 0.0109, 0.0108, 0.0096, 0.0096,
        0.0080], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  3617, 41445,  9919,  1111, 47727,  4300])), torch.return_types.topk(
values=tensor([0.7793, 0.0152, 0.0114, 0.0084, 0.0060, 0.0047, 0.0042, 0.0022, 0.0021,
        0.0019], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091, 38982,   110, 21058,  3617,  9919])), torch.return_types.topk(
values=tensor([0.4353, 0.0553, 0.0455, 0.0215, 0.0115, 0.0102, 0.0096, 0.0090, 0.0086,
        0.0067], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  3617, 41445,  9919, 47727,  1111,    30])), torch.return_types.topk(
values=tensor([0.7651, 0.0199, 0.0106, 0.0080, 0.0056, 0.0050, 0.0047, 0.0025, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091,   110, 38982,  9919,  4247,  1111])), torch.return_types.topk(
values=tensor([0.7026, 0.1694, 0.0204, 0.0114, 0.0054, 0.0046, 0.0037, 0.0030, 0.0024,
        0.0024], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 21058, 51174])), torch.return_types.topk(
values=tensor([0.6929, 0.1909, 0.0169, 0.0138, 0.0034, 0.0026, 0.0023, 0.0023, 0.0015,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 21058, 60824,  1013, 51174, 56796,  9919])), torch.return_types.topk(
values=tensor([0.6890, 0.1688, 0.0223, 0.0133, 0.0058, 0.0057, 0.0035, 0.0033, 0.0023,
        0.0023], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,    30,  1013,  4569,  9919, 21058, 51174])), torch.return_types.topk(
values=tensor([0.6992, 0.1897, 0.0175, 0.0117, 0.0030, 0.0026, 0.0017, 0.0016, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 21058, 60824, 51174,   291,  4569])), torch.return_types.topk(
values=tensor([0.3530, 0.1174, 0.0859, 0.0328, 0.0274, 0.0235, 0.0193, 0.0108, 0.0097,
        0.0077], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  3991,  1390,  9919])), torch.return_types.topk(
values=tensor([0.5034, 0.1132, 0.0692, 0.0182, 0.0129, 0.0127, 0.0108, 0.0039, 0.0038,
        0.0037], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  3991,  4569, 38982,  1390,    80, 21058])), torch.return_types.topk(
values=tensor([0.3442, 0.1010, 0.0745, 0.0414, 0.0263, 0.0247, 0.0242, 0.0120, 0.0116,
        0.0090], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,    30,  4569,  3991,  1390, 27993])), torch.return_types.topk(
values=tensor([0.4731, 0.1293, 0.0597, 0.0194, 0.0150, 0.0133, 0.0123, 0.0037, 0.0036,
        0.0036], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  3991,  1390, 55974,  9919])), torch.return_types.topk(
values=tensor([0.9097, 0.0048, 0.0027, 0.0019, 0.0016, 0.0016, 0.0015, 0.0013, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 51174, 48446, 29498,    30, 30261, 33622,   409])), torch.return_types.topk(
values=tensor([9.3701e-01, 2.8687e-03, 1.6661e-03, 1.5354e-03, 1.3762e-03, 1.1587e-03,
        9.6464e-04, 9.5320e-04, 7.2813e-04, 7.1383e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 51174, 29498,  2214, 30261, 30502, 48446,  1828])), torch.return_types.topk(
values=tensor([0.9097, 0.0046, 0.0027, 0.0022, 0.0019, 0.0018, 0.0014, 0.0013, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80,  8911,    30, 51174, 29498, 48446, 30261,  1828, 33622])), torch.return_types.topk(
values=tensor([0.8901, 0.0049, 0.0031, 0.0030, 0.0023, 0.0020, 0.0019, 0.0012, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588,   336,  9402])), torch.return_types.topk(
values=tensor([0.8555, 0.0193, 0.0176, 0.0083, 0.0074, 0.0039, 0.0036, 0.0022, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([8.3398e-01, 4.7058e-02, 2.5986e-02, 1.0017e-02, 3.9864e-03, 2.7275e-03,
        1.7891e-03, 1.1377e-03, 1.1330e-03, 8.1301e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111, 51174,  1186, 23904])), torch.return_types.topk(
values=tensor([0.8613, 0.0183, 0.0180, 0.0072, 0.0060, 0.0058, 0.0044, 0.0021, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588,   409, 20077,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.7314, 0.0601, 0.0564, 0.0105, 0.0104, 0.0087, 0.0028, 0.0019, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 30502, 20077,  1111, 15597,  1186, 51174])), torch.return_types.topk(
values=tensor([0.5674, 0.1857, 0.0274, 0.0067, 0.0063, 0.0054, 0.0030, 0.0029, 0.0027,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 34059,  3617, 40315, 20077])), torch.return_types.topk(
values=tensor([0.5942, 0.1550, 0.0163, 0.0076, 0.0055, 0.0054, 0.0039, 0.0038, 0.0028,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 41445, 15588, 34059, 30261,  3991])), torch.return_types.topk(
values=tensor([0.5850, 0.1650, 0.0269, 0.0092, 0.0061, 0.0052, 0.0030, 0.0028, 0.0028,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059,  1657,  3617, 15588])), torch.return_types.topk(
values=tensor([0.4988, 0.2145, 0.0159, 0.0130, 0.0046, 0.0042, 0.0038, 0.0035, 0.0034,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 60824, 15588, 41445,  7680,  3991])), torch.return_types.topk(
values=tensor([0.6523, 0.0208, 0.0178, 0.0071, 0.0064, 0.0045, 0.0044, 0.0042, 0.0041,
        0.0040], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617,   213, 54203,    30, 58401,  2398])), torch.return_types.topk(
values=tensor([0.7529, 0.0122, 0.0102, 0.0044, 0.0038, 0.0034, 0.0027, 0.0025, 0.0024,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   213,  3617,   336,  2398, 64851])), torch.return_types.topk(
values=tensor([0.6787, 0.0188, 0.0167, 0.0070, 0.0059, 0.0054, 0.0045, 0.0038, 0.0035,
        0.0034], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,  3617,   213, 54203, 58401,  2398])), torch.return_types.topk(
values=tensor([0.7188, 0.0074, 0.0072, 0.0062, 0.0048, 0.0046, 0.0038, 0.0034, 0.0032,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,   336,  9971,  3617,    34, 54203,  2398,   213,   449])), torch.return_types.topk(
values=tensor([0.6479, 0.0683, 0.0424, 0.0320, 0.0121, 0.0111, 0.0110, 0.0072, 0.0054,
        0.0041], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6519, 0.0749, 0.0709, 0.0284, 0.0081, 0.0069, 0.0040, 0.0038, 0.0029,
        0.0021], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  2398])), torch.return_types.topk(
values=tensor([0.6353, 0.0735, 0.0388, 0.0314, 0.0133, 0.0119, 0.0113, 0.0088, 0.0064,
        0.0045], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6670, 0.0687, 0.0491, 0.0351, 0.0080, 0.0068, 0.0051, 0.0043, 0.0033,
        0.0029], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.2725, 0.2386, 0.0637, 0.0590, 0.0260, 0.0222, 0.0205, 0.0166, 0.0130,
        0.0078], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 45883, 38982,  2398,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.2734, 0.2302, 0.1022, 0.0453, 0.0256, 0.0232, 0.0189, 0.0169, 0.0098,
        0.0080], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390,  2398, 38982,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.2566, 0.2283, 0.0696, 0.0624, 0.0268, 0.0237, 0.0216, 0.0175, 0.0132,
        0.0094], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,  2398,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.3027, 0.2163, 0.0834, 0.0353, 0.0284, 0.0235, 0.0192, 0.0155, 0.0103,
        0.0099], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390,  2398, 38982,   649,  3175,   980])), torch.return_types.topk(
values=tensor([0.4702, 0.0571, 0.0383, 0.0135, 0.0125, 0.0111, 0.0079, 0.0073, 0.0067,
        0.0057], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  1111,  9919, 47727,  4300])), torch.return_types.topk(
values=tensor([0.7822, 0.0125, 0.0125, 0.0070, 0.0052, 0.0049, 0.0035, 0.0022, 0.0020,
        0.0020], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091,   110, 38982,  3617,  9919, 30360])), torch.return_types.topk(
values=tensor([0.5220, 0.0501, 0.0352, 0.0118, 0.0113, 0.0089, 0.0070, 0.0063, 0.0063,
        0.0059], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,  3617, 38982, 41445,  6091,  1111, 47727,  9919])), torch.return_types.topk(
values=tensor([0.7627, 0.0153, 0.0118, 0.0075, 0.0058, 0.0053, 0.0032, 0.0022, 0.0020,
        0.0020], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,   110,  6091, 38982,  9919,  1111,  3617])), torch.return_types.topk(
values=tensor([0.6768, 0.1969, 0.0224, 0.0098, 0.0059, 0.0040, 0.0023, 0.0023, 0.0023,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 21058])), torch.return_types.topk(
values=tensor([0.6460, 0.2268, 0.0225, 0.0113, 0.0031, 0.0028, 0.0028, 0.0021, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058, 51174,  4569, 45883])), torch.return_types.topk(
values=tensor([0.6704, 0.1876, 0.0219, 0.0110, 0.0070, 0.0045, 0.0035, 0.0025, 0.0025,
        0.0024], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 60824, 51174])), torch.return_types.topk(
values=tensor([0.6831, 0.2083, 0.0179, 0.0097, 0.0036, 0.0019, 0.0018, 0.0017, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 21058,  4569, 60824, 51174,   291])), torch.return_types.topk(
values=tensor([0.4121, 0.1228, 0.0728, 0.0261, 0.0253, 0.0217, 0.0112, 0.0099, 0.0095,
        0.0058], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,    30,  1390,  3991, 27993])), torch.return_types.topk(
values=tensor([0.5425, 0.1110, 0.0545, 0.0205, 0.0122, 0.0096, 0.0072, 0.0039, 0.0036,
        0.0032], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([0.3838, 0.1125, 0.0710, 0.0276, 0.0242, 0.0205, 0.0199, 0.0105, 0.0097,
        0.0068], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398, 38982,  4569,    30,  1390,  3991, 27993])), torch.return_types.topk(
values=tensor([0.4988, 0.1281, 0.0514, 0.0217, 0.0167, 0.0101, 0.0087, 0.0040, 0.0030,
        0.0029], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.9028, 0.0050, 0.0028, 0.0023, 0.0018, 0.0018, 0.0016, 0.0015, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 51174, 48446, 29498,    30, 30261, 33622,  1828])), torch.return_types.topk(
values=tensor([9.3359e-01, 3.6983e-03, 1.9255e-03, 1.7128e-03, 1.3819e-03, 1.2341e-03,
        1.1501e-03, 1.0185e-03, 9.7609e-04, 9.1314e-04], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 29498,  8911, 30261, 30502, 53208, 48446,  2214])), torch.return_types.topk(
values=tensor([0.9062, 0.0046, 0.0026, 0.0022, 0.0021, 0.0019, 0.0015, 0.0015, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 51174,    30, 29498, 48446, 30261,  1828, 33622])), torch.return_types.topk(
values=tensor([0.8872, 0.0052, 0.0032, 0.0029, 0.0026, 0.0020, 0.0020, 0.0013, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 30261, 48446, 15588, 53208, 30502])), torch.return_types.topk(
values=tensor([0.8481, 0.0217, 0.0204, 0.0080, 0.0069, 0.0042, 0.0040, 0.0022, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588,   409, 20077,    30, 30502,  1111, 15597, 55513])), torch.return_types.topk(
values=tensor([0.8125, 0.0588, 0.0285, 0.0122, 0.0040, 0.0028, 0.0018, 0.0013, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111, 51174,  1186, 23904])), torch.return_types.topk(
values=tensor([0.8584, 0.0208, 0.0185, 0.0070, 0.0057, 0.0057, 0.0046, 0.0021, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588,   409,    30, 20077, 30502,  1111, 15597, 55513])), torch.return_types.topk(
values=tensor([0.7202, 0.0649, 0.0605, 0.0116, 0.0098, 0.0081, 0.0028, 0.0020, 0.0018,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111, 15597, 51174,  1186])), torch.return_types.topk(
values=tensor([0.5547, 0.1948, 0.0320, 0.0071, 0.0064, 0.0049, 0.0032, 0.0030, 0.0029,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 34059, 15588, 20077, 30261])), torch.return_types.topk(
values=tensor([0.5908, 0.1554, 0.0187, 0.0071, 0.0059, 0.0053, 0.0044, 0.0040, 0.0031,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 41445, 60824, 15588, 34059, 30261,  3991])), torch.return_types.topk(
values=tensor([0.5723, 0.1692, 0.0318, 0.0095, 0.0068, 0.0045, 0.0032, 0.0031, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059, 15588, 20077,  3991])), torch.return_types.topk(
values=tensor([0.5151, 0.2050, 0.0174, 0.0115, 0.0045, 0.0040, 0.0038, 0.0037, 0.0032,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 15588, 60824, 41445, 30261,  7680])), torch.return_types.topk(
values=tensor([0.6753, 0.0206, 0.0184, 0.0058, 0.0057, 0.0043, 0.0041, 0.0038, 0.0038,
        0.0036], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617, 54203,   213,    30, 58401,   336])), torch.return_types.topk(
values=tensor([0.7495, 0.0150, 0.0090, 0.0037, 0.0037, 0.0035, 0.0028, 0.0027, 0.0025,
        0.0023], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336, 54203,  3617,    34,  2398,   213, 58401])), torch.return_types.topk(
values=tensor([0.6968, 0.0196, 0.0170, 0.0058, 0.0053, 0.0048, 0.0041, 0.0038, 0.0032,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,  3617,   213, 54203, 58401,   336])), torch.return_types.topk(
values=tensor([0.7368, 0.0075, 0.0067, 0.0065, 0.0042, 0.0038, 0.0037, 0.0030, 0.0029,
        0.0029], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,  3617,    34, 54203,   213,  2398,   449])), torch.return_types.topk(
values=tensor([0.6567, 0.0620, 0.0423, 0.0291, 0.0119, 0.0107, 0.0104, 0.0067, 0.0061,
        0.0045], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7598, 0.0482, 0.0353, 0.0248, 0.0066, 0.0051, 0.0035, 0.0032, 0.0026,
        0.0017], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.6543, 0.0668, 0.0372, 0.0285, 0.0124, 0.0106, 0.0103, 0.0078, 0.0066,
        0.0048], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7710, 0.0406, 0.0299, 0.0224, 0.0071, 0.0051, 0.0043, 0.0035, 0.0028,
        0.0023], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.2778, 0.2321, 0.0610, 0.0601, 0.0247, 0.0247, 0.0175, 0.0160, 0.0129,
        0.0085], dtype=torch.float16),
indices=tensor([ 4569,  5442,  1390, 21405, 45883, 38982,  2398,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.7627, 0.0829, 0.0114, 0.0046, 0.0043, 0.0039, 0.0034, 0.0027, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([17383, 26309,  1322,   303, 32025,  1500, 74425, 62999,   246, 30647])), torch.return_types.topk(
values=tensor([0.2598, 0.2294, 0.0668, 0.0622, 0.0292, 0.0229, 0.0184, 0.0165, 0.0131,
        0.0100], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,  2398,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.7593, 0.0752, 0.0131, 0.0055, 0.0037, 0.0029, 0.0026, 0.0025, 0.0023,
        0.0014], dtype=torch.float16),
indices=tensor([68835,   779, 21871, 44514,  3097, 11218, 61629,     5,   102,  1109])), torch.return_types.topk(
values=tensor([0.4492, 0.0594, 0.0411, 0.0145, 0.0140, 0.0109, 0.0085, 0.0078, 0.0076,
        0.0059], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982,  3617, 41445,  1111,  9919, 47727,  4300])), torch.return_types.topk(
values=tensor([0.7764, 0.0135, 0.0123, 0.0077, 0.0057, 0.0043, 0.0041, 0.0022, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091,   110, 38982, 30360,  3617,  9919])), torch.return_types.topk(
values=tensor([0.5029, 0.0518, 0.0373, 0.0130, 0.0125, 0.0090, 0.0074, 0.0071, 0.0070,
        0.0061], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982,  3617, 41445,  6091, 47727,  1111,  9919])), torch.return_types.topk(
values=tensor([0.7534, 0.0157, 0.0127, 0.0074, 0.0056, 0.0054, 0.0038, 0.0024, 0.0022,
        0.0022], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,   110,  6091, 38982,  9919,  1111,  3617])), torch.return_types.topk(
values=tensor([0.6821, 0.1986, 0.0208, 0.0091, 0.0054, 0.0039, 0.0026, 0.0022, 0.0021,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30,  9919, 51174, 21058])), torch.return_types.topk(
values=tensor([0.6479, 0.2328, 0.0202, 0.0104, 0.0029, 0.0028, 0.0026, 0.0020, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824, 21058, 51174,  4569, 56796])), torch.return_types.topk(
values=tensor([0.6885, 0.1853, 0.0189, 0.0097, 0.0058, 0.0043, 0.0033, 0.0023, 0.0021,
        0.0021], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569, 60824,  9919, 51174])), torch.return_types.topk(
values=tensor([0.7300, 0.1832, 0.0116, 0.0090, 0.0040, 0.0019, 0.0016, 0.0013, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174, 21058,  9919])), torch.return_types.topk(
values=tensor([0.3831, 0.1324, 0.0784, 0.0253, 0.0251, 0.0241, 0.0123, 0.0113, 0.0099,
        0.0062], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,    30,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.5142, 0.1260, 0.0586, 0.0184, 0.0117, 0.0102, 0.0081, 0.0045, 0.0040,
        0.0036], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([0.4905, 0.1129, 0.0513, 0.0209, 0.0133, 0.0116, 0.0107, 0.0054, 0.0051,
        0.0038], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569, 38982,  3991,  1390,    80, 13818])), torch.return_types.topk(
values=tensor([0.4832, 0.1406, 0.0547, 0.0196, 0.0167, 0.0106, 0.0091, 0.0047, 0.0034,
        0.0029], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,  2347])), torch.return_types.topk(
values=tensor([0.8955, 0.0057, 0.0031, 0.0027, 0.0019, 0.0017, 0.0017, 0.0016, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911, 48446, 30261, 29498,    30, 33622, 15588])), torch.return_types.topk(
values=tensor([0.9321, 0.0034, 0.0025, 0.0017, 0.0014, 0.0014, 0.0012, 0.0012, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 29498, 30502, 15588, 53208, 30261,  8911, 48446])), torch.return_types.topk(
values=tensor([0.8950, 0.0054, 0.0030, 0.0026, 0.0023, 0.0019, 0.0018, 0.0017, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911,    30, 29498, 30261, 48446, 33622,  1111])), torch.return_types.topk(
values=tensor([0.8936, 0.0055, 0.0031, 0.0026, 0.0025, 0.0020, 0.0016, 0.0016, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588,  9402,   409])), torch.return_types.topk(
values=tensor([0.8320, 0.0259, 0.0184, 0.0124, 0.0083, 0.0046, 0.0045, 0.0034, 0.0016,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8179, 0.0414, 0.0371, 0.0110, 0.0072, 0.0032, 0.0030, 0.0020, 0.0014,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 51174, 23904])), torch.return_types.topk(
values=tensor([0.8364, 0.0241, 0.0179, 0.0110, 0.0077, 0.0067, 0.0055, 0.0035, 0.0015,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7344, 0.0673, 0.0434, 0.0118, 0.0108, 0.0089, 0.0032, 0.0017, 0.0017,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,  1111,  1186, 15597, 51174])), torch.return_types.topk(
values=tensor([0.5464, 0.1746, 0.0336, 0.0102, 0.0074, 0.0050, 0.0044, 0.0040, 0.0034,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077,  7610, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.5718, 0.1552, 0.0213, 0.0086, 0.0067, 0.0066, 0.0062, 0.0045, 0.0039,
        0.0037], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588, 60824,  7610, 20077,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5635, 0.1565, 0.0336, 0.0103, 0.0093, 0.0047, 0.0041, 0.0039, 0.0035,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445, 20077,  7610, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.5044, 0.2119, 0.0193, 0.0098, 0.0050, 0.0045, 0.0043, 0.0039, 0.0038,
        0.0037], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 20077, 41445, 34059, 60824,  7680])), torch.return_types.topk(
values=tensor([0.6436, 0.0264, 0.0231, 0.0067, 0.0055, 0.0046, 0.0043, 0.0043, 0.0035,
        0.0035], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617,    30, 54203,   213, 58401, 41565])), torch.return_types.topk(
values=tensor([0.7095, 0.0235, 0.0137, 0.0037, 0.0033, 0.0033, 0.0030, 0.0029, 0.0028,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34,  3617, 41565,   336, 60824, 38982])), torch.return_types.topk(
values=tensor([0.6655, 0.0239, 0.0211, 0.0067, 0.0062, 0.0046, 0.0043, 0.0039, 0.0032,
        0.0032], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,   213,  3617, 54203, 38982, 58401])), torch.return_types.topk(
values=tensor([0.7158, 0.0097, 0.0093, 0.0048, 0.0047, 0.0039, 0.0037, 0.0032, 0.0031,
        0.0029], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,    34,  3617, 54203,   213, 64851, 41565])), torch.return_types.topk(
values=tensor([0.6465, 0.0625, 0.0397, 0.0353, 0.0125, 0.0108, 0.0094, 0.0077, 0.0064,
        0.0047], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7886, 0.0405, 0.0374, 0.0178, 0.0053, 0.0038, 0.0033, 0.0028, 0.0027,
        0.0016], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6445, 0.0648, 0.0355, 0.0344, 0.0124, 0.0113, 0.0096, 0.0091, 0.0069,
        0.0049], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7998, 0.0323, 0.0249, 0.0225, 0.0056, 0.0041, 0.0035, 0.0033, 0.0027,
        0.0017], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([8.9941e-01, 1.7464e-04, 4.5538e-05, 3.0339e-05, 9.0003e-06, 7.6294e-06,
        6.7353e-06, 5.6624e-06, 4.7684e-06, 4.7088e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   30])), torch.return_types.topk(
values=tensor([8.4473e-01, 4.9561e-02, 7.1411e-03, 2.5463e-03, 1.9217e-03, 5.4646e-04,
        5.4216e-04, 3.8290e-04, 2.8229e-04, 2.3127e-04], dtype=torch.float16),
indices=tensor([41742,   130, 11926, 65856,   245, 12058, 35139, 47464, 59268, 15538])), torch.return_types.topk(
values=tensor([8.9795e-01, 3.3417e-03, 4.1986e-04, 3.6335e-04, 1.6499e-04, 9.7811e-05,
        8.6606e-05, 4.7922e-05, 2.7120e-05, 2.6405e-05], dtype=torch.float16),
indices=tensor([   6, 9182,    2,    4,    5,    7, 2207, 3882,   40,  323])), torch.return_types.topk(
values=tensor([8.9551e-01, 1.8738e-02, 3.7766e-03, 3.1548e-03, 2.4204e-03, 1.8406e-03,
        1.6432e-03, 5.4216e-04, 5.3978e-04, 4.6349e-04], dtype=torch.float16),
indices=tensor([  130, 47464, 65856,   131, 41742, 11926, 32357,  4231,   210, 12058])), torch.return_types.topk(
values=tensor([0.3635, 0.0688, 0.0540, 0.0181, 0.0179, 0.0132, 0.0122, 0.0112, 0.0086,
        0.0072], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 41445, 38982,  1111,  3617,  9919, 47727,  4300])), torch.return_types.topk(
values=tensor([0.7451, 0.0206, 0.0122, 0.0057, 0.0055, 0.0048, 0.0042, 0.0038, 0.0033,
        0.0029], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091, 56796,  1111,  9919, 41445, 30360])), torch.return_types.topk(
values=tensor([0.4211, 0.0641, 0.0488, 0.0159, 0.0144, 0.0109, 0.0106, 0.0091, 0.0081,
        0.0060], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  1111,  3617,  9919, 47727,  4300])), torch.return_types.topk(
values=tensor([0.7520, 0.0180, 0.0123, 0.0048, 0.0045, 0.0041, 0.0035, 0.0033, 0.0030,
        0.0027], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  6091, 38982, 56796,   110,  1111,  9919,  3617])), torch.return_types.topk(
values=tensor([0.6484, 0.1978, 0.0259, 0.0134, 0.0059, 0.0051, 0.0036, 0.0032, 0.0030,
        0.0022], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919,    30, 51174, 21058])), torch.return_types.topk(
values=tensor([0.6719, 0.1970, 0.0176, 0.0162, 0.0046, 0.0038, 0.0032, 0.0023, 0.0023,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013, 51174,  9919, 21058,  4569])), torch.return_types.topk(
values=tensor([0.6411, 0.1910, 0.0247, 0.0146, 0.0068, 0.0053, 0.0043, 0.0036, 0.0030,
        0.0025], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 51174, 60824])), torch.return_types.topk(
values=tensor([0.7319, 0.1808, 0.0118, 0.0091, 0.0035, 0.0021, 0.0015, 0.0014, 0.0014,
        0.0010], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569,  9919, 51174, 21058])), torch.return_types.topk(
values=tensor([0.3516, 0.1224, 0.0784, 0.0286, 0.0261, 0.0192, 0.0151, 0.0131, 0.0121,
        0.0084], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,  1390,    30,  3991,  9919])), torch.return_types.topk(
values=tensor([0.3857, 0.1431, 0.0895, 0.0179, 0.0158, 0.0146, 0.0138, 0.0076, 0.0069,
        0.0067], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  3991, 38982,  4569,  2398, 60824,  1390,    80])), torch.return_types.topk(
values=tensor([0.3223, 0.1140, 0.0753, 0.0286, 0.0233, 0.0214, 0.0198, 0.0155, 0.0127,
        0.0085], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,    30,  2398,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4207, 0.1536, 0.0772, 0.0198, 0.0152, 0.0145, 0.0135, 0.0059, 0.0047,
        0.0044], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398,  3991, 38982,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([0.8647, 0.0062, 0.0049, 0.0032, 0.0029, 0.0028, 0.0026, 0.0026, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911,    30, 33622, 30261, 48446,  1111, 15588])), torch.return_types.topk(
values=tensor([0.9102, 0.0040, 0.0039, 0.0021, 0.0021, 0.0020, 0.0020, 0.0017, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 51174,    80, 29498, 15588, 30502, 53208, 30261, 48446,  8911])), torch.return_types.topk(
values=tensor([0.8511, 0.0059, 0.0054, 0.0043, 0.0033, 0.0032, 0.0029, 0.0029, 0.0024,
        0.0024], dtype=torch.float16),
indices=tensor([41445,    80, 51174,    30, 33622,  8911, 30261,  1111, 15588, 48446])), torch.return_types.topk(
values=tensor([0.8730, 0.0064, 0.0035, 0.0033, 0.0031, 0.0028, 0.0020, 0.0020, 0.0017,
        0.0015], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 51174,  8911, 48446, 30261, 15588,   409,  9402])), torch.return_types.topk(
values=tensor([0.7910, 0.0337, 0.0228, 0.0200, 0.0091, 0.0079, 0.0052, 0.0051, 0.0022,
        0.0018], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8306, 0.0327, 0.0307, 0.0178, 0.0120, 0.0041, 0.0026, 0.0021, 0.0019,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,  1186,   409,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7803, 0.0346, 0.0223, 0.0218, 0.0114, 0.0084, 0.0068, 0.0062, 0.0025,
        0.0020], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,    30,   409, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.6982, 0.0765, 0.0569, 0.0136, 0.0127, 0.0093, 0.0042, 0.0021, 0.0021,
        0.0018], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,  1111,  1186, 51174, 15597])), torch.return_types.topk(
values=tensor([0.4849, 0.1729, 0.0389, 0.0158, 0.0114, 0.0060, 0.0057, 0.0054, 0.0041,
        0.0041], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991,  7610, 30261])), torch.return_types.topk(
values=tensor([0.4988, 0.1685, 0.0248, 0.0125, 0.0094, 0.0080, 0.0068, 0.0056, 0.0051,
        0.0047], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588, 60824,  7610,  3991, 20077, 34059])), torch.return_types.topk(
values=tensor([0.4854, 0.1564, 0.0383, 0.0156, 0.0154, 0.0064, 0.0061, 0.0061, 0.0044,
        0.0042], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077,  3991, 15588,  1111, 30261])), torch.return_types.topk(
values=tensor([0.4541, 0.2213, 0.0198, 0.0112, 0.0057, 0.0051, 0.0049, 0.0045, 0.0043,
        0.0041], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 41445,  7680, 34059, 20077, 60824])), torch.return_types.topk(
values=tensor([0.5869, 0.0352, 0.0244, 0.0064, 0.0064, 0.0054, 0.0051, 0.0050, 0.0049,
        0.0046], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,  3617,    34,   213,  1390, 54203, 38982])), torch.return_types.topk(
values=tensor([0.6509, 0.0312, 0.0132, 0.0047, 0.0044, 0.0039, 0.0037, 0.0036, 0.0032,
        0.0031], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,   336,  3617, 38982,   213,  1111, 41565])), torch.return_types.topk(
values=tensor([0.6011, 0.0334, 0.0231, 0.0086, 0.0056, 0.0055, 0.0049, 0.0049, 0.0048,
        0.0047], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34,   213, 38982,  3617,  1390, 54203])), torch.return_types.topk(
values=tensor([0.6831, 0.0105, 0.0078, 0.0073, 0.0045, 0.0045, 0.0041, 0.0039, 0.0033,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,  3617,    34, 54203,   213,  2398, 64851])), torch.return_types.topk(
values=tensor([0.5913, 0.0764, 0.0463, 0.0352, 0.0168, 0.0132, 0.0116, 0.0083, 0.0076,
        0.0052], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7554, 0.0472, 0.0394, 0.0219, 0.0064, 0.0048, 0.0040, 0.0035, 0.0034,
        0.0019], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.5732, 0.0820, 0.0428, 0.0355, 0.0177, 0.0134, 0.0124, 0.0103, 0.0086,
        0.0058], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7739, 0.0345, 0.0289, 0.0234, 0.0065, 0.0044, 0.0044, 0.0041, 0.0031,
        0.0019], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,  1390,   649,  3991,  3175])), torch.return_types.topk(
values=tensor([8.9795e-01, 1.6129e-04, 4.8816e-05, 2.7478e-05, 9.6560e-06, 7.3314e-06,
        6.9141e-06, 5.4240e-06, 4.8280e-06, 4.4703e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   30])), torch.return_types.topk(
values=tensor([0.8945, 0.0073, 0.0063, 0.0054, 0.0042, 0.0035, 0.0033, 0.0023, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([60740, 30845, 72635, 76504, 50539, 52689, 66255, 11102, 48760, 62861])), torch.return_types.topk(
values=tensor([8.9746e-01, 2.9926e-03, 4.4489e-04, 4.2295e-04, 1.8835e-04, 9.8526e-05,
        9.1791e-05, 4.5836e-05, 3.2246e-05, 2.6643e-05], dtype=torch.float16),
indices=tensor([   6, 9182,    4,    2,    5,    7, 2207, 3882,  323,   40])), torch.return_types.topk(
values=tensor([0.7119, 0.1600, 0.0152, 0.0032, 0.0018, 0.0017, 0.0016, 0.0015, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([30845, 11102, 72635, 65578, 76504,  3097, 50539, 12055, 72651,  1277])), torch.return_types.topk(
values=tensor([0.2218, 0.0816, 0.0602, 0.0284, 0.0249, 0.0198, 0.0179, 0.0128, 0.0113,
        0.0110], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919,  3617, 47727, 51174])), torch.return_types.topk(
values=tensor([0.6626, 0.0269, 0.0150, 0.0084, 0.0084, 0.0068, 0.0054, 0.0051, 0.0041,
        0.0036], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,  6091,  9919,  1111, 41445,   110])), torch.return_types.topk(
values=tensor([0.2573, 0.0797, 0.0583, 0.0280, 0.0211, 0.0178, 0.0156, 0.0113, 0.0108,
        0.0096], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919, 47727,  3617, 51174])), torch.return_types.topk(
values=tensor([0.6699, 0.0276, 0.0127, 0.0069, 0.0060, 0.0056, 0.0052, 0.0046, 0.0038,
        0.0034], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091, 56796,  1111,  9919,  4300, 30360])), torch.return_types.topk(
values=tensor([0.6558, 0.1594, 0.0271, 0.0198, 0.0081, 0.0058, 0.0050, 0.0047, 0.0046,
        0.0027], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.6802, 0.1628, 0.0229, 0.0178, 0.0060, 0.0059, 0.0047, 0.0030, 0.0028,
        0.0021], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013, 51174,  9919, 21058, 23401])), torch.return_types.topk(
values=tensor([0.6484, 0.1459, 0.0248, 0.0222, 0.0095, 0.0085, 0.0053, 0.0048, 0.0047,
        0.0030], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569, 51174,  9919, 23401])), torch.return_types.topk(
values=tensor([0.7451, 0.1599, 0.0119, 0.0103, 0.0049, 0.0023, 0.0017, 0.0016, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.2827, 0.1000, 0.0903, 0.0395, 0.0300, 0.0234, 0.0228, 0.0174, 0.0153,
        0.0107], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  1390,    30,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4177, 0.1169, 0.0698, 0.0185, 0.0158, 0.0150, 0.0146, 0.0096, 0.0060,
        0.0057], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  3991, 38982,  4569,  1390, 51174,    80])), torch.return_types.topk(
values=tensor([0.2413, 0.0901, 0.0861, 0.0461, 0.0275, 0.0269, 0.0245, 0.0243, 0.0158,
        0.0114], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,    30,  4569,  1390,  2398,  3991, 27993])), torch.return_types.topk(
values=tensor([0.3835, 0.1503, 0.0792, 0.0216, 0.0206, 0.0170, 0.0158, 0.0077, 0.0044,
        0.0043], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,  3991,  1390,    80,  9919])), torch.return_types.topk(
values=tensor([0.9067, 0.0039, 0.0026, 0.0023, 0.0019, 0.0019, 0.0016, 0.0016, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911, 48446, 33622, 29498,    30, 30261, 15588])), torch.return_types.topk(
values=tensor([0.9312, 0.0026, 0.0023, 0.0019, 0.0018, 0.0016, 0.0013, 0.0013, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30502, 29498, 53208,  8911, 15588, 48446, 30261])), torch.return_types.topk(
values=tensor([0.8936, 0.0040, 0.0029, 0.0026, 0.0024, 0.0024, 0.0021, 0.0019, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 33622,  8911,    30, 29498, 48446, 15588, 30261])), torch.return_types.topk(
values=tensor([0.8926, 0.0049, 0.0033, 0.0028, 0.0024, 0.0024, 0.0017, 0.0015, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588,   409, 53208])), torch.return_types.topk(
values=tensor([0.8203, 0.0287, 0.0258, 0.0161, 0.0064, 0.0060, 0.0056, 0.0033, 0.0021,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,    30,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7690, 0.0704, 0.0407, 0.0163, 0.0092, 0.0032, 0.0030, 0.0028, 0.0018,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1186,  1111,   409, 23904, 51174])), torch.return_types.topk(
values=tensor([0.7822, 0.0372, 0.0257, 0.0244, 0.0090, 0.0084, 0.0067, 0.0051, 0.0030,
        0.0020], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,    30, 30502,   409,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.7114, 0.0672, 0.0657, 0.0118, 0.0109, 0.0101, 0.0031, 0.0020, 0.0018,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1111,  1186, 55513, 15597])), torch.return_types.topk(
values=tensor([0.4990, 0.1893, 0.0370, 0.0136, 0.0083, 0.0051, 0.0049, 0.0041, 0.0041,
        0.0036], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 15588, 20077,  3991,  7610, 34059])), torch.return_types.topk(
values=tensor([0.5151, 0.1780, 0.0232, 0.0112, 0.0082, 0.0065, 0.0060, 0.0048, 0.0047,
        0.0045], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588, 60824,  7610, 20077, 34059,  3991])), torch.return_types.topk(
values=tensor([0.5068, 0.1683, 0.0364, 0.0129, 0.0108, 0.0055, 0.0055, 0.0048, 0.0037,
        0.0036], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991, 34059,  7610])), torch.return_types.topk(
values=tensor([0.4734, 0.2202, 0.0192, 0.0098, 0.0054, 0.0048, 0.0045, 0.0043, 0.0040,
        0.0037], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 41445, 34059, 20077, 60824,  7680])), torch.return_types.topk(
values=tensor([0.5908, 0.0438, 0.0250, 0.0060, 0.0056, 0.0052, 0.0049, 0.0045, 0.0045,
        0.0041], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617,   213, 38982,    30, 41565])), torch.return_types.topk(
values=tensor([0.7241, 0.0248, 0.0139, 0.0048, 0.0038, 0.0037, 0.0024, 0.0023, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34,   213,   336, 38982,  3617, 64851])), torch.return_types.topk(
values=tensor([0.6201, 0.0393, 0.0224, 0.0060, 0.0054, 0.0051, 0.0049, 0.0048, 0.0037,
        0.0036], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30, 54203,   213, 38982,  3617,  1390])), torch.return_types.topk(
values=tensor([0.7124, 0.0123, 0.0081, 0.0057, 0.0048, 0.0043, 0.0035, 0.0034, 0.0029,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,    34, 54203,  3617,   213, 64851,  2398])), torch.return_types.topk(
values=tensor([0.6304, 0.0801, 0.0634, 0.0275, 0.0136, 0.0104, 0.0079, 0.0067, 0.0056,
        0.0046], dtype=torch.float16),
indices=tensor([ 5442,  4569, 21405, 45883,   980,  1390,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6455, 0.0719, 0.0601, 0.0494, 0.0100, 0.0050, 0.0042, 0.0040, 0.0039,
        0.0025], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  3991,  1390,  1872, 47727])), torch.return_types.topk(
values=tensor([0.6099, 0.0746, 0.0701, 0.0266, 0.0139, 0.0122, 0.0084, 0.0083, 0.0074,
        0.0055], dtype=torch.float16),
indices=tensor([ 5442,  4569, 21405, 45883,   980,  1390,  1872,   649,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7749, 0.0544, 0.0322, 0.0195, 0.0071, 0.0042, 0.0033, 0.0032, 0.0028,
        0.0015], dtype=torch.float16),
indices=tensor([ 5442,  4569, 21405, 45883,   980,  1872,  3991,   649,  1390, 47727])), torch.return_types.topk(
values=tensor([0.3962, 0.2275, 0.0504, 0.0448, 0.0217, 0.0200, 0.0132, 0.0106, 0.0099,
        0.0061], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,  2398,   980,   649,  1872])), torch.return_types.topk(
values=tensor([0.3860, 0.2183, 0.0828, 0.0351, 0.0218, 0.0214, 0.0154, 0.0104, 0.0091,
        0.0053], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883,  1390, 38982,  2398,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.3643, 0.2208, 0.0585, 0.0504, 0.0287, 0.0195, 0.0147, 0.0100, 0.0099,
        0.0075], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,  2398,   980,   649,  1872])), torch.return_types.topk(
values=tensor([0.4922, 0.1897, 0.0557, 0.0230, 0.0186, 0.0179, 0.0120, 0.0078, 0.0070,
        0.0062], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883, 38982,  1390,  2398,   649,   980,  3175])), torch.return_types.topk(
values=tensor([0.2341, 0.0854, 0.0539, 0.0340, 0.0228, 0.0180, 0.0180, 0.0127, 0.0116,
        0.0102], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919, 47727,  3617,  4300])), torch.return_types.topk(
values=tensor([0.6479, 0.0320, 0.0157, 0.0108, 0.0089, 0.0068, 0.0049, 0.0049, 0.0043,
        0.0042], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,  6091,  1111,  9919, 30360, 41445])), torch.return_types.topk(
values=tensor([0.2446, 0.0966, 0.0525, 0.0339, 0.0199, 0.0170, 0.0166, 0.0129, 0.0095,
        0.0085], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  1111, 47727,  3617,  1390])), torch.return_types.topk(
values=tensor([0.7046, 0.0251, 0.0140, 0.0069, 0.0065, 0.0055, 0.0047, 0.0036, 0.0034,
        0.0033], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,  6091,   110,  9919, 30360,  1111])), torch.return_types.topk(
values=tensor([0.6440, 0.1860, 0.0268, 0.0190, 0.0068, 0.0066, 0.0040, 0.0038, 0.0027,
        0.0025], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  4569,  1013, 51174,  9919,    30, 21058])), torch.return_types.topk(
values=tensor([0.6353, 0.2128, 0.0270, 0.0192, 0.0034, 0.0033, 0.0033, 0.0032, 0.0024,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 21058, 60824,  1013, 51174,  4569, 45883])), torch.return_types.topk(
values=tensor([0.6377, 0.1744, 0.0232, 0.0223, 0.0081, 0.0062, 0.0047, 0.0042, 0.0041,
        0.0029], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30,  9919, 51174, 23401])), torch.return_types.topk(
values=tensor([0.7163, 0.1898, 0.0132, 0.0120, 0.0035, 0.0028, 0.0020, 0.0014, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 60824, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.3145, 0.1166, 0.0840, 0.0425, 0.0375, 0.0209, 0.0168, 0.0134, 0.0102,
        0.0083], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  1390,  3991,    30,  9919])), torch.return_types.topk(
values=tensor([0.4875, 0.1140, 0.0615, 0.0200, 0.0168, 0.0139, 0.0133, 0.0064, 0.0044,
        0.0044], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398, 38982,  3991,  1390, 51174,    80])), torch.return_types.topk(
values=tensor([0.4097, 0.1077, 0.0525, 0.0260, 0.0246, 0.0187, 0.0145, 0.0085, 0.0060,
        0.0053], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,    80, 13818])), torch.return_types.topk(
values=tensor([0.4390, 0.1541, 0.0627, 0.0390, 0.0168, 0.0160, 0.0148, 0.0047, 0.0033,
        0.0033], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,  3991,  1390, 60824, 20076])), torch.return_types.topk(
values=tensor([0.9053, 0.0054, 0.0024, 0.0024, 0.0018, 0.0016, 0.0015, 0.0015, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911, 48446, 29498, 30261,    30,   409, 33622])), torch.return_types.topk(
values=tensor([9.3896e-01, 2.7637e-03, 1.7433e-03, 1.4114e-03, 1.3628e-03, 1.1473e-03,
        9.9277e-04, 9.6273e-04, 9.4414e-04, 7.7963e-04], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911, 29498, 30502, 30261, 15588,  2214, 53208])), torch.return_types.topk(
values=tensor([0.9067, 0.0052, 0.0023, 0.0022, 0.0021, 0.0017, 0.0015, 0.0014, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 51174,    30, 29498, 48446, 30261, 33622, 15588])), torch.return_types.topk(
values=tensor([0.8921, 0.0057, 0.0031, 0.0026, 0.0022, 0.0021, 0.0017, 0.0015, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588,   409,  9402])), torch.return_types.topk(
values=tensor([0.8442, 0.0239, 0.0171, 0.0101, 0.0082, 0.0042, 0.0037, 0.0029, 0.0014,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8267, 0.0381, 0.0363, 0.0096, 0.0062, 0.0033, 0.0027, 0.0018, 0.0012,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 51174, 55513])), torch.return_types.topk(
values=tensor([0.8481, 0.0231, 0.0167, 0.0094, 0.0081, 0.0059, 0.0045, 0.0028, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.7432, 0.0645, 0.0429, 0.0108, 0.0099, 0.0082, 0.0031, 0.0017, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111, 15597,  1186, 55513])), torch.return_types.topk(
values=tensor([0.5781, 0.1656, 0.0284, 0.0085, 0.0066, 0.0048, 0.0037, 0.0034, 0.0027,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 20077, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.6094, 0.1392, 0.0181, 0.0075, 0.0062, 0.0056, 0.0055, 0.0035, 0.0033,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 60824, 15588, 20077, 34059,  3991])), torch.return_types.topk(
values=tensor([0.5869, 0.1520, 0.0290, 0.0091, 0.0083, 0.0044, 0.0037, 0.0035, 0.0029,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 20077, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.5220, 0.2043, 0.0166, 0.0103, 0.0045, 0.0040, 0.0038, 0.0036, 0.0036,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 41445, 20077, 34059, 60824,  7680])), torch.return_types.topk(
values=tensor([0.6450, 0.0258, 0.0224, 0.0076, 0.0057, 0.0047, 0.0045, 0.0043, 0.0032,
        0.0032], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617, 54203,   213,    30, 58401,   336])), torch.return_types.topk(
values=tensor([0.7554, 0.0164, 0.0141, 0.0047, 0.0038, 0.0032, 0.0024, 0.0019, 0.0019,
        0.0016], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   213,  3617,   336, 64851,  2398])), torch.return_types.topk(
values=tensor([0.6646, 0.0240, 0.0201, 0.0076, 0.0058, 0.0048, 0.0045, 0.0043, 0.0029,
        0.0029], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,   213,  3617, 54203, 38982, 58401])), torch.return_types.topk(
values=tensor([0.7202, 0.0098, 0.0089, 0.0054, 0.0051, 0.0042, 0.0038, 0.0033, 0.0028,
        0.0026], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336,  3617, 54203,   213, 64851,  2398])), torch.return_types.topk(
values=tensor([0.6782, 0.0548, 0.0447, 0.0305, 0.0103, 0.0093, 0.0074, 0.0069, 0.0053,
        0.0040], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6792, 0.0699, 0.0617, 0.0266, 0.0074, 0.0048, 0.0039, 0.0036, 0.0034,
        0.0022], dtype=torch.float16),
indices=tensor([ 5442, 45883, 21405,  4569,   980,   649,  1872,  3991,  1390, 47727])), torch.return_types.topk(
values=tensor([0.6729, 0.0579, 0.0417, 0.0298, 0.0110, 0.0096, 0.0080, 0.0077, 0.0060,
        0.0042], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,  1872,   649,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8052, 0.0303, 0.0278, 0.0223, 0.0056, 0.0038, 0.0030, 0.0027, 0.0026,
        0.0016], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.2705, 0.2686, 0.0604, 0.0516, 0.0266, 0.0235, 0.0161, 0.0129, 0.0114,
        0.0069], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 45883, 38982,  2398,   649,   980,  3175])), torch.return_types.topk(
values=tensor([8.7646e-01, 2.6047e-02, 2.0332e-03, 1.6012e-03, 1.1225e-03, 8.4066e-04,
        4.6420e-04, 3.7885e-04, 1.6427e-04, 1.4102e-04], dtype=torch.float16),
indices=tensor([  245,  1677,   845,   130, 28420, 49488,   690,   263,  9898,  5144])), torch.return_types.topk(
values=tensor([9.0234e-01, 1.0419e-04, 3.5226e-05, 1.4544e-05, 7.1526e-06, 6.6161e-06,
        6.4373e-06, 5.0664e-06, 4.4703e-06, 3.7551e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,  9182,    13,     5,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([8.9893e-01, 3.2227e-02, 3.8204e-03, 5.4169e-04, 4.5443e-04, 3.2234e-04,
        2.9922e-04, 1.2720e-04, 1.1903e-04, 1.1766e-04], dtype=torch.float16),
indices=tensor([ 7784,  9486,  5925,  1222, 43324, 57249, 34147, 40947, 67460, 16958])), torch.return_types.topk(
values=tensor([0.3809, 0.0727, 0.0524, 0.0177, 0.0172, 0.0130, 0.0114, 0.0098, 0.0081,
        0.0065], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 41445, 38982,  3617,  1111,  9919, 47727,  4300])), torch.return_types.topk(
values=tensor([0.7412, 0.0173, 0.0170, 0.0060, 0.0052, 0.0052, 0.0045, 0.0029, 0.0029,
        0.0027], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796, 38982,  6091,   110,  9919, 41445,  3617])), torch.return_types.topk(
values=tensor([0.4263, 0.0680, 0.0501, 0.0153, 0.0146, 0.0114, 0.0098, 0.0082, 0.0077,
        0.0055], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  3617,  1111,  9919, 47727,  6091])), torch.return_types.topk(
values=tensor([0.7568, 0.0155, 0.0146, 0.0058, 0.0048, 0.0046, 0.0039, 0.0026, 0.0025,
        0.0023], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110, 56796,  6091, 38982,  3617,  9919,  1111])), torch.return_types.topk(
values=tensor([0.6392, 0.2175, 0.0268, 0.0121, 0.0054, 0.0053, 0.0027, 0.0026, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 51174,    30, 21058])), torch.return_types.topk(
values=tensor([0.6167, 0.2396, 0.0269, 0.0144, 0.0032, 0.0030, 0.0030, 0.0026, 0.0017,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824, 21058,  1013, 51174,  4569, 45883])), torch.return_types.topk(
values=tensor([0.6343, 0.2091, 0.0262, 0.0140, 0.0063, 0.0046, 0.0036, 0.0029, 0.0027,
        0.0023], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30,  9919, 51174, 60824])), torch.return_types.topk(
values=tensor([0.7183, 0.1964, 0.0128, 0.0088, 0.0032, 0.0020, 0.0016, 0.0012, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.3914, 0.1261, 0.0691, 0.0281, 0.0241, 0.0224, 0.0125, 0.0105, 0.0099,
        0.0063], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,  1390,    30,  3991,    80])), torch.return_types.topk(
values=tensor([0.5278, 0.1107, 0.0544, 0.0171, 0.0132, 0.0105, 0.0092, 0.0054, 0.0052,
        0.0035], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,    80,  1390, 60824])), torch.return_types.topk(
values=tensor([0.3691, 0.1161, 0.0657, 0.0265, 0.0238, 0.0227, 0.0167, 0.0130, 0.0108,
        0.0069], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  1390,  3991, 27993])), torch.return_types.topk(
values=tensor([0.5366, 0.1236, 0.0444, 0.0179, 0.0166, 0.0090, 0.0081, 0.0046, 0.0037,
        0.0028], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.9141, 0.0048, 0.0024, 0.0024, 0.0016, 0.0016, 0.0013, 0.0012, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911, 29498, 48446,    30, 30261, 33622, 15588])), torch.return_types.topk(
values=tensor([0.9380, 0.0031, 0.0021, 0.0017, 0.0013, 0.0012, 0.0012, 0.0011, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 29498, 30502, 53208, 15588,  8911, 30261, 48446])), torch.return_types.topk(
values=tensor([0.9121, 0.0047, 0.0024, 0.0023, 0.0018, 0.0018, 0.0015, 0.0013, 0.0013,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911,    30, 29498, 48446, 33622, 30261, 15588])), torch.return_types.topk(
values=tensor([0.9033, 0.0049, 0.0032, 0.0026, 0.0021, 0.0019, 0.0013, 0.0013, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588, 53208,  9402])), torch.return_types.topk(
values=tensor([0.8569, 0.0218, 0.0215, 0.0089, 0.0055, 0.0043, 0.0036, 0.0025, 0.0014,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 20077,   409, 30502,    30,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.8184, 0.0473, 0.0354, 0.0112, 0.0067, 0.0025, 0.0023, 0.0021, 0.0013,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1111,   409,  1186, 51174, 55513])), torch.return_types.topk(
values=tensor([0.8584, 0.0212, 0.0208, 0.0087, 0.0054, 0.0051, 0.0050, 0.0027, 0.0014,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.7480, 0.0609, 0.0538, 0.0093, 0.0093, 0.0075, 0.0028, 0.0016, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1111,  1186, 15597, 55513])), torch.return_types.topk(
values=tensor([0.5601, 0.1804, 0.0323, 0.0092, 0.0066, 0.0044, 0.0039, 0.0035, 0.0031,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 20077, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.5752, 0.1549, 0.0218, 0.0094, 0.0068, 0.0066, 0.0060, 0.0042, 0.0040,
        0.0036], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 15588,  7610, 20077,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5659, 0.1647, 0.0327, 0.0093, 0.0089, 0.0041, 0.0039, 0.0036, 0.0034,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 20077, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.5073, 0.2164, 0.0189, 0.0098, 0.0048, 0.0044, 0.0041, 0.0039, 0.0038,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 41445, 20077, 60824, 34059,  7680])), torch.return_types.topk(
values=tensor([0.6655, 0.0279, 0.0209, 0.0058, 0.0050, 0.0045, 0.0043, 0.0036, 0.0033,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617, 54203,    30,   213, 41565, 38982])), torch.return_types.topk(
values=tensor([0.7573, 0.0197, 0.0127, 0.0038, 0.0036, 0.0030, 0.0022, 0.0018, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34,   213,  3617,   336, 64851, 38982])), torch.return_types.topk(
values=tensor([0.6797, 0.0268, 0.0184, 0.0059, 0.0057, 0.0041, 0.0041, 0.0039, 0.0032,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,  3617, 54203,   213, 38982, 41565])), torch.return_types.topk(
values=tensor([0.7368, 0.0103, 0.0077, 0.0050, 0.0043, 0.0037, 0.0036, 0.0030, 0.0027,
        0.0024], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,    34, 54203,  3617,   213, 64851,  2398])), torch.return_types.topk(
values=tensor([0.6807, 0.0550, 0.0439, 0.0326, 0.0109, 0.0081, 0.0063, 0.0060, 0.0053,
        0.0043], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6597, 0.0788, 0.0679, 0.0272, 0.0078, 0.0042, 0.0039, 0.0037, 0.0034,
        0.0023], dtype=torch.float16),
indices=tensor([ 5442, 45883, 21405,  4569,   980,   649,  3991,  1872,  1390, 47727])), torch.return_types.topk(
values=tensor([0.6743, 0.0576, 0.0405, 0.0318, 0.0113, 0.0085, 0.0074, 0.0066, 0.0060,
        0.0046], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,  1872,   649,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8018, 0.0304, 0.0276, 0.0238, 0.0058, 0.0035, 0.0028, 0.0027, 0.0027,
        0.0015], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  3991,  1390,  3175])), torch.return_types.topk(
values=tensor([0.2769, 0.2705, 0.0603, 0.0496, 0.0287, 0.0255, 0.0157, 0.0120, 0.0107,
        0.0064], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 45883, 38982,  2398,   980,   649,  3175])), torch.return_types.topk(
values=tensor([9.0967e-01, 5.2414e-03, 2.4185e-03, 2.7466e-04, 2.0480e-04, 1.7524e-04,
        1.4985e-04, 1.2422e-04, 1.0878e-04, 1.0061e-04], dtype=torch.float16),
indices=tensor([  245,  1677,   845, 28420,  9898,   690, 49488,   194,   959,  3735])), torch.return_types.topk(
values=tensor([0.2634, 0.2612, 0.0630, 0.0527, 0.0298, 0.0271, 0.0166, 0.0118, 0.0109,
        0.0077], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,  2398,   980,   649,  3175])), torch.return_types.topk(
values=tensor([0.7036, 0.1062, 0.0300, 0.0112, 0.0091, 0.0031, 0.0023, 0.0021, 0.0019,
        0.0011], dtype=torch.float16),
indices=tensor([33697, 60477, 44489, 31187,  2323, 11340,     5, 11480, 43804,  3097])), torch.return_types.topk(
values=tensor([0.4216, 0.0575, 0.0532, 0.0171, 0.0162, 0.0118, 0.0110, 0.0093, 0.0087,
        0.0070], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  3617,  1111,  9919, 47727,  4300])), torch.return_types.topk(
values=tensor([0.7314, 0.0197, 0.0143, 0.0066, 0.0063, 0.0060, 0.0035, 0.0032, 0.0032,
        0.0031], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091, 38982,   110,  9919, 41445,  1111])), torch.return_types.topk(
values=tensor([0.4531, 0.0533, 0.0508, 0.0160, 0.0139, 0.0103, 0.0099, 0.0084, 0.0081,
        0.0072], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  3617,  1111, 47727,  9919,  6091])), torch.return_types.topk(
values=tensor([0.7622, 0.0152, 0.0128, 0.0052, 0.0052, 0.0047, 0.0043, 0.0025, 0.0025,
        0.0024], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,  6091,   110, 38982,  1111,  9919,  3617])), torch.return_types.topk(
values=tensor([0.6704, 0.2013, 0.0248, 0.0118, 0.0047, 0.0044, 0.0024, 0.0022, 0.0019,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 51174,  9919, 60824, 21058])), torch.return_types.topk(
values=tensor([0.6440, 0.2157, 0.0248, 0.0156, 0.0039, 0.0031, 0.0028, 0.0027, 0.0018,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013, 51174, 21058, 45883,  4569])), torch.return_types.topk(
values=tensor([0.6636, 0.1946, 0.0242, 0.0135, 0.0056, 0.0041, 0.0029, 0.0024, 0.0024,
        0.0023], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30, 51174, 60824,  9919])), torch.return_types.topk(
values=tensor([0.7446, 0.1755, 0.0114, 0.0087, 0.0032, 0.0021, 0.0015, 0.0012, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.4031, 0.1278, 0.0775, 0.0266, 0.0242, 0.0198, 0.0115, 0.0108, 0.0090,
        0.0058], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,  1390,  3991,    30,    80])), torch.return_types.topk(
values=tensor([0.4954, 0.1168, 0.0640, 0.0167, 0.0142, 0.0126, 0.0106, 0.0061, 0.0053,
        0.0044], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([0.3721, 0.1180, 0.0721, 0.0282, 0.0240, 0.0210, 0.0149, 0.0126, 0.0117,
        0.0064], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  1390,  3991,    80])), torch.return_types.topk(
values=tensor([0.5195, 0.1334, 0.0495, 0.0176, 0.0172, 0.0098, 0.0085, 0.0046, 0.0036,
        0.0028], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.8906, 0.0040, 0.0034, 0.0033, 0.0031, 0.0027, 0.0022, 0.0019, 0.0018,
        0.0018], dtype=torch.float16),
indices=tensor([41445,    80, 51174,    30, 33622,  8911, 30261, 48446, 15588,  1111])), torch.return_types.topk(
values=tensor([0.9307, 0.0029, 0.0026, 0.0022, 0.0020, 0.0015, 0.0014, 0.0014, 0.0013,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30502, 29498, 53208,  8911, 15588, 30261, 48446])), torch.return_types.topk(
values=tensor([0.8818, 0.0048, 0.0039, 0.0037, 0.0035, 0.0026, 0.0023, 0.0023, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([41445,    30,    80, 33622, 51174,  8911, 30261,  1111, 15588, 29498])), torch.return_types.topk(
values=tensor([0.8970, 0.0051, 0.0034, 0.0030, 0.0024, 0.0019, 0.0017, 0.0013, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588, 30502,   409])), torch.return_types.topk(
values=tensor([0.8003, 0.0294, 0.0231, 0.0207, 0.0097, 0.0088, 0.0074, 0.0041, 0.0027,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,    30,   409, 30502,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.7637, 0.0657, 0.0411, 0.0185, 0.0094, 0.0038, 0.0038, 0.0037, 0.0019,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1186,   409,  1111, 23904, 51174])), torch.return_types.topk(
values=tensor([0.7705, 0.0336, 0.0299, 0.0217, 0.0146, 0.0102, 0.0083, 0.0056, 0.0035,
        0.0024], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,    30, 30502,   409,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.7168, 0.0646, 0.0598, 0.0123, 0.0118, 0.0094, 0.0036, 0.0020, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111,  1186, 51174, 15597])), torch.return_types.topk(
values=tensor([0.4658, 0.2201, 0.0444, 0.0141, 0.0108, 0.0064, 0.0052, 0.0051, 0.0045,
        0.0037], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077,  3991, 15588,  7610, 34059])), torch.return_types.topk(
values=tensor([0.4983, 0.2045, 0.0266, 0.0096, 0.0076, 0.0069, 0.0053, 0.0051, 0.0050,
        0.0048], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588,  7610, 60824, 20077, 34059,  3991])), torch.return_types.topk(
values=tensor([0.4575, 0.1968, 0.0453, 0.0152, 0.0152, 0.0077, 0.0064, 0.0061, 0.0041,
        0.0040], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445, 20077,  3991, 15588,  7610, 30261])), torch.return_types.topk(
values=tensor([0.4250, 0.2744, 0.0220, 0.0123, 0.0051, 0.0049, 0.0041, 0.0040, 0.0035,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 15588, 41445, 20077,  7680,  3991])), torch.return_types.topk(
values=tensor([0.6479, 0.0360, 0.0199, 0.0054, 0.0051, 0.0050, 0.0044, 0.0039, 0.0039,
        0.0037], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34, 54203,  3617, 41565, 38982, 58401])), torch.return_types.topk(
values=tensor([0.7319, 0.0239, 0.0086, 0.0043, 0.0033, 0.0030, 0.0028, 0.0026, 0.0025,
        0.0024], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,   336,    34, 38982,  3617, 41565,   213])), torch.return_types.topk(
values=tensor([0.6699, 0.0336, 0.0179, 0.0069, 0.0048, 0.0046, 0.0042, 0.0036, 0.0034,
        0.0031], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34, 54203, 38982,   213, 41565,  3617])), torch.return_types.topk(
values=tensor([0.7417, 0.0096, 0.0060, 0.0057, 0.0042, 0.0039, 0.0032, 0.0029, 0.0028,
        0.0026], dtype=torch.float16),
indices=tensor([30261, 41445,   336,  9971,    34, 54203,  3617,   213, 64851,  2398])), torch.return_types.topk(
values=tensor([0.6177, 0.0709, 0.0499, 0.0354, 0.0118, 0.0107, 0.0083, 0.0076, 0.0067,
        0.0062], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  3991,  1872, 47727])), torch.return_types.topk(
values=tensor([0.6279, 0.0837, 0.0786, 0.0294, 0.0070, 0.0049, 0.0045, 0.0044, 0.0033,
        0.0027], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  3991,  1872, 47727])), torch.return_types.topk(
values=tensor([0.6079, 0.0767, 0.0447, 0.0335, 0.0119, 0.0107, 0.0089, 0.0085, 0.0082,
        0.0067], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  3991,  1872, 47727])), torch.return_types.topk(
values=tensor([0.7881, 0.0333, 0.0287, 0.0231, 0.0057, 0.0036, 0.0035, 0.0033, 0.0030,
        0.0017], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1872,  3991,  1390, 47727])), torch.return_types.topk(
values=tensor([8.9990e-01, 1.6868e-04, 4.6849e-05, 3.4213e-05, 9.0599e-06, 7.9274e-06,
        7.6294e-06, 5.4836e-06, 5.1856e-06, 4.8876e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   30,   70])), torch.return_types.topk(
values=tensor([9.2871e-01, 1.3218e-03, 5.9843e-04, 4.2915e-04, 3.7432e-04, 2.1327e-04,
        1.8752e-04, 1.8609e-04, 1.7750e-04, 7.5758e-05], dtype=torch.float16),
indices=tensor([  959,   245,  2558, 54781,   846,   848, 64840,   403,  6519,  3735])), torch.return_types.topk(
values=tensor([9.0088e-01, 9.7752e-05, 4.0591e-05, 2.1636e-05, 8.2850e-06, 8.2850e-06,
        7.1526e-06, 5.0068e-06, 4.8280e-06, 3.8743e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,  9182,    13,     5,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.3113, 0.2581, 0.0745, 0.0346, 0.0240, 0.0236, 0.0182, 0.0113, 0.0081,
        0.0075], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405, 45883, 38982,  1390,  2398,   649,  3175,   980])), torch.return_types.topk(
values=tensor([0.2118, 0.1040, 0.0507, 0.0330, 0.0238, 0.0230, 0.0197, 0.0135, 0.0119,
        0.0114], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  1111, 47727, 51174,  3617])), torch.return_types.topk(
values=tensor([0.6846, 0.0278, 0.0135, 0.0095, 0.0081, 0.0065, 0.0046, 0.0044, 0.0043,
        0.0033], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796, 38982,  6091,  9919,   110,  1111, 30360])), torch.return_types.topk(
values=tensor([0.3970, 0.0628, 0.0341, 0.0193, 0.0164, 0.0109, 0.0104, 0.0101, 0.0088,
        0.0060], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  1111,  9919, 51174, 41445, 56796, 47727])), torch.return_types.topk(
values=tensor([0.7246, 0.0199, 0.0128, 0.0072, 0.0059, 0.0053, 0.0053, 0.0034, 0.0033,
        0.0027], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796,   110, 38982,  6091,  1111,  9919, 30360])), torch.return_types.topk(
values=tensor([0.6089, 0.1931, 0.0278, 0.0240, 0.0074, 0.0059, 0.0057, 0.0053, 0.0051,
        0.0034], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 51174, 21058])), torch.return_types.topk(
values=tensor([0.5913, 0.2371, 0.0264, 0.0228, 0.0048, 0.0040, 0.0038, 0.0035, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 21058, 51174, 60824,  1013, 45883,  9919])), torch.return_types.topk(
values=tensor([0.5947, 0.1843, 0.0280, 0.0253, 0.0100, 0.0083, 0.0056, 0.0053, 0.0052,
        0.0038], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,    30,  1013,  9919, 51174,  4569, 21058])), torch.return_types.topk(
values=tensor([0.6777, 0.2184, 0.0142, 0.0129, 0.0039, 0.0021, 0.0019, 0.0018, 0.0018,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 21058, 51174,  9919])), torch.return_types.topk(
values=tensor([0.2795, 0.1221, 0.0873, 0.0422, 0.0281, 0.0214, 0.0188, 0.0169, 0.0168,
        0.0101], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4475, 0.1252, 0.0620, 0.0179, 0.0161, 0.0142, 0.0135, 0.0063, 0.0051,
        0.0051], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  3991, 38982,  4569,  1390, 51174,    80])), torch.return_types.topk(
values=tensor([0.2396, 0.1105, 0.0790, 0.0502, 0.0300, 0.0249, 0.0225, 0.0182, 0.0181,
        0.0124], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,    30,  4569,  2398,  3991,  1390, 27993])), torch.return_types.topk(
values=tensor([0.4736, 0.1490, 0.0473, 0.0197, 0.0177, 0.0125, 0.0106, 0.0044, 0.0036,
        0.0032], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.8862, 0.0043, 0.0035, 0.0029, 0.0027, 0.0026, 0.0025, 0.0024, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([41445, 33622,    80, 51174,    30,  8911, 15588,  9971, 30261,  1111])), torch.return_types.topk(
values=tensor([0.9375, 0.0025, 0.0020, 0.0018, 0.0016, 0.0015, 0.0013, 0.0013, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30502, 29498, 15588,  8911, 53208, 30261, 33622])), torch.return_types.topk(
values=tensor([0.8833, 0.0046, 0.0034, 0.0034, 0.0027, 0.0027, 0.0026, 0.0026, 0.0024,
        0.0022], dtype=torch.float16),
indices=tensor([41445, 33622,    30,    80, 51174, 15588,  1111,  8911, 30261,  9971])), torch.return_types.topk(
values=tensor([0.9106, 0.0047, 0.0026, 0.0026, 0.0018, 0.0017, 0.0017, 0.0012, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 48446, 30261, 15588, 30502, 53208])), torch.return_types.topk(
values=tensor([0.7783, 0.0391, 0.0331, 0.0168, 0.0088, 0.0075, 0.0072, 0.0049, 0.0036,
        0.0020], dtype=torch.float16),
indices=tensor([41445, 20077, 15588, 53208,    30,   409, 30502,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.8330, 0.0296, 0.0249, 0.0215, 0.0132, 0.0045, 0.0023, 0.0022, 0.0021,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,  1186,   409,  1111, 55513,  7680])), torch.return_types.topk(
values=tensor([0.7480, 0.0453, 0.0375, 0.0193, 0.0124, 0.0104, 0.0068, 0.0061, 0.0044,
        0.0030], dtype=torch.float16),
indices=tensor([41445, 20077, 15588, 53208,    30, 30502,   409,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.7500, 0.0535, 0.0461, 0.0113, 0.0099, 0.0099, 0.0035, 0.0017, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,  1111,  1186, 55513, 15597])), torch.return_types.topk(
values=tensor([0.4646, 0.2161, 0.0505, 0.0161, 0.0098, 0.0077, 0.0058, 0.0055, 0.0039,
        0.0036], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077,  3991, 15588, 34059, 30261])), torch.return_types.topk(
values=tensor([0.5088, 0.2073, 0.0278, 0.0102, 0.0075, 0.0058, 0.0054, 0.0050, 0.0047,
        0.0047], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588,  7610, 20077, 34059, 60824,  3991])), torch.return_types.topk(
values=tensor([0.4636, 0.1947, 0.0500, 0.0160, 0.0127, 0.0086, 0.0068, 0.0061, 0.0040,
        0.0038], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077,  3991, 15588, 34059, 30261])), torch.return_types.topk(
values=tensor([0.4661, 0.2656, 0.0218, 0.0105, 0.0047, 0.0043, 0.0043, 0.0037, 0.0031,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 15588, 41445, 20077,  3991, 60824])), torch.return_types.topk(
values=tensor([0.6309, 0.0464, 0.0269, 0.0057, 0.0053, 0.0050, 0.0045, 0.0040, 0.0036,
        0.0035], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203, 41565,    30, 38982,  1390,   213])), torch.return_types.topk(
values=tensor([0.7700, 0.0204, 0.0120, 0.0045, 0.0039, 0.0028, 0.0019, 0.0018, 0.0017,
        0.0016], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34,   213, 64851, 38982,   336, 41565])), torch.return_types.topk(
values=tensor([0.6523, 0.0434, 0.0240, 0.0054, 0.0054, 0.0048, 0.0043, 0.0042, 0.0036,
        0.0032], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34, 54203, 41565, 38982,   213,  1390])), torch.return_types.topk(
values=tensor([0.7603, 0.0114, 0.0073, 0.0046, 0.0043, 0.0039, 0.0027, 0.0026, 0.0026,
        0.0023], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336, 54203,   213,  3617, 64851,   449])), torch.return_types.topk(
values=tensor([0.5864, 0.0734, 0.0467, 0.0378, 0.0159, 0.0127, 0.0087, 0.0081, 0.0075,
        0.0064], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,  3991, 47727,   649,  1872])), torch.return_types.topk(
values=tensor([0.6392, 0.0794, 0.0729, 0.0260, 0.0071, 0.0045, 0.0045, 0.0039, 0.0032,
        0.0031], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,  1390,  3991,   649, 47727,  1872])), torch.return_types.topk(
values=tensor([0.5986, 0.0798, 0.0392, 0.0322, 0.0144, 0.0119, 0.0092, 0.0081, 0.0075,
        0.0074], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,  3991, 47727,  1872,   649])), torch.return_types.topk(
values=tensor([0.6860, 0.0590, 0.0442, 0.0323, 0.0067, 0.0044, 0.0041, 0.0039, 0.0038,
        0.0028], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,  3991,  1390,  1872,   649,  2347])), torch.return_types.topk(
values=tensor([8.9990e-01, 1.6093e-04, 4.7207e-05, 3.0398e-05, 9.2983e-06, 7.3910e-06,
        7.2122e-06, 5.4240e-06, 4.8280e-06, 4.6492e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   30,   70])), torch.return_types.topk(
values=tensor([8.8232e-01, 9.3536e-03, 4.3182e-03, 2.1160e-04, 1.6093e-04, 1.4949e-04,
        1.3399e-04, 1.1551e-04, 1.0890e-04, 1.0806e-04], dtype=torch.float16),
indices=tensor([  245,  1677,   845, 28420,   215,   690, 30697,  5144, 49488,  9898])), torch.return_types.topk(
values=tensor([9.0039e-01, 1.6689e-04, 5.8353e-05, 2.7418e-05, 9.1791e-06, 8.4639e-06,
        7.3910e-06, 5.6624e-06, 5.1260e-06, 4.5300e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   30])), torch.return_types.topk(
values=tensor([9.1016e-01, 1.5656e-02, 5.6725e-03, 2.5959e-03, 1.9140e-03, 1.2798e-03,
        9.2220e-04, 7.6437e-04, 7.3528e-04, 6.4373e-04], dtype=torch.float16),
indices=tensor([57495, 58246, 18669,     5, 14608,  6255, 12477,    13,  1230,  1109])), torch.return_types.topk(
values=tensor([0.1345, 0.1196, 0.0565, 0.0468, 0.0348, 0.0278, 0.0265, 0.0154, 0.0130,
        0.0123], dtype=torch.float16),
indices=tensor([ 3991, 60824,  9971, 38982, 41445,  9919,  1111, 47727,  1390, 51174])), torch.return_types.topk(
values=tensor([0.6519, 0.0359, 0.0159, 0.0115, 0.0069, 0.0057, 0.0056, 0.0054, 0.0045,
        0.0045], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,  6091,  1111,  9919, 41445,   110])), torch.return_types.topk(
values=tensor([0.3071, 0.0922, 0.0406, 0.0297, 0.0229, 0.0143, 0.0140, 0.0096, 0.0081,
        0.0072], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  1111, 41445,  9919, 51174, 47727,   980])), torch.return_types.topk(
values=tensor([0.7085, 0.0235, 0.0157, 0.0071, 0.0065, 0.0049, 0.0045, 0.0041, 0.0038,
        0.0031], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,   110, 56796,  6091,  1111,  9919,  3617])), torch.return_types.topk(
values=tensor([0.5850, 0.1812, 0.0351, 0.0349, 0.0074, 0.0064, 0.0057, 0.0056, 0.0040,
        0.0034], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  9919,  4569, 51174,    30, 21058])), torch.return_types.topk(
values=tensor([0.5776, 0.2466, 0.0302, 0.0260, 0.0047, 0.0038, 0.0032, 0.0027, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 21058, 60824, 51174,  1013,  9919, 45883])), torch.return_types.topk(
values=tensor([0.5854, 0.1842, 0.0357, 0.0301, 0.0073, 0.0057, 0.0057, 0.0047, 0.0046,
        0.0035], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  1013,  9919,    30,  4569, 51174, 21058])), torch.return_types.topk(
values=tensor([0.6353, 0.2546, 0.0171, 0.0140, 0.0031, 0.0023, 0.0019, 0.0018, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 21058, 51174,  9919])), torch.return_types.topk(
values=tensor([0.2722, 0.1025, 0.0823, 0.0553, 0.0255, 0.0222, 0.0201, 0.0163, 0.0135,
        0.0119], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  1390,  2398,    30,  9919])), torch.return_types.topk(
values=tensor([0.4771, 0.1089, 0.0570, 0.0185, 0.0164, 0.0158, 0.0120, 0.0064, 0.0060,
        0.0046], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  3991, 38982,  2398,  4569,  1390,    80, 51174])), torch.return_types.topk(
values=tensor([0.3716, 0.1048, 0.0511, 0.0351, 0.0234, 0.0150, 0.0140, 0.0095, 0.0092,
        0.0070], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  3991,  2398,  4569,  1390,    80,  1111])), torch.return_types.topk(
values=tensor([0.5215, 0.1360, 0.0372, 0.0166, 0.0154, 0.0128, 0.0108, 0.0042, 0.0041,
        0.0034], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.9023, 0.0033, 0.0031, 0.0026, 0.0025, 0.0024, 0.0021, 0.0021, 0.0019,
        0.0018], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911,   409, 33622,  1111, 15588, 30261,    30])), torch.return_types.topk(
values=tensor([9.3945e-01, 2.3651e-03, 2.2221e-03, 2.0065e-03, 1.8272e-03, 1.4400e-03,
        1.3418e-03, 1.3113e-03, 1.0490e-03, 8.6975e-04], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30502, 29498, 15588,  8911, 53208, 30261,   409])), torch.return_types.topk(
values=tensor([0.8945, 0.0031, 0.0031, 0.0029, 0.0028, 0.0026, 0.0025, 0.0025, 0.0024,
        0.0020], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 33622,    30,  8911,  1111,   409, 15588, 30261])), torch.return_types.topk(
values=tensor([0.9136, 0.0042, 0.0028, 0.0025, 0.0019, 0.0015, 0.0014, 0.0013, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446,   409, 30261, 15588, 30502])), torch.return_types.topk(
values=tensor([0.8257, 0.0270, 0.0182, 0.0161, 0.0095, 0.0062, 0.0055, 0.0043, 0.0021,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409, 30502,    30,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8086, 0.0453, 0.0342, 0.0142, 0.0073, 0.0036, 0.0036, 0.0026, 0.0013,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1111,   409,  1186, 51174, 23904])), torch.return_types.topk(
values=tensor([0.8052, 0.0303, 0.0218, 0.0172, 0.0090, 0.0087, 0.0087, 0.0053, 0.0026,
        0.0017], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409, 30502,    30,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.7744, 0.0472, 0.0440, 0.0104, 0.0094, 0.0068, 0.0031, 0.0014, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 30502, 20077,  1111, 15597, 51174,  1186])), torch.return_types.topk(
values=tensor([0.4788, 0.1890, 0.0435, 0.0168, 0.0076, 0.0059, 0.0058, 0.0057, 0.0042,
        0.0042], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077,  3991, 15588, 30261,  7610])), torch.return_types.topk(
values=tensor([0.5200, 0.1755, 0.0253, 0.0110, 0.0073, 0.0063, 0.0059, 0.0049, 0.0046,
        0.0044], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588,  7610, 60824, 34059,  3991, 20077])), torch.return_types.topk(
values=tensor([0.4614, 0.1725, 0.0443, 0.0189, 0.0110, 0.0073, 0.0073, 0.0070, 0.0046,
        0.0042], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  3991, 20077, 15588, 30261,  1111])), torch.return_types.topk(
values=tensor([0.4534, 0.2484, 0.0204, 0.0114, 0.0049, 0.0047, 0.0047, 0.0035, 0.0033,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 41445, 15588, 60824, 20077, 30261])), torch.return_types.topk(
values=tensor([0.6470, 0.0437, 0.0195, 0.0058, 0.0043, 0.0041, 0.0040, 0.0038, 0.0037,
        0.0034], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   213, 38982,  3617, 41565,  1390])), torch.return_types.topk(
values=tensor([0.7744, 0.0197, 0.0094, 0.0043, 0.0036, 0.0032, 0.0017, 0.0016, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   213, 64851,   336, 38982,  3617])), torch.return_types.topk(
values=tensor([0.6543, 0.0438, 0.0191, 0.0058, 0.0044, 0.0043, 0.0043, 0.0040, 0.0034,
        0.0034], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 38982,    30,   213, 54203,  1390, 41565])), torch.return_types.topk(
values=tensor([0.7500, 0.0111, 0.0054, 0.0052, 0.0047, 0.0035, 0.0033, 0.0028, 0.0025,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336, 54203,   213,  3617, 64851,  2398])), torch.return_types.topk(
values=tensor([0.5933, 0.0848, 0.0507, 0.0382, 0.0126, 0.0110, 0.0101, 0.0096, 0.0079,
        0.0056], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6172, 0.0917, 0.0803, 0.0263, 0.0076, 0.0053, 0.0046, 0.0045, 0.0039,
        0.0026], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  3991,  1872,  1390, 47727])), torch.return_types.topk(
values=tensor([0.5757, 0.0933, 0.0447, 0.0365, 0.0133, 0.0118, 0.0112, 0.0107, 0.0095,
        0.0060], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,  1872,   980,   649,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6685, 0.0721, 0.0532, 0.0323, 0.0065, 0.0053, 0.0049, 0.0038, 0.0035,
        0.0024], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,  1872,   649,  3991,  1390,  3175])), torch.return_types.topk(
values=tensor([8.9648e-01, 1.7750e-04, 1.2636e-04, 1.1593e-04, 2.9624e-05, 2.3782e-05,
        9.0599e-06, 7.3910e-06, 6.6757e-06, 6.4373e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,   13,    5, 9182,   30, 2207,   22])), torch.return_types.topk(
values=tensor([9.1455e-01, 5.6534e-03, 4.1046e-03, 2.4128e-03, 2.1458e-03, 6.3181e-04,
        3.2783e-04, 2.3067e-04, 2.2709e-04, 1.4603e-04], dtype=torch.float16),
indices=tensor([45778, 22909,  8447, 48567, 11987,    13,   245, 57495,  4874,  8764])), torch.return_types.topk(
values=tensor([8.9941e-01, 1.9407e-04, 6.5267e-05, 2.6584e-05, 9.8348e-06, 9.2983e-06,
        7.3314e-06, 5.9009e-06, 5.4836e-06, 4.5896e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   30])), torch.return_types.topk(
values=tensor([9.1797e-01, 6.3820e-03, 1.6842e-03, 1.2522e-03, 9.1219e-04, 8.3733e-04,
        6.4182e-04, 5.1165e-04, 4.7708e-04, 4.0007e-04], dtype=torch.float16),
indices=tensor([ 8447, 22909, 48567,    13, 45778,  1109,  1299, 11987,  6189,  8764])), torch.return_types.topk(
values=tensor([0.2090, 0.1011, 0.0520, 0.0393, 0.0299, 0.0227, 0.0217, 0.0130, 0.0110,
        0.0102], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919, 47727, 51174,  3617])), torch.return_types.topk(
values=tensor([0.7222, 0.0227, 0.0128, 0.0080, 0.0068, 0.0052, 0.0051, 0.0037, 0.0035,
        0.0034], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,   110,  6091,  1111,  9919, 41445])), torch.return_types.topk(
values=tensor([0.2075, 0.1068, 0.0521, 0.0409, 0.0274, 0.0217, 0.0206, 0.0131, 0.0102,
        0.0097], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919, 47727, 51174,  1390])), torch.return_types.topk(
values=tensor([0.7710, 0.0146, 0.0113, 0.0065, 0.0049, 0.0049, 0.0040, 0.0026, 0.0024,
        0.0023], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,   110, 56796, 38982,  6091,  1111,  3617,  9919])), torch.return_types.topk(
values=tensor([0.5781, 0.2014, 0.0329, 0.0288, 0.0077, 0.0066, 0.0059, 0.0059, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 51174,    30, 21058])), torch.return_types.topk(
values=tensor([0.5811, 0.2520, 0.0272, 0.0213, 0.0038, 0.0037, 0.0036, 0.0030, 0.0022,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824, 51174, 21058,  1013, 45883,  9919])), torch.return_types.topk(
values=tensor([0.5713, 0.1899, 0.0333, 0.0296, 0.0087, 0.0062, 0.0061, 0.0058, 0.0051,
        0.0034], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  1013,  9919, 51174,  4569,    30, 23401])), torch.return_types.topk(
values=tensor([0.6699, 0.2351, 0.0136, 0.0107, 0.0032, 0.0021, 0.0018, 0.0015, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.2888, 0.1140, 0.0731, 0.0450, 0.0307, 0.0209, 0.0189, 0.0175, 0.0112,
        0.0098], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,  9919,    30])), torch.return_types.topk(
values=tensor([0.4878, 0.1123, 0.0506, 0.0183, 0.0148, 0.0131, 0.0128, 0.0056, 0.0053,
        0.0044], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  3991, 38982,  4569,    80,  1390, 51174])), torch.return_types.topk(
values=tensor([0.2396, 0.1015, 0.0681, 0.0543, 0.0265, 0.0217, 0.0213, 0.0205, 0.0172,
        0.0123], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  2398,  1390,    30,  9919])), torch.return_types.topk(
values=tensor([0.5283, 0.1357, 0.0389, 0.0178, 0.0156, 0.0106, 0.0085, 0.0039, 0.0033,
        0.0029], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,    80,  1390,   336])), torch.return_types.topk(
values=tensor([0.8882, 0.0042, 0.0034, 0.0028, 0.0025, 0.0025, 0.0025, 0.0024, 0.0022,
        0.0020], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 33622,    30,  8911, 30261, 15588,  1111,  9971])), torch.return_types.topk(
values=tensor([0.9312, 0.0028, 0.0027, 0.0021, 0.0019, 0.0018, 0.0014, 0.0013, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 15588, 30502, 29498, 30261, 53208,  8911,  1111])), torch.return_types.topk(
values=tensor([0.8857, 0.0040, 0.0039, 0.0033, 0.0030, 0.0025, 0.0025, 0.0025, 0.0023,
        0.0019], dtype=torch.float16),
indices=tensor([41445,    80,    30, 51174, 33622, 15588, 30261,  1111,  8911, 29498])), torch.return_types.topk(
values=tensor([0.9087, 0.0048, 0.0029, 0.0023, 0.0019, 0.0017, 0.0016, 0.0014, 0.0011,
        0.0009], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588,   409, 53208])), torch.return_types.topk(
values=tensor([0.8091, 0.0314, 0.0242, 0.0153, 0.0086, 0.0068, 0.0058, 0.0046, 0.0026,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409,    30, 30502,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.8462, 0.0328, 0.0191, 0.0183, 0.0111, 0.0037, 0.0027, 0.0025, 0.0019,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,  1186,   409,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7949, 0.0336, 0.0266, 0.0166, 0.0107, 0.0083, 0.0082, 0.0054, 0.0031,
        0.0018], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,    30, 30502,   409,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.7617, 0.0578, 0.0385, 0.0108, 0.0094, 0.0084, 0.0032, 0.0015, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111, 15597, 55513,  1186])), torch.return_types.topk(
values=tensor([0.5005, 0.1885, 0.0408, 0.0142, 0.0092, 0.0066, 0.0056, 0.0053, 0.0041,
        0.0037], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991, 30261,  7610])), torch.return_types.topk(
values=tensor([0.5381, 0.1747, 0.0248, 0.0102, 0.0081, 0.0059, 0.0055, 0.0053, 0.0047,
        0.0044], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588, 60824,  7610, 20077,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5054, 0.1653, 0.0396, 0.0141, 0.0136, 0.0074, 0.0062, 0.0061, 0.0045,
        0.0039], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991, 30261,  1111])), torch.return_types.topk(
values=tensor([0.4988, 0.2301, 0.0189, 0.0095, 0.0046, 0.0041, 0.0040, 0.0039, 0.0034,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 34059, 41445, 20077, 30261, 60824])), torch.return_types.topk(
values=tensor([0.6343, 0.0393, 0.0248, 0.0066, 0.0050, 0.0050, 0.0046, 0.0040, 0.0039,
        0.0037], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617,    30,   213, 41565, 38982])), torch.return_types.topk(
values=tensor([0.7139, 0.0304, 0.0123, 0.0044, 0.0039, 0.0030, 0.0030, 0.0029, 0.0028,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34,   336,  3617, 41565,   213, 38982])), torch.return_types.topk(
values=tensor([0.6606, 0.0359, 0.0223, 0.0064, 0.0063, 0.0045, 0.0042, 0.0039, 0.0036,
        0.0033], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,    34, 54203,   213, 38982,  3617, 41565])), torch.return_types.topk(
values=tensor([0.7549, 0.0106, 0.0072, 0.0056, 0.0043, 0.0038, 0.0031, 0.0030, 0.0024,
        0.0023], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336, 54203,  3617,   213, 64851,   449])), torch.return_types.topk(
values=tensor([0.6265, 0.0645, 0.0464, 0.0353, 0.0145, 0.0123, 0.0081, 0.0080, 0.0071,
        0.0058], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  3991,  1872, 47727])), torch.return_types.topk(
values=tensor([0.6553, 0.0747, 0.0696, 0.0246, 0.0078, 0.0047, 0.0047, 0.0045, 0.0035,
        0.0026], dtype=torch.float16),
indices=tensor([ 5442, 45883, 21405,  4569,   980,  1390,  3991,   649,  1872, 47727])), torch.return_types.topk(
values=tensor([0.6304, 0.0675, 0.0400, 0.0324, 0.0136, 0.0120, 0.0089, 0.0084, 0.0081,
        0.0061], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,  3991,  1872,   649, 47727])), torch.return_types.topk(
values=tensor([0.8037, 0.0302, 0.0252, 0.0221, 0.0059, 0.0035, 0.0030, 0.0030, 0.0029,
        0.0015], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,  1390,  3991,   649, 47727])), torch.return_types.topk(
values=tensor([8.9941e-01, 1.6153e-04, 4.3273e-05, 2.6643e-05, 8.9407e-06, 7.3314e-06,
        6.9737e-06, 5.4240e-06, 4.5300e-06, 4.5300e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   30])), torch.return_types.topk(
values=tensor([9.1113e-01, 3.6106e-03, 9.1267e-04, 5.8937e-04, 4.9639e-04, 2.3079e-04,
        9.6202e-05, 9.0361e-05, 8.6546e-05, 7.6413e-05], dtype=torch.float16),
indices=tensor([  245,   845,  9898,  1677, 28420, 49488, 27205,   190, 30697,   194])), torch.return_types.topk(
values=tensor([9.0234e-01, 8.5711e-05, 3.3379e-05, 1.3471e-05, 6.5565e-06, 6.1989e-06,
        6.0201e-06, 4.7088e-06, 4.1127e-06, 3.6359e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,  9182,    13,     5,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([9.2871e-01, 2.7122e-03, 2.3937e-03, 1.6003e-03, 1.3323e-03, 1.3065e-03,
        6.8331e-04, 6.3419e-04, 6.0749e-04, 5.6839e-04], dtype=torch.float16),
indices=tensor([35289, 39422, 71376, 17773, 69485,  1109,  7276, 44514,    13,  4398])), torch.return_types.topk(
values=tensor([0.2046, 0.1021, 0.0610, 0.0376, 0.0262, 0.0219, 0.0216, 0.0128, 0.0126,
        0.0106], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919,  3617, 47727,  1390])), torch.return_types.topk(
values=tensor([0.6611, 0.0316, 0.0175, 0.0106, 0.0064, 0.0058, 0.0057, 0.0055, 0.0047,
        0.0044], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,  9919,  1111,  6091,   110, 41445])), torch.return_types.topk(
values=tensor([0.2473, 0.1015, 0.0597, 0.0351, 0.0211, 0.0189, 0.0177, 0.0130, 0.0113,
        0.0085], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919, 47727,  3617,  1390])), torch.return_types.topk(
values=tensor([0.7256, 0.0224, 0.0121, 0.0064, 0.0050, 0.0043, 0.0043, 0.0039, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091,  1111,   110, 56796,  9919,  3617])), torch.return_types.topk(
values=tensor([0.6128, 0.1782, 0.0307, 0.0269, 0.0080, 0.0063, 0.0057, 0.0054, 0.0041,
        0.0029], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 51174,  9919,    30, 21058])), torch.return_types.topk(
values=tensor([0.6099, 0.2209, 0.0283, 0.0222, 0.0041, 0.0039, 0.0038, 0.0037, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 51174, 21058, 60824,  1013, 45883,  9919])), torch.return_types.topk(
values=tensor([0.6079, 0.1675, 0.0310, 0.0267, 0.0093, 0.0074, 0.0054, 0.0054, 0.0052,
        0.0033], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  1013,    30, 51174,  9919,  4569, 23401])), torch.return_types.topk(
values=tensor([0.7085, 0.2062, 0.0121, 0.0096, 0.0031, 0.0021, 0.0015, 0.0013, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174, 21058,  9919])), torch.return_types.topk(
values=tensor([0.2947, 0.1093, 0.0871, 0.0428, 0.0283, 0.0204, 0.0184, 0.0175, 0.0131,
        0.0106], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  1390,  2398,  3991,    30,  9919])), torch.return_types.topk(
values=tensor([0.4690, 0.1140, 0.0640, 0.0161, 0.0156, 0.0144, 0.0132, 0.0079, 0.0058,
        0.0055], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  3991,  2398, 38982,  4569,  1390,    80, 51174])), torch.return_types.topk(
values=tensor([0.2496, 0.1000, 0.0823, 0.0511, 0.0234, 0.0234, 0.0215, 0.0195, 0.0187,
        0.0112], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,    30,  1390,  3991,  2398,  9919])), torch.return_types.topk(
values=tensor([0.4604, 0.1592, 0.0663, 0.0195, 0.0150, 0.0140, 0.0130, 0.0045, 0.0041,
        0.0034], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398,  3991, 38982,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([0.8901, 0.0053, 0.0031, 0.0026, 0.0020, 0.0019, 0.0018, 0.0018, 0.0017,
        0.0017], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911, 48446,    30, 30261, 29498,   409, 33622])), torch.return_types.topk(
values=tensor([0.9277, 0.0034, 0.0027, 0.0018, 0.0017, 0.0015, 0.0013, 0.0012, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 29498, 15588, 30502, 30261,  8911, 53208, 48446])), torch.return_types.topk(
values=tensor([0.8926, 0.0050, 0.0028, 0.0025, 0.0024, 0.0019, 0.0018, 0.0017, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911,    30, 29498, 30261, 48446, 33622,   409])), torch.return_types.topk(
values=tensor([0.8999, 0.0050, 0.0030, 0.0023, 0.0021, 0.0019, 0.0015, 0.0014, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588,   409,  9402])), torch.return_types.topk(
values=tensor([0.8252, 0.0263, 0.0162, 0.0156, 0.0090, 0.0051, 0.0044, 0.0038, 0.0018,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8198, 0.0399, 0.0331, 0.0097, 0.0093, 0.0040, 0.0036, 0.0020, 0.0014,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111,  1186, 51174, 55513])), torch.return_types.topk(
values=tensor([0.8291, 0.0260, 0.0155, 0.0147, 0.0087, 0.0067, 0.0052, 0.0039, 0.0018,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([0.7607, 0.0587, 0.0359, 0.0112, 0.0109, 0.0076, 0.0031, 0.0016, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,  1111, 15597, 55513, 51174])), torch.return_types.topk(
values=tensor([0.5488, 0.1754, 0.0293, 0.0097, 0.0074, 0.0045, 0.0045, 0.0036, 0.0033,
        0.0032], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077,  7610, 15588, 30261,  3991])), torch.return_types.topk(
values=tensor([0.5757, 0.1537, 0.0188, 0.0084, 0.0069, 0.0062, 0.0061, 0.0043, 0.0038,
        0.0036], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 15588,  7610, 20077,  3991, 30261])), torch.return_types.topk(
values=tensor([0.5625, 0.1611, 0.0294, 0.0093, 0.0087, 0.0043, 0.0042, 0.0035, 0.0034,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445, 20077,  7610, 15588, 30261,  3991])), torch.return_types.topk(
values=tensor([0.5229, 0.2031, 0.0162, 0.0099, 0.0043, 0.0039, 0.0039, 0.0038, 0.0036,
        0.0034], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 60824, 41445, 20077, 34059,  7680])), torch.return_types.topk(
values=tensor([0.6182, 0.0327, 0.0232, 0.0072, 0.0052, 0.0049, 0.0048, 0.0048, 0.0040,
        0.0039], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617,    30, 54203,   213,  1390,   336])), torch.return_types.topk(
values=tensor([0.7002, 0.0287, 0.0130, 0.0039, 0.0039, 0.0034, 0.0031, 0.0031, 0.0030,
        0.0029], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   336,   213, 41565,  3617, 38982])), torch.return_types.topk(
values=tensor([0.6465, 0.0291, 0.0203, 0.0073, 0.0061, 0.0051, 0.0043, 0.0039, 0.0034,
        0.0033], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,   213, 54203,  3617, 38982,  1390])), torch.return_types.topk(
values=tensor([0.7275, 0.0106, 0.0082, 0.0058, 0.0051, 0.0036, 0.0035, 0.0035, 0.0027,
        0.0025], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   336, 54203,   213,  3617, 64851, 41565])), torch.return_types.topk(
values=tensor([0.6489, 0.0711, 0.0408, 0.0349, 0.0116, 0.0096, 0.0084, 0.0077, 0.0052,
        0.0044], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7793, 0.0461, 0.0394, 0.0192, 0.0052, 0.0036, 0.0034, 0.0029, 0.0027,
        0.0017], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6475, 0.0726, 0.0374, 0.0338, 0.0119, 0.0098, 0.0089, 0.0083, 0.0057,
        0.0045], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,  1872,   649,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8003, 0.0360, 0.0244, 0.0232, 0.0053, 0.0040, 0.0032, 0.0029, 0.0023,
        0.0016], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([8.9844e-01, 1.8060e-04, 4.2081e-05, 3.2902e-05, 9.0003e-06, 7.8082e-06,
        7.3314e-06, 5.7220e-06, 4.8876e-06, 4.8876e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   30])), torch.return_types.topk(
values=tensor([9.1064e-01, 1.8501e-03, 1.7509e-03, 1.7509e-03, 8.2731e-04, 6.6757e-04,
        5.8889e-04, 1.5068e-04, 9.7275e-05, 8.7857e-05], dtype=torch.float16),
indices=tensor([  245,   845,   130,  1677, 28420, 49488,  9898, 10907, 30697,   190])), torch.return_types.topk(
values=tensor([9.0186e-01, 1.0413e-04, 3.4690e-05, 1.5557e-05, 7.6294e-06, 7.0930e-06,
        6.6161e-06, 5.1260e-06, 4.6492e-06, 3.8147e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,  9182,    13,     5,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.7456, 0.0688, 0.0386, 0.0089, 0.0075, 0.0058, 0.0016, 0.0013, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([36847, 48420, 67309,   487, 52698, 44514,   102, 55395,   673,     5])), torch.return_types.topk(
values=tensor([0.3193, 0.0670, 0.0582, 0.0237, 0.0214, 0.0145, 0.0129, 0.0127, 0.0102,
        0.0081], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  1111,  3617,  9919, 47727,  1390])), torch.return_types.topk(
values=tensor([0.7124, 0.0202, 0.0175, 0.0076, 0.0054, 0.0049, 0.0046, 0.0042, 0.0041,
        0.0039], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 56796,   110,  6091,  9919,  1111, 41445])), torch.return_types.topk(
values=tensor([0.3818, 0.0623, 0.0533, 0.0210, 0.0170, 0.0117, 0.0114, 0.0103, 0.0096,
        0.0064], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  1111,  3617,  9919, 47727,  1390])), torch.return_types.topk(
values=tensor([0.7378, 0.0183, 0.0130, 0.0052, 0.0044, 0.0042, 0.0038, 0.0036, 0.0033,
        0.0033], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091,   110,  1111, 56796,  3617,  9919])), torch.return_types.topk(
values=tensor([0.6304, 0.2079, 0.0258, 0.0148, 0.0064, 0.0063, 0.0034, 0.0034, 0.0025,
        0.0024], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 51174,  9919,    30, 21058])), torch.return_types.topk(
values=tensor([0.6606, 0.1952, 0.0193, 0.0180, 0.0054, 0.0044, 0.0040, 0.0028, 0.0025,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013, 51174,  9919, 21058,  4569])), torch.return_types.topk(
values=tensor([0.6250, 0.2029, 0.0237, 0.0163, 0.0073, 0.0054, 0.0039, 0.0034, 0.0033,
        0.0028], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30,  9919, 51174, 60824])), torch.return_types.topk(
values=tensor([0.7104, 0.2036, 0.0123, 0.0085, 0.0032, 0.0022, 0.0017, 0.0012, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.3237, 0.1268, 0.0806, 0.0326, 0.0318, 0.0212, 0.0166, 0.0126, 0.0108,
        0.0076], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,  1390,  3991,    30,  9919])), torch.return_types.topk(
values=tensor([0.4526, 0.1257, 0.0642, 0.0166, 0.0151, 0.0141, 0.0134, 0.0073, 0.0057,
        0.0050], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([0.2964, 0.1198, 0.0750, 0.0343, 0.0278, 0.0230, 0.0173, 0.0165, 0.0134,
        0.0077], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  1390,    30,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4482, 0.1599, 0.0671, 0.0203, 0.0159, 0.0130, 0.0127, 0.0049, 0.0041,
        0.0040], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398,  3991, 38982,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([0.8882, 0.0060, 0.0032, 0.0026, 0.0025, 0.0021, 0.0018, 0.0017, 0.0017,
        0.0016], dtype=torch.float16),
indices=tensor([41445,    80, 51174,  8911,    30, 48446, 30261, 33622, 29498,   409])), torch.return_types.topk(
values=tensor([0.9248, 0.0040, 0.0027, 0.0018, 0.0015, 0.0014, 0.0013, 0.0013, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 29498, 15588, 30502, 30261,  8911, 53208, 48446])), torch.return_types.topk(
values=tensor([0.8877, 0.0059, 0.0033, 0.0031, 0.0025, 0.0019, 0.0018, 0.0018, 0.0018,
        0.0015], dtype=torch.float16),
indices=tensor([41445,    80,    30, 51174,  8911, 29498, 48446, 33622, 30261,  1111])), torch.return_types.topk(
values=tensor([0.8843, 0.0062, 0.0032, 0.0028, 0.0025, 0.0022, 0.0018, 0.0015, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 51174, 48446, 30261, 15588,   409,  9402])), torch.return_types.topk(
values=tensor([0.8169, 0.0273, 0.0189, 0.0150, 0.0090, 0.0068, 0.0045, 0.0038, 0.0019,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8013, 0.0463, 0.0393, 0.0113, 0.0077, 0.0039, 0.0033, 0.0023, 0.0015,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 51174, 23904])), torch.return_types.topk(
values=tensor([0.8174, 0.0267, 0.0183, 0.0143, 0.0093, 0.0087, 0.0055, 0.0041, 0.0020,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,    30,   409, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7285, 0.0632, 0.0492, 0.0119, 0.0100, 0.0087, 0.0033, 0.0018, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502,  1111, 15597, 51174,  1186])), torch.return_types.topk(
values=tensor([0.5210, 0.1946, 0.0331, 0.0095, 0.0092, 0.0051, 0.0043, 0.0039, 0.0032,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 20077, 15588,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5503, 0.1704, 0.0207, 0.0081, 0.0072, 0.0064, 0.0059, 0.0040, 0.0039,
        0.0036], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 15588, 60824, 34059, 20077,  3991])), torch.return_types.topk(
values=tensor([0.5337, 0.1801, 0.0331, 0.0121, 0.0086, 0.0050, 0.0041, 0.0038, 0.0032,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 20077, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.4780, 0.2277, 0.0180, 0.0118, 0.0047, 0.0043, 0.0039, 0.0038, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 34059, 41445, 20077,  7680, 60824])), torch.return_types.topk(
values=tensor([0.6025, 0.0312, 0.0228, 0.0079, 0.0063, 0.0060, 0.0051, 0.0050, 0.0039,
        0.0037], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,  3617,    30,   213, 54203, 41565,   336])), torch.return_types.topk(
values=tensor([0.6914, 0.0252, 0.0124, 0.0042, 0.0041, 0.0038, 0.0036, 0.0031, 0.0031,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617,   336,   213, 41565, 38982])), torch.return_types.topk(
values=tensor([0.6343, 0.0272, 0.0202, 0.0079, 0.0077, 0.0053, 0.0047, 0.0045, 0.0033,
        0.0033], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,   213,  3617, 54203, 41565, 38982])), torch.return_types.topk(
values=tensor([0.6963, 0.0103, 0.0081, 0.0062, 0.0061, 0.0045, 0.0041, 0.0037, 0.0030,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,    34,  3617, 54203,   213,   449,  2398])), torch.return_types.topk(
values=tensor([0.6240, 0.0706, 0.0470, 0.0326, 0.0130, 0.0120, 0.0093, 0.0080, 0.0060,
        0.0046], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6499, 0.0789, 0.0696, 0.0273, 0.0079, 0.0055, 0.0042, 0.0041, 0.0037,
        0.0022], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6260, 0.0736, 0.0419, 0.0309, 0.0126, 0.0122, 0.0097, 0.0094, 0.0065,
        0.0047], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7798, 0.0356, 0.0305, 0.0232, 0.0065, 0.0044, 0.0038, 0.0033, 0.0029,
        0.0019], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([8.9893e-01, 1.6594e-04, 4.1783e-05, 3.8326e-05, 9.0599e-06, 7.4506e-06,
        7.3910e-06, 5.5432e-06, 5.2452e-06, 4.6492e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   30,   70])), torch.return_types.topk(
values=tensor([9.1064e-01, 1.1797e-03, 3.8600e-04, 2.8586e-04, 2.4533e-04, 2.2960e-04,
        1.6797e-04, 1.3876e-04, 1.2529e-04, 1.0473e-04], dtype=torch.float16),
indices=tensor([  959,   245,  2558,   210,   403,   846, 54781,  3146,  3735,  1694])), torch.return_types.topk(
values=tensor([9.0088e-01, 9.8884e-05, 3.6895e-05, 1.5974e-05, 7.5102e-06, 6.9737e-06,
        6.8545e-06, 4.8280e-06, 4.6492e-06, 3.8147e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,    13,  9182,     5,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.7563, 0.0511, 0.0215, 0.0191, 0.0162, 0.0077, 0.0049, 0.0022, 0.0022,
        0.0018], dtype=torch.float16),
indices=tensor([ 7455, 43463, 78563, 47493, 24886, 24414, 44514, 36927,     5, 43432])), torch.return_types.topk(
values=tensor([0.3042, 0.0668, 0.0590, 0.0220, 0.0214, 0.0156, 0.0133, 0.0131, 0.0089,
        0.0078], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  1111,  3617,  9919, 47727, 41565])), torch.return_types.topk(
values=tensor([0.6968, 0.0210, 0.0168, 0.0070, 0.0070, 0.0049, 0.0049, 0.0042, 0.0041,
        0.0038], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 56796, 38982,   110,  6091,  9919,  1111, 41445])), torch.return_types.topk(
values=tensor([0.3616, 0.0633, 0.0533, 0.0198, 0.0175, 0.0132, 0.0118, 0.0107, 0.0084,
        0.0074], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  1111,  3617,  9919, 47727,    30])), torch.return_types.topk(
values=tensor([0.7275, 0.0161, 0.0153, 0.0065, 0.0056, 0.0046, 0.0045, 0.0031, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,   110, 56796,  6091, 38982,  1111,  9919,  3617])), torch.return_types.topk(
values=tensor([0.6328, 0.2007, 0.0249, 0.0158, 0.0068, 0.0060, 0.0041, 0.0036, 0.0035,
        0.0023], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.6167, 0.2303, 0.0251, 0.0171, 0.0038, 0.0036, 0.0035, 0.0032, 0.0019,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013, 21058, 51174,  4569,  9919])), torch.return_types.topk(
values=tensor([0.6299, 0.1935, 0.0233, 0.0165, 0.0077, 0.0065, 0.0052, 0.0034, 0.0034,
        0.0027], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  4569,  9919, 51174, 60824])), torch.return_types.topk(
values=tensor([0.7158, 0.1973, 0.0117, 0.0091, 0.0036, 0.0020, 0.0018, 0.0013, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.3254, 0.1235, 0.0750, 0.0320, 0.0296, 0.0211, 0.0161, 0.0154, 0.0128,
        0.0082], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.4551, 0.1263, 0.0606, 0.0175, 0.0149, 0.0137, 0.0127, 0.0066, 0.0060,
        0.0045], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([0.3032, 0.1160, 0.0709, 0.0340, 0.0249, 0.0247, 0.0221, 0.0153, 0.0129,
        0.0084], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,    30,  2398,  1390,  3991, 27993])), torch.return_types.topk(
values=tensor([0.4797, 0.1486, 0.0464, 0.0198, 0.0182, 0.0104, 0.0095, 0.0049, 0.0039,
        0.0030], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,  1390,    80,   336])), torch.return_types.topk(
values=tensor([0.8198, 0.0059, 0.0059, 0.0052, 0.0042, 0.0038, 0.0035, 0.0034, 0.0033,
        0.0028], dtype=torch.float16),
indices=tensor([41445,  8911,    80,    30, 33622, 51174, 48446, 30261, 29498,   409])), torch.return_types.topk(
values=tensor([0.9058, 0.0085, 0.0041, 0.0041, 0.0034, 0.0030, 0.0021, 0.0015, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([41445,  2071, 30502, 33622, 29498,   409,  8911,   354,   213,  2214])), torch.return_types.topk(
values=tensor([0.8394, 0.0040, 0.0038, 0.0038, 0.0036, 0.0033, 0.0032, 0.0031, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([41445,    80, 33622,   409,  8911,    30, 48446,  9971, 51174, 30261])), torch.return_types.topk(
values=tensor([0.8970, 0.0029, 0.0027, 0.0026, 0.0025, 0.0024, 0.0019, 0.0018, 0.0016,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 51174, 15588,   409, 48446, 30261,  8911, 33622])), torch.return_types.topk(
values=tensor([0.8955, 0.0042, 0.0031, 0.0027, 0.0018, 0.0016, 0.0013, 0.0013, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 33622, 48446, 15588,  1828, 30261,   409])), torch.return_types.topk(
values=tensor([8.9941e-01, 2.8915e-02, 3.1204e-03, 2.4300e-03, 2.3727e-03, 1.3008e-03,
        1.2655e-03, 1.1435e-03, 9.3651e-04, 7.0715e-04], dtype=torch.float16),
indices=tensor([41445,  1010, 29498, 15588,    80, 51174, 33622, 48446, 30502,  8911])), torch.return_types.topk(
values=tensor([0.8867, 0.0051, 0.0049, 0.0045, 0.0021, 0.0015, 0.0014, 0.0012, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445,  8911, 29498,    80, 48446, 51174,  1828, 15588,   409, 30261])), torch.return_types.topk(
values=tensor([0.7515, 0.0395, 0.0222, 0.0211, 0.0155, 0.0100, 0.0043, 0.0040, 0.0031,
        0.0019], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 20077, 53208,    30,  1111, 30502, 55513, 15597])), torch.return_types.topk(
values=tensor([0.5981, 0.0785, 0.0433, 0.0404, 0.0315, 0.0253, 0.0210, 0.0171, 0.0063,
        0.0017], dtype=torch.float16),
indices=tensor([41445,  2071, 30502, 15588, 20077, 53208,  1186,   409, 55513,  1111])), torch.return_types.topk(
values=tensor([0.7607, 0.0416, 0.0243, 0.0228, 0.0130, 0.0067, 0.0051, 0.0037, 0.0027,
        0.0023], dtype=torch.float16),
indices=tensor([41445, 15588, 20077,   409, 53208,    30,  1111, 30502, 55513, 15597])), torch.return_types.topk(
values=tensor([0.7324, 0.0731, 0.0302, 0.0179, 0.0168, 0.0093, 0.0049, 0.0025, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,  1111,  1186, 55513, 15597])), torch.return_types.topk(
values=tensor([0.7974, 0.0446, 0.0189, 0.0145, 0.0107, 0.0058, 0.0037, 0.0024, 0.0023,
        0.0020], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 20077, 53208, 55513, 30502, 15597,  1111,    30])), torch.return_types.topk(
values=tensor([0.5854, 0.1379, 0.1108, 0.0272, 0.0207, 0.0098, 0.0063, 0.0042, 0.0039,
        0.0021], dtype=torch.float16),
indices=tensor([41445,  1010, 15588, 53208, 20077, 30502,   409,  1111,  1186, 55513])), torch.return_types.topk(
values=tensor([0.7471, 0.0632, 0.0418, 0.0173, 0.0107, 0.0031, 0.0025, 0.0025, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 30502, 20077, 15597,  1111,  9402,  1186])), torch.return_types.topk(
values=tensor([0.5659, 0.1499, 0.0284, 0.0094, 0.0093, 0.0048, 0.0045, 0.0044, 0.0035,
        0.0032], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445,  7610, 34059,  1657, 30261, 15588])), torch.return_types.topk(
values=tensor([0.4819, 0.0762, 0.0733, 0.0074, 0.0068, 0.0061, 0.0057, 0.0052, 0.0050,
        0.0046], dtype=torch.float16),
indices=tensor([ 9971,  2071, 41565, 24501, 60824, 21405, 41445,  7680,  1186, 20077])), torch.return_types.topk(
values=tensor([0.4707, 0.2172, 0.0325, 0.0117, 0.0092, 0.0057, 0.0052, 0.0044, 0.0041,
        0.0039], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991,  7610, 34059])), torch.return_types.topk(
values=tensor([0.4766, 0.2115, 0.0159, 0.0083, 0.0069, 0.0066, 0.0056, 0.0049, 0.0049,
        0.0045], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 15588, 41445, 60824, 20077, 34059,  7680])), torch.return_types.topk(
values=tensor([0.7642, 0.0684, 0.0222, 0.0038, 0.0028, 0.0028, 0.0027, 0.0025, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 54203, 30261, 41445,    30, 34059,  1657])), torch.return_types.topk(
values=tensor([0.4604, 0.2445, 0.1019, 0.0087, 0.0070, 0.0035, 0.0035, 0.0035, 0.0032,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565,  1010, 24501,  7610, 60824, 20077,  7680, 15588, 34059])), torch.return_types.topk(
values=tensor([0.5913, 0.1460, 0.0163, 0.0068, 0.0059, 0.0048, 0.0041, 0.0037, 0.0033,
        0.0032], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059,  1657, 40315, 41445, 15588, 30261])), torch.return_types.topk(
values=tensor([0.5942, 0.0307, 0.0220, 0.0073, 0.0060, 0.0054, 0.0054, 0.0050, 0.0045,
        0.0044], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   213,    30, 54203,    34,  1390, 58401,  2398])), torch.return_types.topk(
values=tensor([0.6113, 0.0271, 0.0134, 0.0125, 0.0097, 0.0086, 0.0074, 0.0064, 0.0055,
        0.0049], dtype=torch.float16),
indices=tensor([30261, 41445,   213,  2071,  9971,    34, 54203,   336, 60824, 33622])), torch.return_types.topk(
values=tensor([0.5386, 0.0331, 0.0302, 0.0096, 0.0075, 0.0072, 0.0065, 0.0063, 0.0057,
        0.0055], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,   213,   336,  1390, 54203,  3617])), torch.return_types.topk(
values=tensor([0.5981, 0.0227, 0.0168, 0.0081, 0.0071, 0.0061, 0.0051, 0.0044, 0.0042,
        0.0039], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,   336,    34,   213, 54203, 41565,  3617,  1390])), torch.return_types.topk(
values=tensor([0.7744, 0.0225, 0.0098, 0.0058, 0.0057, 0.0030, 0.0023, 0.0021, 0.0020,
        0.0018], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   354,   449,  3617,    30, 58401])), torch.return_types.topk(
values=tensor([0.6050, 0.0613, 0.0173, 0.0147, 0.0075, 0.0060, 0.0047, 0.0037, 0.0029,
        0.0029], dtype=torch.float16),
indices=tensor([30261,  1010, 41445,  9971,    34, 54203, 41565,   336,   354,  7680])), torch.return_types.topk(
values=tensor([0.7583, 0.0094, 0.0090, 0.0075, 0.0050, 0.0028, 0.0025, 0.0024, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([30261,    34, 41445,  9971,   213, 54203,  5745,   336,  3617,  1708])), torch.return_types.topk(
values=tensor([0.5039, 0.1235, 0.0491, 0.0253, 0.0199, 0.0172, 0.0171, 0.0120, 0.0118,
        0.0064], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  3991,  1872, 47727])), torch.return_types.topk(
values=tensor([0.4846, 0.1854, 0.0737, 0.0263, 0.0205, 0.0181, 0.0101, 0.0077, 0.0075,
        0.0058], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  2071,  1872,  3175,   980,  3991,   649])), torch.return_types.topk(
values=tensor([0.5820, 0.0906, 0.0381, 0.0328, 0.0210, 0.0134, 0.0127, 0.0122, 0.0071,
        0.0059], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,  1872,   980,   649,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7178, 0.0710, 0.0352, 0.0210, 0.0089, 0.0064, 0.0063, 0.0057, 0.0034,
        0.0026], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.7393, 0.0715, 0.0265, 0.0113, 0.0083, 0.0081, 0.0070, 0.0064, 0.0048,
        0.0032], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,  1872,   649,  3991,  3175])), torch.return_types.topk(
values=tensor([0.7891, 0.0428, 0.0425, 0.0074, 0.0044, 0.0043, 0.0038, 0.0034, 0.0029,
        0.0024], dtype=torch.float16),
indices=tensor([ 5442, 45883, 21405,  1872,  4569,   649,   980,  1390,  3991, 57667])), torch.return_types.topk(
values=tensor([0.8242, 0.0444, 0.0151, 0.0118, 0.0074, 0.0065, 0.0058, 0.0022, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   649,   980,  1872,  1390,  3991,  2347])), torch.return_types.topk(
values=tensor([0.2172, 0.1691, 0.0898, 0.0857, 0.0325, 0.0233, 0.0212, 0.0205, 0.0132,
        0.0108], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 38982, 45883,   649,  2398,   980, 57667])), torch.return_types.topk(
values=tensor([0.7251, 0.0801, 0.0361, 0.0217, 0.0150, 0.0114, 0.0042, 0.0031, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([13985,    24, 16747,  1955,  3522, 47454,   423,   692,  6719,  9755])), torch.return_types.topk(
values=tensor([0.5815, 0.0585, 0.0193, 0.0128, 0.0094, 0.0089, 0.0088, 0.0077, 0.0068,
        0.0062], dtype=torch.float16),
indices=tensor([   6,  237,    4,  323,    2,   64, 9182, 2304,  656,  238])), torch.return_types.topk(
values=tensor([7.8174e-01, 1.1987e-01, 1.1238e-02, 2.4490e-03, 1.4858e-03, 1.0748e-03,
        9.6703e-04, 4.3750e-04, 4.2248e-04, 3.9530e-04], dtype=torch.float16),
indices=tensor([45889, 52452, 13855, 19293, 27078, 59793,   447, 61818, 20280, 53002])), torch.return_types.topk(
values=tensor([8.4912e-01, 3.8483e-02, 1.6518e-03, 7.4482e-04, 3.3832e-04, 2.7180e-04,
        2.0123e-04, 1.3196e-04, 1.0896e-04, 1.0812e-04], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   30, 1149,   13,  644,   40, 2207])), torch.return_types.topk(
values=tensor([9.3164e-01, 9.5510e-04, 4.4942e-04, 3.5262e-04, 3.4595e-04, 2.8014e-04,
        2.5415e-04, 2.2948e-04, 2.1732e-04, 1.6856e-04], dtype=torch.float16),
indices=tensor([12131, 29306, 13311,   701, 38751,  9276,  1400,   158,  2997, 55345])), torch.return_types.topk(
values=tensor([8.9844e-01, 1.4865e-04, 8.6010e-05, 4.0948e-05, 9.8944e-06, 9.4175e-06,
        8.9407e-06, 8.7619e-06, 5.9009e-06, 4.7684e-06], dtype=torch.float16),
indices=tensor([   2,    6,    7,    4, 9182,   30,   13,    5, 2207,   70])), torch.return_types.topk(
values=tensor([0.1840, 0.0761, 0.0588, 0.0332, 0.0191, 0.0180, 0.0179, 0.0149, 0.0124,
        0.0116], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  1111,  1390, 47727, 51174])), torch.return_types.topk(
values=tensor([0.8101, 0.0189, 0.0064, 0.0061, 0.0058, 0.0029, 0.0028, 0.0025, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([60824,  3991, 38982,  2071,  9971, 47727, 41445,   110, 56796,  9919])), torch.return_types.topk(
values=tensor([0.2141, 0.0819, 0.0706, 0.0233, 0.0233, 0.0195, 0.0134, 0.0119, 0.0116,
        0.0115], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 41445,  1111, 38982,  9919, 47727,  3617,  1390])), torch.return_types.topk(
values=tensor([0.6758, 0.0239, 0.0235, 0.0080, 0.0065, 0.0057, 0.0045, 0.0044, 0.0039,
        0.0036], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,   110,  1111, 38982,  9919, 41445,  6091, 56796])), torch.return_types.topk(
values=tensor([0.4707, 0.0864, 0.0392, 0.0146, 0.0103, 0.0071, 0.0067, 0.0066, 0.0061,
        0.0057], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  1111,   110,  3617,  9919, 47727])), torch.return_types.topk(
values=tensor([0.8325, 0.0117, 0.0095, 0.0041, 0.0033, 0.0026, 0.0024, 0.0022, 0.0021,
        0.0021], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  1010,  1111, 41445,  9919,   110,  6091, 38982])), torch.return_types.topk(
values=tensor([0.6953, 0.0210, 0.0174, 0.0068, 0.0062, 0.0054, 0.0042, 0.0037, 0.0036,
        0.0032], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982,   110,  6091,  3617, 41445,  9919, 56796])), torch.return_types.topk(
values=tensor([0.6167, 0.1660, 0.0293, 0.0185, 0.0121, 0.0081, 0.0058, 0.0058, 0.0055,
        0.0034], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 51174,    30, 23401])), torch.return_types.topk(
values=tensor([0.4895, 0.2747, 0.0303, 0.0285, 0.0208, 0.0104, 0.0096, 0.0044, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  2071,  3991, 60824,  1013, 21058, 45883,   291])), torch.return_types.topk(
values=tensor([0.6045, 0.1993, 0.0270, 0.0166, 0.0112, 0.0078, 0.0042, 0.0031, 0.0029,
        0.0027], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 51174, 23401,    30])), torch.return_types.topk(
values=tensor([0.6494, 0.2091, 0.0160, 0.0148, 0.0080, 0.0044, 0.0028, 0.0025, 0.0024,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  1013, 60824,  4569,  9919, 51174, 23401])), torch.return_types.topk(
values=tensor([0.5615, 0.2888, 0.0216, 0.0143, 0.0073, 0.0045, 0.0023, 0.0021, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 51174,  9919, 23401, 60824])), torch.return_types.topk(
values=tensor([0.6089, 0.2104, 0.0274, 0.0164, 0.0150, 0.0068, 0.0045, 0.0031, 0.0021,
        0.0021], dtype=torch.float16),
indices=tensor([ 4300, 30360,  1010,   980,  3991, 60824,  1013, 23401, 51174,  9919])), torch.return_types.topk(
values=tensor([0.6523, 0.2495, 0.0177, 0.0059, 0.0039, 0.0020, 0.0018, 0.0014, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174,  9919, 21058])), torch.return_types.topk(
values=tensor([0.2411, 0.1061, 0.0729, 0.0559, 0.0394, 0.0307, 0.0277, 0.0138, 0.0138,
        0.0129], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  1390,  2398,  9919,    30,  3991])), torch.return_types.topk(
values=tensor([0.3845, 0.1693, 0.0558, 0.0242, 0.0227, 0.0169, 0.0155, 0.0099, 0.0099,
        0.0079], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  3991,  4569,  2071, 38982, 60824,  2398,  2347])), torch.return_types.topk(
values=tensor([0.3035, 0.1090, 0.0588, 0.0407, 0.0359, 0.0239, 0.0225, 0.0134, 0.0107,
        0.0106], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,  1390,  3991, 27993,    30])), torch.return_types.topk(
values=tensor([0.4160, 0.1519, 0.0554, 0.0258, 0.0233, 0.0128, 0.0126, 0.0094, 0.0059,
        0.0046], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398,  3991, 38982,  1390,   336, 60824])), torch.return_types.topk(
values=tensor([0.2759, 0.2183, 0.0848, 0.0257, 0.0225, 0.0194, 0.0172, 0.0163, 0.0074,
        0.0059], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  2398,  1390,  3991,    80,   336])), torch.return_types.topk(
values=tensor([0.3801, 0.1304, 0.0666, 0.0522, 0.0228, 0.0130, 0.0121, 0.0079, 0.0076,
        0.0073], dtype=torch.float16),
indices=tensor([  980, 30360,  1010,  4300,  3991,  2398, 38982,  1390, 60824,  4569])), torch.return_types.topk(
values=tensor([0.5044, 0.1599, 0.0484, 0.0151, 0.0115, 0.0098, 0.0094, 0.0052, 0.0048,
        0.0035], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569, 38982,  3991,  2398,  1390,  2347,    80])), torch.return_types.topk(
values=tensor([0.9341, 0.0023, 0.0019, 0.0017, 0.0017, 0.0017, 0.0015, 0.0012, 0.0011,
        0.0009], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 29498, 48446, 33622,  8911, 30261,    30, 15588])), torch.return_types.topk(
values=tensor([9.5166e-01, 2.1305e-03, 1.6861e-03, 1.6212e-03, 1.4820e-03, 1.1101e-03,
        1.0719e-03, 9.9850e-04, 7.9632e-04, 6.9761e-04], dtype=torch.float16),
indices=tensor([41445, 33622,    80, 51174, 30502, 29498, 30261, 15588, 48446, 53208])), torch.return_types.topk(
values=tensor([9.5996e-01, 1.7004e-03, 1.4210e-03, 1.4210e-03, 1.3142e-03, 1.0977e-03,
        9.4271e-04, 8.6164e-04, 8.5497e-04, 5.8556e-04], dtype=torch.float16),
indices=tensor([41445, 30502, 51174, 33622,    80, 15588, 53208, 29498, 30261, 20077])), torch.return_types.topk(
values=tensor([9.5508e-01, 1.8730e-03, 1.7052e-03, 1.5163e-03, 1.4935e-03, 1.1539e-03,
        1.0061e-03, 9.4175e-04, 8.9502e-04, 7.3910e-04], dtype=torch.float16),
indices=tensor([41445, 33622, 30502,    80, 51174, 29498, 30261, 15588, 53208,  8911])), torch.return_types.topk(
values=tensor([9.4922e-01, 2.1248e-03, 2.1095e-03, 2.0924e-03, 1.5917e-03, 1.4267e-03,
        1.1740e-03, 1.0357e-03, 9.7656e-04, 8.1921e-04], dtype=torch.float16),
indices=tensor([41445, 51174, 33622, 30502, 15588,    80, 30261, 29498, 53208, 20077])), torch.return_types.topk(
values=tensor([9.4434e-01, 2.7370e-03, 2.0809e-03, 2.0809e-03, 1.5593e-03, 1.3866e-03,
        1.3599e-03, 1.3132e-03, 9.3842e-04, 8.6451e-04], dtype=torch.float16),
indices=tensor([41445, 33622, 51174, 30502,    80, 29498, 15588, 30261, 53208,  8911])), torch.return_types.topk(
values=tensor([0.8706, 0.0267, 0.0194, 0.0145, 0.0035, 0.0031, 0.0029, 0.0025, 0.0018,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,    30, 30502,   409,  1111, 55513,     7])), torch.return_types.topk(
values=tensor([0.8691, 0.0307, 0.0221, 0.0155, 0.0091, 0.0041, 0.0017, 0.0014, 0.0009,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186, 55513,  1111, 51174,   409])), torch.return_types.topk(
values=tensor([8.5303e-01, 3.0579e-02, 2.4567e-02, 1.9135e-02, 1.0994e-02, 5.7907e-03,
        2.2411e-03, 1.6985e-03, 8.6403e-04, 8.2159e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186,  1111, 55513, 51174,   409])), torch.return_types.topk(
values=tensor([8.8818e-01, 2.2064e-02, 1.6525e-02, 1.4580e-02, 9.0561e-03, 3.0804e-03,
        1.6108e-03, 1.1206e-03, 7.9107e-04, 7.6675e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,  1186,  1111, 55513,   409, 51174])), torch.return_types.topk(
values=tensor([0.8374, 0.0362, 0.0271, 0.0170, 0.0113, 0.0070, 0.0030, 0.0019, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186,  1111, 55513, 51174,   409])), torch.return_types.topk(
values=tensor([0.8730, 0.0270, 0.0172, 0.0149, 0.0099, 0.0041, 0.0023, 0.0013, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186,  1111, 55513, 51174,   409])), torch.return_types.topk(
values=tensor([0.4727, 0.2303, 0.0265, 0.0139, 0.0079, 0.0076, 0.0048, 0.0044, 0.0039,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991,  7610, 30261])), torch.return_types.topk(
values=tensor([0.4622, 0.1881, 0.0201, 0.0158, 0.0135, 0.0086, 0.0072, 0.0070, 0.0058,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 15588, 20077,  7610,  3991,  7680])), torch.return_types.topk(
values=tensor([0.4602, 0.1530, 0.0336, 0.0262, 0.0148, 0.0096, 0.0089, 0.0087, 0.0045,
        0.0040], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 20077, 15588,  3991, 60824,  7680, 30261])), torch.return_types.topk(
values=tensor([0.5654, 0.1223, 0.0245, 0.0233, 0.0078, 0.0077, 0.0053, 0.0050, 0.0041,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 60824, 20077, 15588,  3991, 30261,  7610])), torch.return_types.topk(
values=tensor([0.4463, 0.1483, 0.0381, 0.0260, 0.0143, 0.0113, 0.0111, 0.0093, 0.0051,
        0.0044], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 20077,  3991, 15588, 60824,  7680, 30261])), torch.return_types.topk(
values=tensor([0.5410, 0.1216, 0.0303, 0.0238, 0.0087, 0.0079, 0.0067, 0.0066, 0.0046,
        0.0034], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 60824, 20077,  3991, 15588, 30261,  7680])), torch.return_types.topk(
values=tensor([0.6572, 0.0636, 0.0232, 0.0050, 0.0049, 0.0045, 0.0043, 0.0040, 0.0039,
        0.0036], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 41565,  1390, 38982, 54203,    30,    34,   213])), torch.return_types.topk(
values=tensor([0.6626, 0.0531, 0.0157, 0.0049, 0.0049, 0.0047, 0.0047, 0.0043, 0.0035,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 41565, 60824, 38982, 54203,  1390,   213,  3617])), torch.return_types.topk(
values=tensor([0.6016, 0.1078, 0.0334, 0.0057, 0.0056, 0.0050, 0.0046, 0.0038, 0.0034,
        0.0033], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390, 41565, 38982, 54203, 20077,   213, 60824])), torch.return_types.topk(
values=tensor([0.6924, 0.0753, 0.0235, 0.0044, 0.0038, 0.0035, 0.0032, 0.0032, 0.0030,
        0.0025], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 38982,  1390, 54203, 41565,   213, 33622, 60824])), torch.return_types.topk(
values=tensor([0.5435, 0.1232, 0.0394, 0.0081, 0.0069, 0.0059, 0.0051, 0.0042, 0.0041,
        0.0039], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390, 41565, 38982, 54203,   213, 20077, 60824])), torch.return_types.topk(
values=tensor([0.6523, 0.0876, 0.0278, 0.0052, 0.0050, 0.0040, 0.0039, 0.0038, 0.0035,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390, 38982, 54203,   213, 41565, 33622, 60824])), torch.return_types.topk(
values=tensor([0.7529, 0.0516, 0.0352, 0.0197, 0.0077, 0.0068, 0.0059, 0.0059, 0.0036,
        0.0030], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,  1872,   649,  3991,  3175])), torch.return_types.topk(
values=tensor([0.8071, 0.0378, 0.0331, 0.0135, 0.0056, 0.0037, 0.0036, 0.0028, 0.0026,
        0.0014], dtype=torch.float16),
indices=tensor([ 5442, 45883, 21405,  4569,   980,  1872,   649,  3991,  1390, 47727])), torch.return_types.topk(
values=tensor([0.8008, 0.0411, 0.0331, 0.0162, 0.0050, 0.0050, 0.0045, 0.0036, 0.0023,
        0.0016], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.8105, 0.0388, 0.0298, 0.0182, 0.0055, 0.0044, 0.0042, 0.0032, 0.0017,
        0.0015], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1872,   649,   980,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.7476, 0.0559, 0.0467, 0.0189, 0.0061, 0.0061, 0.0053, 0.0051, 0.0028,
        0.0021], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,  9919])), torch.return_types.topk(
values=tensor([0.7676, 0.0510, 0.0391, 0.0209, 0.0060, 0.0053, 0.0052, 0.0045, 0.0022,
        0.0019], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1872,   980,   649,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([8.9697e-01, 1.3304e-04, 5.8353e-05, 4.5896e-05, 9.6560e-06, 7.9870e-06,
        6.7353e-06, 6.6757e-06, 5.4240e-06, 4.5896e-06], dtype=torch.float16),
indices=tensor([   2,    6,    7,    4,    5,   13, 9182,   30, 2207,   22])), torch.return_types.topk(
values=tensor([0.5732, 0.2974, 0.0019, 0.0019, 0.0017, 0.0014, 0.0013, 0.0012, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([ 4725, 21314, 61026,  3834,  9419,  6149,  4473, 60618, 29044,     6])), torch.return_types.topk(
values=tensor([8.9795e-01, 9.6679e-05, 5.2333e-05, 1.5259e-05, 1.0192e-05, 6.9141e-06,
        5.2452e-06, 4.5300e-06, 3.9935e-06, 3.7551e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   22])), torch.return_types.topk(
values=tensor([8.9697e-01, 9.6560e-05, 5.3763e-05, 1.5080e-05, 9.3579e-06, 6.8545e-06,
        5.4240e-06, 4.4703e-06, 4.1723e-06, 3.6955e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   22])), torch.return_types.topk(
values=tensor([8.9502e-01, 2.2621e-03, 3.4165e-04, 1.6844e-04, 1.1355e-04, 2.6762e-05,
        1.9729e-05, 1.9550e-05, 1.7583e-05, 1.7047e-05], dtype=torch.float16),
indices=tensor([   2,    6, 9182,    7,    4,   13,   20,  732, 2207,   30])), torch.return_types.topk(
values=tensor([8.9893e-01, 8.9467e-05, 5.0187e-05, 1.0014e-05, 8.2850e-06, 6.0797e-06,
        5.7817e-06, 4.2319e-06, 4.0531e-06, 3.0398e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.2457, 0.1169, 0.0440, 0.0417, 0.0320, 0.0225, 0.0170, 0.0112, 0.0099,
        0.0094], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 41445, 38982,  1111,  9919,  4300, 41565,  3617])), torch.return_types.topk(
values=tensor([0.6230, 0.0519, 0.0112, 0.0100, 0.0091, 0.0089, 0.0078, 0.0075, 0.0074,
        0.0059], dtype=torch.float16),
indices=tensor([60824,  3991, 38982,  6091,  4725,  9919, 41445,  9971,  1111,  4300])), torch.return_types.topk(
values=tensor([0.3765, 0.1005, 0.0339, 0.0233, 0.0216, 0.0204, 0.0152, 0.0104, 0.0102,
        0.0079], dtype=torch.float16),
indices=tensor([60824,  3991, 41445,  9971,  9919, 38982,  1111,  6091,  4300, 51174])), torch.return_types.topk(
values=tensor([0.4778, 0.0532, 0.0292, 0.0274, 0.0244, 0.0173, 0.0102, 0.0097, 0.0078,
        0.0071], dtype=torch.float16),
indices=tensor([60824,  3991, 38982, 41445,  9971,  9919,  1111,  6091,  4300, 31626])), torch.return_types.topk(
values=tensor([0.3025, 0.1321, 0.0361, 0.0288, 0.0241, 0.0231, 0.0184, 0.0106, 0.0100,
        0.0098], dtype=torch.float16),
indices=tensor([60824,  3991, 41445,  9919,  9971, 38982,  1111,  6091,  4300, 51174])), torch.return_types.topk(
values=tensor([0.3904, 0.0787, 0.0355, 0.0320, 0.0262, 0.0253, 0.0137, 0.0101, 0.0097,
        0.0087], dtype=torch.float16),
indices=tensor([60824,  3991, 38982, 41445,  9971,  9919,  1111,  6091, 31626, 51174])), torch.return_types.topk(
values=tensor([0.7842, 0.1147, 0.0158, 0.0119, 0.0044, 0.0031, 0.0026, 0.0024, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  1013,  4569, 51174, 60824, 23401,  9919])), torch.return_types.topk(
values=tensor([0.7476, 0.1052, 0.0217, 0.0127, 0.0086, 0.0058, 0.0056, 0.0034, 0.0033,
        0.0029], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  4725,  1013, 51174,  9919, 23401])), torch.return_types.topk(
values=tensor([0.7148, 0.1364, 0.0269, 0.0117, 0.0057, 0.0044, 0.0043, 0.0042, 0.0034,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824, 51174,  1013,  9919, 23401,  4569])), torch.return_types.topk(
values=tensor([0.7197, 0.1484, 0.0198, 0.0119, 0.0053, 0.0038, 0.0034, 0.0034, 0.0025,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824, 51174,  1013,  9919, 23401,  4569])), torch.return_types.topk(
values=tensor([0.6782, 0.1207, 0.0404, 0.0139, 0.0073, 0.0070, 0.0068, 0.0058, 0.0053,
        0.0026], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  9919, 51174,  1013, 23401, 45883])), torch.return_types.topk(
values=tensor([0.6909, 0.1298, 0.0316, 0.0141, 0.0072, 0.0062, 0.0060, 0.0047, 0.0040,
        0.0025], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824, 51174,  9919,  1013, 23401,  4569])), torch.return_types.topk(
values=tensor([0.3127, 0.1254, 0.1055, 0.0535, 0.0332, 0.0198, 0.0138, 0.0134, 0.0090,
        0.0081], dtype=torch.float16),
indices=tensor([  980,  4300, 30360, 38982,  4569,  1390,  2398,  3991, 20076,  9919])), torch.return_types.topk(
values=tensor([0.4058, 0.1237, 0.0837, 0.0805, 0.0161, 0.0126, 0.0116, 0.0094, 0.0085,
        0.0063], dtype=torch.float16),
indices=tensor([  980,  4725,  4300, 30360, 38982,  2398,  4569,  3991,  1390, 60824])), torch.return_types.topk(
values=tensor([0.2651, 0.1620, 0.1055, 0.0419, 0.0192, 0.0179, 0.0176, 0.0138, 0.0098,
        0.0092], dtype=torch.float16),
indices=tensor([  980,  4300, 30360, 38982,  1390,  4569,  3991,  9919, 60824, 51174])), torch.return_types.topk(
values=tensor([0.3145, 0.1342, 0.1036, 0.0393, 0.0182, 0.0175, 0.0133, 0.0109, 0.0105,
        0.0095], dtype=torch.float16),
indices=tensor([  980,  4300, 30360, 38982,  4569,  1390,  3991,  9919,  2398, 20076])), torch.return_types.topk(
values=tensor([0.2201, 0.1573, 0.0896, 0.0461, 0.0267, 0.0251, 0.0197, 0.0194, 0.0129,
        0.0113], dtype=torch.float16),
indices=tensor([  980,  4300, 30360, 38982,  1390,  3991,  4569,  9919, 51174, 60824])), torch.return_types.topk(
values=tensor([0.2617, 0.1337, 0.0898, 0.0466, 0.0240, 0.0196, 0.0193, 0.0160, 0.0116,
        0.0109], dtype=torch.float16),
indices=tensor([  980,  4300, 30360, 38982,  1390,  4569,  3991,  9919, 20076, 60824])), torch.return_types.topk(
values=tensor([9.3213e-01, 2.1801e-03, 1.9236e-03, 1.7929e-03, 1.7643e-03, 1.5697e-03,
        1.4458e-03, 1.1530e-03, 9.9754e-04, 7.5293e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 51174,  8911, 48446, 33622,    30, 30261, 58599])), torch.return_types.topk(
values=tensor([9.4238e-01, 2.1439e-03, 2.0866e-03, 1.8768e-03, 1.4277e-03, 1.3628e-03,
        1.1168e-03, 9.8515e-04, 8.0395e-04, 7.7915e-04], dtype=torch.float16),
indices=tensor([41445, 51174,    80, 29498, 53208, 30502, 15588,  8911, 48446,  2214])), torch.return_types.topk(
values=tensor([9.6387e-01, 1.3714e-03, 1.2445e-03, 1.1063e-03, 9.1028e-04, 8.7881e-04,
        8.5497e-04, 6.7139e-04, 6.2561e-04, 5.8794e-04], dtype=torch.float16),
indices=tensor([41445, 30502,    80, 51174, 53208, 29498, 33622,  8911, 15588, 30261])), torch.return_types.topk(
values=tensor([9.5947e-01, 1.3819e-03, 1.3390e-03, 1.1539e-03, 1.1501e-03, 1.1234e-03,
        9.4223e-04, 8.2493e-04, 6.9475e-04, 6.0844e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502, 29498, 51174, 33622,  8911, 53208, 30261,  2214])), torch.return_types.topk(
values=tensor([9.5508e-01, 1.6146e-03, 1.6146e-03, 1.4820e-03, 1.2426e-03, 1.0061e-03,
        9.6416e-04, 8.7452e-04, 8.0252e-04, 7.5960e-04], dtype=torch.float16),
indices=tensor([41445, 30502, 51174,    80, 33622, 29498, 53208, 15588, 30261,  8911])), torch.return_types.topk(
values=tensor([9.5117e-01, 1.5831e-03, 1.5640e-03, 1.5583e-03, 1.5526e-03, 1.3275e-03,
        1.0710e-03, 8.9836e-04, 8.7070e-04, 7.4196e-04], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30502, 33622, 29498,  8911, 30261, 53208, 15588])), torch.return_types.topk(
values=tensor([8.6768e-01, 2.4612e-02, 2.2415e-02, 9.6359e-03, 4.3106e-03, 3.9864e-03,
        3.5725e-03, 2.0847e-03, 1.4496e-03, 8.6546e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 20077,   409, 30502,    30,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8198, 0.0516, 0.0363, 0.0107, 0.0070, 0.0020, 0.0020, 0.0020, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1111,   409,  1186, 51174, 55513])), torch.return_types.topk(
values=tensor([8.7012e-01, 2.9083e-02, 2.2827e-02, 1.1124e-02, 9.2926e-03, 2.3308e-03,
        1.3494e-03, 1.1816e-03, 1.1358e-03, 6.7329e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1186,  1111, 55513,   409, 51174])), torch.return_types.topk(
values=tensor([8.9404e-01, 2.3636e-02, 1.7166e-02, 9.1858e-03, 5.7945e-03, 1.2980e-03,
        1.0595e-03, 9.7561e-04, 7.9346e-04, 6.2275e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1186,  1111,   409, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8594, 0.0266, 0.0266, 0.0113, 0.0110, 0.0028, 0.0018, 0.0015, 0.0013,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,  1186,  1111,   409, 55513, 51174])), torch.return_types.topk(
values=tensor([8.8428e-01, 2.2308e-02, 2.0309e-02, 9.7427e-03, 6.9122e-03, 1.6413e-03,
        1.4429e-03, 1.2789e-03, 9.1028e-04, 7.9679e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1186,  1111,   409, 55513, 51174])), torch.return_types.topk(
values=tensor([0.4424, 0.2642, 0.0318, 0.0091, 0.0075, 0.0054, 0.0051, 0.0037, 0.0037,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 20077, 15588,  3991, 34059])), torch.return_types.topk(
values=tensor([0.4624, 0.2101, 0.0220, 0.0100, 0.0092, 0.0089, 0.0062, 0.0046, 0.0043,
        0.0040], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824,  7610, 15588, 20077,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5176, 0.1641, 0.0272, 0.0145, 0.0070, 0.0065, 0.0050, 0.0048, 0.0047,
        0.0034], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077, 60824, 15588,  3991,  7610, 34059])), torch.return_types.topk(
values=tensor([0.6089, 0.1276, 0.0234, 0.0109, 0.0056, 0.0039, 0.0037, 0.0029, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824,  7610, 20077, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.5039, 0.1573, 0.0273, 0.0182, 0.0074, 0.0070, 0.0063, 0.0061, 0.0046,
        0.0036], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077, 60824,  3991, 15588,  7610, 34059])), torch.return_types.topk(
values=tensor([0.5947, 0.1237, 0.0240, 0.0141, 0.0061, 0.0040, 0.0038, 0.0037, 0.0037,
        0.0032], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 20077,  7610,  3991, 15588, 30261])), torch.return_types.topk(
values=tensor([0.6738, 0.0427, 0.0184, 0.0048, 0.0048, 0.0048, 0.0043, 0.0043, 0.0037,
        0.0036], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 41565, 54203, 38982,    34,    30,   213,  3617])), torch.return_types.topk(
values=tensor([0.6982, 0.0324, 0.0114, 0.0048, 0.0040, 0.0040, 0.0034, 0.0033, 0.0031,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 41565, 38982,  3617, 60824,   213,    34])), torch.return_types.topk(
values=tensor([0.6958, 0.0540, 0.0238, 0.0046, 0.0042, 0.0036, 0.0025, 0.0025, 0.0025,
        0.0024], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 41565, 38982,  1390, 60824,    34,   213])), torch.return_types.topk(
values=tensor([0.7603, 0.0385, 0.0159, 0.0034, 0.0033, 0.0024, 0.0022, 0.0021, 0.0020,
        0.0018], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982, 41565,   213, 33622,    34, 60824])), torch.return_types.topk(
values=tensor([0.6606, 0.0605, 0.0269, 0.0050, 0.0047, 0.0040, 0.0035, 0.0030, 0.0030,
        0.0026], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 41565, 38982,  1390,    34,   213, 60824])), torch.return_types.topk(
values=tensor([0.7437, 0.0420, 0.0174, 0.0038, 0.0035, 0.0026, 0.0025, 0.0023, 0.0023,
        0.0023], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,   213, 41565, 33622,    34,  1390])), torch.return_types.topk(
values=tensor([0.7798, 0.0433, 0.0295, 0.0154, 0.0072, 0.0065, 0.0051, 0.0051, 0.0034,
        0.0023], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.8228, 0.0309, 0.0282, 0.0127, 0.0051, 0.0037, 0.0031, 0.0025, 0.0021,
        0.0013], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  3991,  1390, 47727])), torch.return_types.topk(
values=tensor([0.8535, 0.0292, 0.0196, 0.0117, 0.0040, 0.0037, 0.0032, 0.0019, 0.0017,
        0.0010], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  2347])), torch.return_types.topk(
values=tensor([0.8408, 0.0329, 0.0212, 0.0142, 0.0041, 0.0040, 0.0035, 0.0022, 0.0015,
        0.0010], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1872,   649,   980,  1390,  3991,  2347])), torch.return_types.topk(
values=tensor([0.8296, 0.0356, 0.0256, 0.0132, 0.0044, 0.0044, 0.0032, 0.0027, 0.0020,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8223, 0.0373, 0.0254, 0.0159, 0.0042, 0.0042, 0.0039, 0.0029, 0.0016,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([8.9746e-01, 1.4901e-04, 8.9347e-05, 4.1723e-05, 9.4771e-06, 8.2254e-06,
        8.1658e-06, 7.8678e-06, 5.7220e-06, 4.6492e-06], dtype=torch.float16),
indices=tensor([   2,    6,    7,    4,    5,   13,   30, 9182, 2207,   22])), torch.return_types.topk(
values=tensor([0.4653, 0.4075, 0.0025, 0.0012, 0.0012, 0.0009, 0.0008, 0.0007, 0.0007,
        0.0005], dtype=torch.float16),
indices=tensor([ 4725, 21314, 61026, 60618,  3834,  4473,  6149,  3589,  1090,    24])), torch.return_types.topk(
values=tensor([8.9453e-01, 3.6564e-03, 3.3736e-04, 1.2505e-04, 6.6936e-05, 5.4836e-05,
        4.6730e-05, 3.1650e-05, 1.7107e-05, 1.5259e-05], dtype=torch.float16),
indices=tensor([   6, 9182,    2,    4,    5, 2207,    7, 3882,   70,  732])), torch.return_types.topk(
values=tensor([8.9990e-01, 8.0287e-05, 4.7207e-05, 1.2040e-05, 7.0930e-06, 6.3181e-06,
        5.4240e-06, 4.2915e-06, 4.0531e-06, 3.1590e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182,   70, 2207,   22])), torch.return_types.topk(
values=tensor([8.9941e-01, 8.6784e-05, 4.4346e-05, 1.0669e-05, 7.3314e-06, 6.1393e-06,
        5.9009e-06, 4.1127e-06, 4.1127e-06, 2.9802e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   22])), torch.return_types.topk(
values=tensor([9.0039e-01, 8.9288e-05, 4.4703e-05, 9.7156e-06, 7.4506e-06, 5.8413e-06,
        5.7220e-06, 4.1127e-06, 3.9935e-06, 3.0398e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.3059, 0.1049, 0.0380, 0.0263, 0.0257, 0.0193, 0.0116, 0.0113, 0.0091,
        0.0090], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919,  3617, 41565,  4300])), torch.return_types.topk(
values=tensor([0.6748, 0.0378, 0.0087, 0.0079, 0.0068, 0.0056, 0.0051, 0.0050, 0.0049,
        0.0047], dtype=torch.float16),
indices=tensor([60824,  3991,  6091, 38982,  9971, 56796,  9919,  1111,  4300,  4725])), torch.return_types.topk(
values=tensor([0.5532, 0.0552, 0.0194, 0.0137, 0.0116, 0.0100, 0.0097, 0.0078, 0.0072,
        0.0072], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 41445, 38982,  6091,  9919,  4300,  1111, 30360])), torch.return_types.topk(
values=tensor([0.6396, 0.0294, 0.0173, 0.0152, 0.0101, 0.0081, 0.0071, 0.0058, 0.0058,
        0.0054], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  6091,  9919, 30360,  3617,  4300])), torch.return_types.topk(
values=tensor([0.4609, 0.0839, 0.0212, 0.0173, 0.0148, 0.0146, 0.0107, 0.0103, 0.0090,
        0.0079], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 41445, 38982,  9919,  6091,  1111,  4300, 30360])), torch.return_types.topk(
values=tensor([0.5552, 0.0478, 0.0209, 0.0195, 0.0134, 0.0114, 0.0089, 0.0071, 0.0068,
        0.0067], dtype=torch.float16),
indices=tensor([60824,  3991, 38982,  9971, 41445,  9919,  6091,  1111,  4300, 30360])), torch.return_types.topk(
values=tensor([0.7515, 0.1504, 0.0143, 0.0140, 0.0042, 0.0028, 0.0022, 0.0022, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  1013,  4569, 60824, 51174, 23401,  9919])), torch.return_types.topk(
values=tensor([0.7368, 0.1484, 0.0159, 0.0127, 0.0058, 0.0039, 0.0022, 0.0021, 0.0020,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013, 51174,  4725,  9919, 23401])), torch.return_types.topk(
values=tensor([0.7236, 0.1801, 0.0143, 0.0098, 0.0037, 0.0026, 0.0020, 0.0019, 0.0015,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013, 51174,  9919, 23401, 21058])), torch.return_types.topk(
values=tensor([0.7178, 0.1931, 0.0111, 0.0105, 0.0033, 0.0021, 0.0018, 0.0016, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013, 51174,  9919, 21058, 23401])), torch.return_types.topk(
values=tensor([0.7061, 0.1691, 0.0210, 0.0120, 0.0046, 0.0033, 0.0032, 0.0031, 0.0023,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013, 51174,  9919, 23401, 21058])), torch.return_types.topk(
values=tensor([0.7104, 0.1796, 0.0158, 0.0123, 0.0041, 0.0026, 0.0026, 0.0026, 0.0017,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824, 51174,  1013,  9919, 23401, 21058])), torch.return_types.topk(
values=tensor([0.3765, 0.1232, 0.0944, 0.0509, 0.0268, 0.0143, 0.0125, 0.0117, 0.0079,
        0.0062], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  1390,  3991,    30, 20076])), torch.return_types.topk(
values=tensor([0.4973, 0.0949, 0.0734, 0.0516, 0.0141, 0.0138, 0.0102, 0.0086, 0.0053,
        0.0050], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4725,  2398, 38982,  4569,  3991,  1390, 60824])), torch.return_types.topk(
values=tensor([0.3743, 0.1421, 0.1388, 0.0275, 0.0138, 0.0118, 0.0102, 0.0086, 0.0074,
        0.0072], dtype=torch.float16),
indices=tensor([  980,  4300, 30360, 38982,  4569,  3991,  2398,  1390, 60824,  9919])), torch.return_types.topk(
values=tensor([0.4402, 0.1271, 0.1071, 0.0243, 0.0139, 0.0137, 0.0088, 0.0076, 0.0063,
        0.0054], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390, 60824,    80])), torch.return_types.topk(
values=tensor([0.3293, 0.1394, 0.1300, 0.0331, 0.0167, 0.0158, 0.0129, 0.0105, 0.0097,
        0.0084], dtype=torch.float16),
indices=tensor([  980,  4300, 30360, 38982,  3991,  4569,  1390,  9919,  2398, 60824])), torch.return_types.topk(
values=tensor([0.3904, 0.1219, 0.1084, 0.0311, 0.0157, 0.0132, 0.0122, 0.0109, 0.0081,
        0.0073], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,  9919, 60824])), torch.return_types.topk(
values=tensor([9.3213e-01, 2.1114e-03, 1.8349e-03, 1.7786e-03, 1.4629e-03, 1.3371e-03,
        1.1892e-03, 1.1663e-03, 1.0328e-03, 7.3862e-04], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 48446, 51174, 30261, 33622,    30, 15588])), torch.return_types.topk(
values=tensor([9.4629e-01, 2.1019e-03, 1.7023e-03, 1.6499e-03, 1.0242e-03, 1.0242e-03,
        9.6607e-04, 9.2554e-04, 7.5245e-04, 7.4959e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 51174, 30502, 15588, 53208,  8911, 48446, 30261])), torch.return_types.topk(
values=tensor([9.6387e-01, 1.4381e-03, 1.0643e-03, 1.0004e-03, 8.6880e-04, 7.2861e-04,
        7.1478e-04, 7.0095e-04, 6.5327e-04, 5.9271e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502, 51174, 29498, 33622,  8911, 53208, 30261, 15588])), torch.return_types.topk(
values=tensor([9.6143e-01, 1.4687e-03, 1.0500e-03, 1.0090e-03, 9.8228e-04, 9.1887e-04,
        8.7357e-04, 7.2145e-04, 6.0272e-04, 5.0735e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 30502, 51174,  8911, 33622, 30261, 53208,  2214])), torch.return_types.topk(
values=tensor([9.5801e-01, 1.7376e-03, 1.2560e-03, 1.0786e-03, 9.6321e-04, 9.5940e-04,
        7.9536e-04, 7.7391e-04, 7.1859e-04, 6.5422e-04], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30502, 33622, 29498, 30261,  8911, 15588, 53208])), torch.return_types.topk(
values=tensor([9.5654e-01, 1.6813e-03, 1.1559e-03, 1.1377e-03, 1.1110e-03, 1.0233e-03,
        1.0042e-03, 8.3876e-04, 5.9032e-04, 5.6982e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 51174, 33622, 30502,  8911, 30261, 15588, 53208])), torch.return_types.topk(
values=tensor([8.7988e-01, 2.2903e-02, 1.5747e-02, 9.2545e-03, 5.3558e-03, 2.8229e-03,
        2.7790e-03, 1.8435e-03, 1.2283e-03, 7.4482e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409,    30, 30502,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([8.5205e-01, 3.4882e-02, 3.2257e-02, 7.4272e-03, 7.1983e-03, 2.0714e-03,
        1.7166e-03, 1.4067e-03, 1.0014e-03, 8.4352e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111,  1186, 51174, 55513])), torch.return_types.topk(
values=tensor([8.8623e-01, 2.2888e-02, 2.1179e-02, 7.9727e-03, 7.6675e-03, 1.5583e-03,
        1.3065e-03, 1.2369e-03, 9.5224e-04, 5.6887e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,  1186,   409,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([9.0771e-01, 1.7014e-02, 1.6876e-02, 6.5613e-03, 5.1498e-03, 1.0548e-03,
        9.3031e-04, 9.0551e-04, 6.5470e-04, 5.1785e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([8.8086e-01, 2.5391e-02, 1.8570e-02, 8.7051e-03, 7.2746e-03, 1.7891e-03,
        1.6165e-03, 1.4095e-03, 1.0357e-03, 6.6853e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1186,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([9.0234e-01, 1.8875e-02, 1.5167e-02, 6.4240e-03, 5.7144e-03, 1.4277e-03,
        1.1120e-03, 9.7370e-04, 7.2050e-04, 5.9509e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.5117, 0.2118, 0.0276, 0.0074, 0.0074, 0.0048, 0.0047, 0.0033, 0.0030,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 20077, 15588, 34059,  3991])), torch.return_types.topk(
values=tensor([0.5283, 0.1714, 0.0202, 0.0095, 0.0082, 0.0072, 0.0055, 0.0045, 0.0038,
        0.0034], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 60824, 41445,  7610, 15588, 20077,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5786, 0.1364, 0.0231, 0.0105, 0.0063, 0.0060, 0.0041, 0.0039, 0.0038,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 20077, 15588,  7610,  3991, 34059])), torch.return_types.topk(
values=tensor([0.6611, 0.1038, 0.0197, 0.0080, 0.0054, 0.0031, 0.0031, 0.0029, 0.0024,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824,  7610, 20077, 30261, 54203, 15588])), torch.return_types.topk(
values=tensor([0.5840, 0.1302, 0.0219, 0.0108, 0.0065, 0.0055, 0.0042, 0.0041, 0.0039,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 20077, 15588,  3991,  7610, 30261])), torch.return_types.topk(
values=tensor([0.6592, 0.1019, 0.0190, 0.0086, 0.0056, 0.0031, 0.0031, 0.0030, 0.0026,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824,  7610, 30261, 20077, 15588, 54203])), torch.return_types.topk(
values=tensor([0.7295, 0.0272, 0.0150, 0.0052, 0.0037, 0.0036, 0.0036, 0.0030, 0.0028,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   213,    30, 41565, 38982,  3617])), torch.return_types.topk(
values=tensor([0.7300, 0.0268, 0.0101, 0.0042, 0.0032, 0.0032, 0.0032, 0.0030, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982, 41565,    34,   213,  3617, 60824])), torch.return_types.topk(
values=tensor([0.7480, 0.0364, 0.0195, 0.0039, 0.0031, 0.0028, 0.0026, 0.0023, 0.0023,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 41565,    34, 38982,  3617,   213, 60824])), torch.return_types.topk(
values=tensor([0.8008, 0.0270, 0.0130, 0.0029, 0.0024, 0.0022, 0.0020, 0.0018, 0.0017,
        0.0015], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,    34,   213, 41565,  3617, 33622])), torch.return_types.topk(
values=tensor([0.7422, 0.0350, 0.0195, 0.0040, 0.0035, 0.0029, 0.0026, 0.0026, 0.0022,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34, 41565,   213, 38982,  3617,  1390])), torch.return_types.topk(
values=tensor([0.7993, 0.0259, 0.0128, 0.0030, 0.0025, 0.0023, 0.0022, 0.0017, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34, 38982,   213, 41565,  3617, 33622])), torch.return_types.topk(
values=tensor([0.8159, 0.0413, 0.0216, 0.0146, 0.0054, 0.0045, 0.0042, 0.0036, 0.0023,
        0.0021], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.8359, 0.0297, 0.0293, 0.0114, 0.0042, 0.0028, 0.0025, 0.0019, 0.0018,
        0.0012], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  3991,  1390,    57])), torch.return_types.topk(
values=tensor([0.8643, 0.0282, 0.0202, 0.0110, 0.0031, 0.0031, 0.0027, 0.0017, 0.0014,
        0.0009], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([0.8516, 0.0320, 0.0215, 0.0129, 0.0035, 0.0032, 0.0030, 0.0018, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1872,   649,   980,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([0.8506, 0.0320, 0.0241, 0.0119, 0.0034, 0.0031, 0.0026, 0.0022, 0.0015,
        0.0010], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([0.8418, 0.0347, 0.0239, 0.0139, 0.0033, 0.0032, 0.0031, 0.0023, 0.0013,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1872,   980,   649,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([8.9990e-01, 1.4210e-04, 1.0473e-04, 3.9756e-05, 9.5367e-06, 8.3447e-06,
        8.2850e-06, 7.9870e-06, 5.7220e-06, 4.4703e-06], dtype=torch.float16),
indices=tensor([   2,    6,    7,    4,    5,   30, 9182,   13, 2207,   22])), torch.return_types.topk(
values=tensor([8.7988e-01, 5.5359e-02, 1.6203e-03, 1.2569e-03, 5.6219e-04, 5.0020e-04,
        3.8505e-04, 3.7599e-04, 3.3450e-04, 2.5845e-04], dtype=torch.float16),
indices=tensor([    4, 21314,   118,    30,    13,     7,  1090,  9419, 60618,   690])), torch.return_types.topk(
values=tensor([0.5415, 0.2072, 0.0756, 0.0161, 0.0026, 0.0023, 0.0019, 0.0017, 0.0016,
        0.0008], dtype=torch.float16),
indices=tensor([   6,    2, 9182,    4,   13, 1331,  590,  242, 2304,  732])), torch.return_types.topk(
values=tensor([0.5415, 0.2072, 0.0756, 0.0161, 0.0026, 0.0023, 0.0019, 0.0017, 0.0016,
        0.0008], dtype=torch.float16),
indices=tensor([   6,    2, 9182,    4,   13, 1331,  590,  242, 2304,  732])), torch.return_types.topk(
values=tensor([9.0234e-01, 1.0419e-04, 3.4213e-05, 1.8477e-05, 7.5698e-06, 6.4969e-06,
        6.2585e-06, 4.1723e-06, 3.9339e-06, 3.5167e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   30])), torch.return_types.topk(
values=tensor([9.0283e-01, 1.0222e-04, 3.3379e-05, 1.6034e-05, 6.9737e-06, 6.4373e-06,
        5.9605e-06, 4.1127e-06, 3.9339e-06, 3.2187e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   30])), torch.return_types.topk(
values=tensor([0.4785, 0.0585, 0.0396, 0.0165, 0.0150, 0.0119, 0.0117, 0.0088, 0.0067,
        0.0063], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 41445, 38982,  1111,  3617,  9919,  4300, 47727])), torch.return_types.topk(
values=tensor([0.7734, 0.0211, 0.0067, 0.0060, 0.0051, 0.0035, 0.0035, 0.0034, 0.0033,
        0.0031], dtype=torch.float16),
indices=tensor([60824,  3991,  6091,  9971, 38982,  9919, 56796,  4725,  4300,  1111])), torch.return_types.topk(
values=tensor([0.6753, 0.0309, 0.0169, 0.0081, 0.0079, 0.0072, 0.0067, 0.0059, 0.0057,
        0.0054], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  6091, 41445, 38982,  9919,  3617,  4300, 30360])), torch.return_types.topk(
values=tensor([0.7422, 0.0168, 0.0145, 0.0088, 0.0061, 0.0060, 0.0052, 0.0046, 0.0039,
        0.0035], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091, 41445,  3617,  9919, 30360,  4300])), torch.return_types.topk(
values=tensor([0.6523, 0.0380, 0.0179, 0.0087, 0.0081, 0.0080, 0.0079, 0.0059, 0.0059,
        0.0056], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  6091, 41445,  9919, 38982,  4300,  3617, 30360])), torch.return_types.topk(
values=tensor([0.7310, 0.0202, 0.0147, 0.0097, 0.0063, 0.0061, 0.0053, 0.0051, 0.0040,
        0.0037], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091, 41445,  9919,  3617, 30360,  4300])), torch.return_types.topk(
values=tensor([0.7329, 0.1769, 0.0140, 0.0103, 0.0036, 0.0025, 0.0019, 0.0016, 0.0015,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 60824, 51174,  9919, 23401])), torch.return_types.topk(
values=tensor([0.7349, 0.1639, 0.0117, 0.0116, 0.0048, 0.0031, 0.0019, 0.0017, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013,  4725,  9919, 51174, 23401])), torch.return_types.topk(
values=tensor([0.7134, 0.2028, 0.0104, 0.0092, 0.0029, 0.0021, 0.0016, 0.0014, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013,  9919, 51174, 23401,  4569])), torch.return_types.topk(
values=tensor([0.7119, 0.2104, 0.0092, 0.0084, 0.0027, 0.0017, 0.0013, 0.0013, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  9919, 51174,  4569, 21058])), torch.return_types.topk(
values=tensor([0.7065, 0.2008, 0.0120, 0.0102, 0.0031, 0.0023, 0.0021, 0.0017, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013,  9919, 51174, 23401,  4569])), torch.return_types.topk(
values=tensor([0.7041, 0.2114, 0.0102, 0.0095, 0.0029, 0.0018, 0.0017, 0.0015, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  9919, 51174,  4569, 23401])), torch.return_types.topk(
values=tensor([0.4243, 0.1399, 0.0816, 0.0315, 0.0216, 0.0158, 0.0093, 0.0086, 0.0073,
        0.0051], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,    30,  9919])), torch.return_types.topk(
values=tensor([0.5386, 0.0996, 0.0623, 0.0482, 0.0149, 0.0094, 0.0085, 0.0066, 0.0041,
        0.0040], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4725,  2398, 38982,  4569,  3991,  1390, 60824])), torch.return_types.topk(
values=tensor([0.4287, 0.1553, 0.1257, 0.0168, 0.0129, 0.0107, 0.0092, 0.0059, 0.0058,
        0.0053], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390, 60824,  9919])), torch.return_types.topk(
values=tensor([0.4934, 0.1403, 0.0934, 0.0147, 0.0143, 0.0122, 0.0070, 0.0051, 0.0049,
        0.0046], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991,  1390, 60824,    80])), torch.return_types.topk(
values=tensor([0.4175, 0.1572, 0.1196, 0.0172, 0.0140, 0.0109, 0.0107, 0.0073, 0.0063,
        0.0060], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,  9919,    80])), torch.return_types.topk(
values=tensor([0.4863, 0.1426, 0.0865, 0.0154, 0.0147, 0.0129, 0.0079, 0.0060, 0.0053,
        0.0049], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991,  1390,    80, 60824])), torch.return_types.topk(
values=tensor([9.3750e-01, 2.0351e-03, 1.9417e-03, 1.6155e-03, 1.4095e-03, 1.2732e-03,
        1.0071e-03, 8.3160e-04, 7.6008e-04, 7.3099e-04], dtype=torch.float16),
indices=tensor([41445, 29498,    80,  8911, 48446, 51174, 33622, 30261, 15588, 58599])), torch.return_types.topk(
values=tensor([9.4629e-01, 1.9817e-03, 1.8768e-03, 1.5383e-03, 1.0777e-03, 1.0691e-03,
        1.0128e-03, 9.4032e-04, 7.9155e-04, 6.0940e-04], dtype=torch.float16),
indices=tensor([41445, 29498,    80, 51174, 30502, 15588, 53208,  8911, 48446, 30261])), torch.return_types.topk(
values=tensor([9.6582e-01, 1.2617e-03, 1.0376e-03, 9.5606e-04, 9.1219e-04, 6.9427e-04,
        6.6471e-04, 5.8889e-04, 5.7793e-04, 5.0974e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502, 29498, 51174,  8911, 53208, 33622, 15588, 30261])), torch.return_types.topk(
values=tensor([9.6387e-01, 1.2493e-03, 1.1463e-03, 9.8038e-04, 8.8549e-04, 8.7214e-04,
        7.2289e-04, 5.7411e-04, 5.5838e-04, 4.8351e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 30502, 51174,  8911, 33622, 53208, 30261, 15588])), torch.return_types.topk(
values=tensor([9.6045e-01, 1.4782e-03, 1.1072e-03, 1.0605e-03, 1.0281e-03, 7.7009e-04,
        7.2622e-04, 6.6376e-04, 6.2609e-04, 6.2132e-04], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 29498, 30502,  8911, 33622, 15588, 30261, 53208])), torch.return_types.topk(
values=tensor([9.5850e-01, 1.4019e-03, 1.2865e-03, 1.0099e-03, 1.0023e-03, 9.7513e-04,
        8.7738e-04, 6.6757e-04, 5.5981e-04, 5.5122e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498, 51174, 30502,  8911, 33622, 30261, 15588, 53208])), torch.return_types.topk(
values=tensor([8.8379e-01, 2.3010e-02, 1.7227e-02, 7.8278e-03, 4.9362e-03, 2.7065e-03,
        1.7195e-03, 1.5717e-03, 1.0805e-03, 7.9060e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,    30,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([8.5059e-01, 3.4027e-02, 3.3508e-02, 7.2441e-03, 5.6000e-03, 2.1076e-03,
        1.4830e-03, 1.2445e-03, 9.9945e-04, 7.8773e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111,  1186, 51174, 55513])), torch.return_types.topk(
values=tensor([8.9014e-01, 2.1591e-02, 2.0599e-02, 7.1754e-03, 5.9052e-03, 1.2913e-03,
        1.2474e-03, 1.0176e-03, 8.4734e-04, 5.5552e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1186,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([9.1064e-01, 1.6296e-02, 1.5793e-02, 6.0425e-03, 3.9005e-03, 1.0214e-03,
        7.8344e-04, 7.2718e-04, 5.8889e-04, 5.0592e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([8.8623e-01, 2.3438e-02, 1.8539e-02, 6.7673e-03, 5.9700e-03, 1.6975e-03,
        1.2321e-03, 1.1349e-03, 8.8406e-04, 6.3944e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1186,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([9.0723e-01, 1.7273e-02, 1.4778e-02, 5.9242e-03, 4.0398e-03, 1.3275e-03,
        9.0504e-04, 7.5340e-04, 6.2704e-04, 5.7316e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.4800, 0.2471, 0.0291, 0.0059, 0.0052, 0.0047, 0.0045, 0.0033, 0.0030,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610,    30, 20077, 15588,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5083, 0.1885, 0.0199, 0.0089, 0.0075, 0.0069, 0.0052, 0.0045, 0.0036,
        0.0033], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 60824,  7610, 41445, 15588, 20077,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5786, 0.1418, 0.0226, 0.0084, 0.0059, 0.0055, 0.0040, 0.0036, 0.0034,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 20077,  7610, 15588,  3991, 34059])), torch.return_types.topk(
values=tensor([0.6543, 0.1102, 0.0196, 0.0067, 0.0051, 0.0033, 0.0030, 0.0025, 0.0024,
        0.0022], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824,  7610, 20077, 30261, 54203, 15588])), torch.return_types.topk(
values=tensor([0.5840, 0.1376, 0.0214, 0.0082, 0.0060, 0.0049, 0.0041, 0.0036, 0.0036,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 20077,  7610,  3991, 15588, 34059])), torch.return_types.topk(
values=tensor([0.6553, 0.1078, 0.0187, 0.0069, 0.0053, 0.0033, 0.0029, 0.0027, 0.0025,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824,  7610, 20077, 30261, 54203, 15588])), torch.return_types.topk(
values=tensor([0.7500, 0.0226, 0.0124, 0.0046, 0.0039, 0.0033, 0.0031, 0.0031, 0.0026,
        0.0022], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203, 41565, 38982,   213,  3617,    30])), torch.return_types.topk(
values=tensor([0.7417, 0.0231, 0.0086, 0.0041, 0.0035, 0.0033, 0.0032, 0.0029, 0.0028,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982, 60824, 41565,    34,  3617,   213])), torch.return_types.topk(
values=tensor([0.7617, 0.0314, 0.0164, 0.0038, 0.0031, 0.0028, 0.0026, 0.0023, 0.0022,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 41565, 38982,    34, 60824,  3617,   213])), torch.return_types.topk(
values=tensor([0.8057, 0.0245, 0.0113, 0.0029, 0.0026, 0.0020, 0.0019, 0.0019, 0.0018,
        0.0016], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,    34,   213, 41565, 60824, 33622])), torch.return_types.topk(
values=tensor([0.7607, 0.0288, 0.0165, 0.0039, 0.0030, 0.0029, 0.0027, 0.0022, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34, 41565, 38982,   213, 60824,  3617])), torch.return_types.topk(
values=tensor([0.8076, 0.0227, 0.0111, 0.0030, 0.0025, 0.0023, 0.0020, 0.0017, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,    34,   213, 41565, 60824,  3617])), torch.return_types.topk(
values=tensor([0.7900, 0.0521, 0.0248, 0.0166, 0.0058, 0.0057, 0.0046, 0.0038, 0.0026,
        0.0023], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,   649,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.8276, 0.0323, 0.0304, 0.0114, 0.0043, 0.0028, 0.0026, 0.0023, 0.0022,
        0.0013], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8628, 0.0295, 0.0203, 0.0104, 0.0031, 0.0029, 0.0025, 0.0020, 0.0015,
        0.0009], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([0.8472, 0.0336, 0.0219, 0.0127, 0.0033, 0.0031, 0.0030, 0.0023, 0.0013,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1872,   649,   980,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([0.8516, 0.0327, 0.0229, 0.0113, 0.0034, 0.0030, 0.0025, 0.0024, 0.0016,
        0.0010], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  3991,    57])), torch.return_types.topk(
values=tensor([0.8359, 0.0370, 0.0239, 0.0137, 0.0033, 0.0032, 0.0031, 0.0028, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,  1872,   649,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([8.9795e-01, 1.2118e-04, 6.2406e-05, 3.8445e-05, 9.2387e-06, 7.9274e-06,
        7.3314e-06, 6.4373e-06, 5.3048e-06, 4.1723e-06], dtype=torch.float16),
indices=tensor([   2,    6,    7,    4,    5,   13, 9182,   30, 2207,   22])), torch.return_types.topk(
values=tensor([5.5566e-01, 3.3179e-01, 1.4772e-03, 8.6498e-04, 6.7616e-04, 6.4278e-04,
        6.3515e-04, 5.8317e-04, 5.2261e-04, 4.3488e-04], dtype=torch.float16),
indices=tensor([ 4725, 21314, 61026,  3589, 46075,  1090, 60618,    24,  4473,  6149])), torch.return_types.topk(
values=tensor([9.0039e-01, 7.4863e-05, 4.1664e-05, 9.4175e-06, 7.9274e-06, 5.8413e-06,
        5.4836e-06, 4.0531e-06, 3.3975e-06, 2.8610e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,     5,    13,  9182,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([8.9990e-01, 7.9393e-05, 4.4703e-05, 1.1563e-05, 7.3910e-06, 6.3181e-06,
        5.4240e-06, 4.0531e-06, 4.0531e-06, 3.0994e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   22])), torch.return_types.topk(
values=tensor([8.9990e-01, 8.3804e-05, 4.3333e-05, 9.9540e-06, 7.5698e-06, 5.7817e-06,
        5.7220e-06, 4.0531e-06, 3.8147e-06, 2.9206e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,     5,    13,  9182,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([8.9990e-01, 8.0943e-05, 4.2498e-05, 9.1195e-06, 7.1526e-06, 5.7220e-06,
        5.6028e-06, 3.9935e-06, 3.7551e-06, 2.8610e-06], dtype=torch.float16),
indices=tensor([    2,     6,     4,     7,     5,  9182,    13,  2207,    70, 31428])), torch.return_types.topk(
values=tensor([0.5332, 0.0598, 0.0349, 0.0162, 0.0126, 0.0101, 0.0092, 0.0067, 0.0056,
        0.0055], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  3617,  9919, 41565, 47727])), torch.return_types.topk(
values=tensor([0.8066, 0.0181, 0.0066, 0.0051, 0.0047, 0.0030, 0.0029, 0.0025, 0.0024,
        0.0023], dtype=torch.float16),
indices=tensor([60824,  3991,  6091,  9971, 38982, 56796,  4725,  9919,  1111,  4300])), torch.return_types.topk(
values=tensor([0.7241, 0.0274, 0.0149, 0.0074, 0.0066, 0.0061, 0.0045, 0.0045, 0.0041,
        0.0039], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  6091, 38982, 41445,  9919,  3617,  4300, 30360])), torch.return_types.topk(
values=tensor([0.7764, 0.0151, 0.0128, 0.0086, 0.0056, 0.0049, 0.0039, 0.0034, 0.0030,
        0.0027], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091, 41445,  3617,  9919, 30360,   110])), torch.return_types.topk(
values=tensor([0.7163, 0.0312, 0.0155, 0.0080, 0.0069, 0.0056, 0.0051, 0.0044, 0.0040,
        0.0039], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  6091, 38982, 41445,  9919,  3617,  4300, 30360])), torch.return_types.topk(
values=tensor([0.7695, 0.0174, 0.0131, 0.0092, 0.0059, 0.0048, 0.0038, 0.0038, 0.0030,
        0.0026], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091, 41445,  3617,  9919, 30360,  4300])), torch.return_types.topk(
values=tensor([0.7407, 0.1678, 0.0147, 0.0128, 0.0029, 0.0026, 0.0020, 0.0017, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 60824, 51174,  9919, 23401])), torch.return_types.topk(
values=tensor([0.7319, 0.1659, 0.0122, 0.0116, 0.0051, 0.0030, 0.0021, 0.0016, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013,  4725, 51174,  9919, 23401])), torch.return_types.topk(
values=tensor([0.7168, 0.2021, 0.0104, 0.0088, 0.0030, 0.0019, 0.0015, 0.0014, 0.0011,
        0.0009], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013,  9919, 51174, 23401,  4569])), torch.return_types.topk(
values=tensor([0.7100, 0.2131, 0.0091, 0.0085, 0.0029, 0.0015, 0.0013, 0.0012, 0.0009,
        0.0009], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013, 51174,  9919,  4569, 21058])), torch.return_types.topk(
values=tensor([0.7041, 0.2065, 0.0118, 0.0097, 0.0033, 0.0019, 0.0018, 0.0016, 0.0013,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013,  9919, 51174, 23401,  4569])), torch.return_types.topk(
values=tensor([0.6987, 0.2166, 0.0100, 0.0098, 0.0032, 0.0016, 0.0016, 0.0015, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  9919, 51174,  4569, 23401])), torch.return_types.topk(
values=tensor([0.4431, 0.1240, 0.0820, 0.0356, 0.0221, 0.0139, 0.0113, 0.0101, 0.0048,
        0.0047], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,    30,  9919])), torch.return_types.topk(
values=tensor([0.5400, 0.0991, 0.0587, 0.0464, 0.0141, 0.0104, 0.0083, 0.0067, 0.0044,
        0.0043], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4725,  2398, 38982,  4569,  3991,  1390, 60824])), torch.return_types.topk(
values=tensor([0.4431, 0.1473, 0.1193, 0.0187, 0.0123, 0.0101, 0.0095, 0.0063, 0.0060,
        0.0050], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390, 60824,    80])), torch.return_types.topk(
values=tensor([0.4944, 0.1351, 0.0907, 0.0170, 0.0131, 0.0118, 0.0075, 0.0058, 0.0054,
        0.0046], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991,  1390, 60824,    80])), torch.return_types.topk(
values=tensor([0.4309, 0.1525, 0.1107, 0.0188, 0.0131, 0.0112, 0.0100, 0.0077, 0.0061,
        0.0056], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  2398,  1390, 60824,  9919])), torch.return_types.topk(
values=tensor([0.4802, 0.1398, 0.0828, 0.0179, 0.0133, 0.0123, 0.0088, 0.0068, 0.0055,
        0.0053], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991,  1390, 60824,    80])), torch.return_types.topk(
values=tensor([9.3799e-01, 2.0046e-03, 1.8396e-03, 1.7214e-03, 1.4267e-03, 1.3351e-03,
        1.0900e-03, 9.3222e-04, 8.0967e-04, 7.9107e-04], dtype=torch.float16),
indices=tensor([41445, 29498,    80,  8911, 48446, 51174, 33622, 30261,    30, 15588])), torch.return_types.topk(
values=tensor([9.4727e-01, 1.9312e-03, 1.8501e-03, 1.5640e-03, 1.3800e-03, 1.1902e-03,
        1.0586e-03, 9.6369e-04, 7.2718e-04, 6.5947e-04], dtype=torch.float16),
indices=tensor([41445, 29498,    80, 51174, 30502, 53208, 15588,  8911, 48446,  2214])), torch.return_types.topk(
values=tensor([9.6533e-01, 1.3523e-03, 1.3008e-03, 9.5892e-04, 9.4795e-04, 7.9203e-04,
        7.2956e-04, 6.7472e-04, 5.7936e-04, 5.5742e-04], dtype=torch.float16),
indices=tensor([41445, 30502,    80, 51174, 29498, 53208,  8911, 33622, 15588, 30261])), torch.return_types.topk(
values=tensor([9.6289e-01, 1.3285e-03, 1.2922e-03, 1.1539e-03, 9.4175e-04, 9.2697e-04,
        8.3780e-04, 7.0000e-04, 6.1274e-04, 5.3644e-04], dtype=torch.float16),
indices=tensor([41445, 30502,    80, 29498, 51174,  8911, 33622, 53208, 30261,  2214])), torch.return_types.topk(
values=tensor([9.5996e-01, 1.5478e-03, 1.3342e-03, 1.1597e-03, 1.0643e-03, 8.4829e-04,
        8.1873e-04, 7.4005e-04, 6.7902e-04, 6.7377e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502, 51174, 29498, 33622,  8911, 53208, 15588, 30261])), torch.return_types.topk(
values=tensor([9.5801e-01, 1.4458e-03, 1.3475e-03, 1.2960e-03, 1.0576e-03, 1.0376e-03,
        1.0176e-03, 7.0715e-04, 6.6710e-04, 5.7268e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502, 29498, 51174,  8911, 33622, 30261, 53208, 15588])), torch.return_types.topk(
values=tensor([8.8037e-01, 2.2919e-02, 1.9760e-02, 7.9193e-03, 5.1117e-03, 3.5973e-03,
        2.2964e-03, 1.7538e-03, 1.1406e-03, 7.6914e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 30502,    30,  1111, 55513, 15597])), torch.return_types.topk(
values=tensor([8.4375e-01, 4.1351e-02, 3.2471e-02, 9.6741e-03, 5.5542e-03, 1.7891e-03,
        1.6546e-03, 1.5421e-03, 1.0033e-03, 7.7534e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 51174, 55513])), torch.return_types.topk(
values=tensor([8.8281e-01, 2.5436e-02, 2.1088e-02, 9.6588e-03, 5.9509e-03, 1.5163e-03,
        1.1578e-03, 1.1396e-03, 8.5354e-04, 5.7983e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1186,   409,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([9.0381e-01, 2.0432e-02, 1.5671e-02, 8.3847e-03, 4.0245e-03, 9.4080e-04,
        9.1934e-04, 8.7690e-04, 6.0749e-04, 5.3215e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1186,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([8.7939e-01, 2.3071e-02, 2.2888e-02, 9.0332e-03, 6.2103e-03, 1.5697e-03,
        1.5221e-03, 1.2665e-03, 9.1600e-04, 6.5947e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1186,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([9.0088e-01, 1.8402e-02, 1.7029e-02, 8.0414e-03, 4.2381e-03, 1.1950e-03,
        1.0109e-03, 9.4175e-04, 6.4754e-04, 5.9175e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.4851, 0.2292, 0.0303, 0.0075, 0.0061, 0.0053, 0.0050, 0.0038, 0.0034,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 20077, 15588,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5054, 0.1788, 0.0213, 0.0097, 0.0085, 0.0079, 0.0059, 0.0049, 0.0039,
        0.0034], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 60824, 41445,  7610, 15588, 20077,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5669, 0.1378, 0.0241, 0.0099, 0.0064, 0.0061, 0.0043, 0.0041, 0.0038,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 20077,  7610, 15588,  3991, 34059])), torch.return_types.topk(
values=tensor([0.6445, 0.1077, 0.0209, 0.0080, 0.0056, 0.0034, 0.0033, 0.0028, 0.0025,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824,  7610, 20077, 30261, 54203, 15588])), torch.return_types.topk(
values=tensor([0.5747, 0.1334, 0.0225, 0.0099, 0.0065, 0.0057, 0.0043, 0.0041, 0.0040,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 20077,  7610, 15588,  3991, 30261])), torch.return_types.topk(
values=tensor([0.6465, 0.1055, 0.0198, 0.0083, 0.0058, 0.0034, 0.0032, 0.0029, 0.0026,
        0.0026], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824,  7610, 20077, 30261, 54203, 15588])), torch.return_types.topk(
values=tensor([0.7246, 0.0299, 0.0138, 0.0048, 0.0040, 0.0035, 0.0034, 0.0032, 0.0031,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   213, 41565,    30, 38982,  3617])), torch.return_types.topk(
values=tensor([0.7188, 0.0299, 0.0101, 0.0044, 0.0036, 0.0035, 0.0032, 0.0030, 0.0028,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982, 41565, 60824,    34,   213,  3617])), torch.return_types.topk(
values=tensor([0.7451, 0.0368, 0.0194, 0.0040, 0.0032, 0.0027, 0.0026, 0.0022, 0.0021,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 41565, 38982,    34, 60824,  3617,   213])), torch.return_types.topk(
values=tensor([0.7900, 0.0290, 0.0136, 0.0031, 0.0026, 0.0021, 0.0020, 0.0020, 0.0019,
        0.0017], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,    34, 41565,   213, 33622, 60824])), torch.return_types.topk(
values=tensor([0.7427, 0.0353, 0.0192, 0.0041, 0.0031, 0.0030, 0.0027, 0.0023, 0.0020,
        0.0020], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34, 41565, 38982,   213,  3617, 60824])), torch.return_types.topk(
values=tensor([0.7900, 0.0279, 0.0133, 0.0032, 0.0025, 0.0023, 0.0021, 0.0019, 0.0018,
        0.0016], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,    34,   213, 33622, 41565, 60824])), torch.return_types.topk(
values=tensor([0.7998, 0.0441, 0.0218, 0.0180, 0.0066, 0.0053, 0.0051, 0.0039, 0.0026,
        0.0022], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991,  3175])), torch.return_types.topk(
values=tensor([0.7139, 0.0696, 0.0572, 0.0146, 0.0072, 0.0047, 0.0031, 0.0030, 0.0028,
        0.0017], dtype=torch.float16),
indices=tensor([ 5442, 45883, 21405,  4569,   980,   649,  1872,  3991,  1390, 47727])), torch.return_types.topk(
values=tensor([0.8613, 0.0290, 0.0228, 0.0100, 0.0034, 0.0034, 0.0027, 0.0017, 0.0014,
        0.0010], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([0.8472, 0.0329, 0.0242, 0.0119, 0.0036, 0.0035, 0.0034, 0.0019, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,  1872,   980,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([0.8501, 0.0320, 0.0265, 0.0108, 0.0037, 0.0034, 0.0026, 0.0021, 0.0014,
        0.0010], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([0.8384, 0.0354, 0.0265, 0.0127, 0.0036, 0.0034, 0.0032, 0.0023, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([8.9209e-01, 2.0447e-03, 6.9046e-04, 3.3402e-04, 1.0026e-04, 5.4836e-05,
        3.3438e-05, 3.2187e-05, 2.7418e-05, 2.6703e-05], dtype=torch.float16),
indices=tensor([   2,    6,    7, 9182,    4,   30,   13, 2207,   40,  732])), torch.return_types.topk(
values=tensor([9.1797e-01, 8.7280e-03, 1.9779e-03, 1.8578e-03, 8.2111e-04, 3.6144e-04,
        3.1781e-04, 3.0446e-04, 2.3711e-04, 2.2709e-04], dtype=torch.float16),
indices=tensor([  165,  6038,     4,    75,     9, 60372,  6868, 21541,  4377, 14215])), torch.return_types.topk(
values=tensor([9.0283e-01, 7.5698e-05, 3.3200e-05, 1.8179e-05, 6.5565e-06, 5.9009e-06,
        5.3048e-06, 3.9935e-06, 3.6359e-06, 3.2187e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   22])), torch.return_types.topk(
values=tensor([9.0234e-01, 7.7128e-05, 3.4332e-05, 1.6689e-05, 6.3181e-06, 5.9009e-06,
        5.3644e-06, 3.9339e-06, 3.8147e-06, 3.2187e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5,   13, 9182, 2207,   70,   22])), torch.return_types.topk(
values=tensor([9.0234e-01, 8.0824e-05, 3.1710e-05, 1.5378e-05, 6.2585e-06, 5.6624e-06,
        5.5432e-06, 4.0531e-06, 3.6359e-06, 2.9802e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([8.8428e-01, 1.3962e-02, 6.3562e-04, 1.4567e-04, 6.6996e-05, 6.1452e-05,
        4.1604e-05, 3.1769e-05, 3.1650e-05, 2.3365e-05], dtype=torch.float16),
indices=tensor([   6, 9182,    2,    4, 2207,    5,  732,    7, 3882,   70])), torch.return_types.topk(
values=tensor([0.4951, 0.0587, 0.0353, 0.0160, 0.0147, 0.0120, 0.0116, 0.0077, 0.0062,
        0.0060], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  3617,  1111,  9919,  4300, 47727])), torch.return_types.topk(
values=tensor([0.7573, 0.0222, 0.0152, 0.0068, 0.0063, 0.0049, 0.0045, 0.0043, 0.0028,
        0.0027], dtype=torch.float16),
indices=tensor([60824,  4725,  3991,  9971,  6091, 56796,   110, 38982,  3617,  9919])), torch.return_types.topk(
values=tensor([0.6968, 0.0279, 0.0154, 0.0082, 0.0066, 0.0065, 0.0056, 0.0054, 0.0049,
        0.0049], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  6091, 38982, 41445,  3617,  9919, 30360,  4300])), torch.return_types.topk(
values=tensor([0.7495, 0.0158, 0.0134, 0.0090, 0.0063, 0.0054, 0.0049, 0.0040, 0.0038,
        0.0032], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091, 41445,  3617,  9919, 30360,  4300])), torch.return_types.topk(
values=tensor([0.6812, 0.0334, 0.0160, 0.0088, 0.0072, 0.0065, 0.0062, 0.0056, 0.0051,
        0.0050], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  6091, 38982, 41445,  9919,  3617, 30360,  4300])), torch.return_types.topk(
values=tensor([0.7466, 0.0181, 0.0130, 0.0095, 0.0064, 0.0052, 0.0047, 0.0044, 0.0038,
        0.0032], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091, 41445,  3617,  9919, 30360,  4300])), torch.return_types.topk(
values=tensor([0.7231, 0.1772, 0.0159, 0.0127, 0.0035, 0.0028, 0.0022, 0.0020, 0.0016,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569, 60824, 51174,  9919, 23401])), torch.return_types.topk(
values=tensor([0.6265, 0.2181, 0.0235, 0.0226, 0.0127, 0.0041, 0.0026, 0.0024, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  4725,  3991, 60824,  1013, 21058, 51174,  9919])), torch.return_types.topk(
values=tensor([0.6963, 0.2157, 0.0109, 0.0095, 0.0032, 0.0020, 0.0016, 0.0016, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013, 51174,  9919, 21058, 23401])), torch.return_types.topk(
values=tensor([0.6929, 0.2231, 0.0099, 0.0090, 0.0030, 0.0016, 0.0015, 0.0013, 0.0012,
        0.0010], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013, 51174,  9919, 21058,  4569])), torch.return_types.topk(
values=tensor([0.6865, 0.2161, 0.0126, 0.0107, 0.0034, 0.0021, 0.0020, 0.0019, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013,  9919, 51174, 23401, 21058])), torch.return_types.topk(
values=tensor([0.6802, 0.2279, 0.0110, 0.0102, 0.0032, 0.0017, 0.0017, 0.0017, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824, 51174,  9919,  1013, 21058,  4569])), torch.return_types.topk(
values=tensor([0.4363, 0.1270, 0.0845, 0.0336, 0.0209, 0.0142, 0.0109, 0.0095, 0.0061,
        0.0054], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,    30,  9919])), torch.return_types.topk(
values=tensor([0.5356, 0.0975, 0.0601, 0.0514, 0.0135, 0.0101, 0.0074, 0.0071, 0.0042,
        0.0041], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4725,  2398, 38982,  4569,  3991, 60824,  1390])), torch.return_types.topk(
values=tensor([0.4351, 0.1527, 0.1218, 0.0175, 0.0114, 0.0101, 0.0097, 0.0059, 0.0055,
        0.0052], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991, 60824,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4905, 0.1373, 0.0908, 0.0161, 0.0134, 0.0110, 0.0076, 0.0052, 0.0052,
        0.0045], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991, 60824,  1390,    80])), torch.return_types.topk(
values=tensor([0.4287, 0.1541, 0.1127, 0.0180, 0.0119, 0.0113, 0.0100, 0.0069, 0.0062,
        0.0058], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  2398,  1390,  9919, 60824])), torch.return_types.topk(
values=tensor([0.4871, 0.1395, 0.0827, 0.0167, 0.0134, 0.0111, 0.0086, 0.0059, 0.0052,
        0.0050], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991,  1390, 60824,    80])), torch.return_types.topk(
values=tensor([0.8745, 0.0059, 0.0036, 0.0035, 0.0029, 0.0028, 0.0025, 0.0024, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([41445, 33622,    30, 20077,    80, 15588,  1111, 51174,   354,  8911])), torch.return_types.topk(
values=tensor([0.9326, 0.0044, 0.0043, 0.0020, 0.0018, 0.0016, 0.0015, 0.0011, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 30502, 33622, 15588, 20077, 53208, 51174, 29498,  1111,   354])), torch.return_types.topk(
values=tensor([0.9307, 0.0052, 0.0039, 0.0015, 0.0015, 0.0014, 0.0013, 0.0013, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 33622, 30502, 15588, 51174, 20077, 29498, 53208,   354,    80])), torch.return_types.topk(
values=tensor([9.4531e-01, 2.2545e-03, 1.8539e-03, 1.4954e-03, 1.0481e-03, 8.0967e-04,
        7.4339e-04, 7.3147e-04, 7.0381e-04, 6.4564e-04], dtype=torch.float16),
indices=tensor([41445,  8911, 29498, 30502,    80, 15588, 51174, 53208,  2214,  1828])), torch.return_types.topk(
values=tensor([0.7822, 0.0500, 0.0311, 0.0148, 0.0073, 0.0071, 0.0057, 0.0047, 0.0040,
        0.0023], dtype=torch.float16),
indices=tensor([41445, 20077, 15588, 53208,    30, 30502,   409,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.7822, 0.0378, 0.0349, 0.0257, 0.0207, 0.0114, 0.0038, 0.0029, 0.0012,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 20077, 15588, 53208, 30502,  1186,  1111, 55513,   409, 51174])), torch.return_types.topk(
values=tensor([8.3643e-01, 2.6062e-02, 2.2812e-02, 2.0294e-02, 1.6174e-02, 5.8594e-03,
        2.9926e-03, 1.9550e-03, 1.2970e-03, 7.7772e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186,  1111, 55513,   409, 51174])), torch.return_types.topk(
values=tensor([0.8096, 0.0486, 0.0302, 0.0133, 0.0054, 0.0047, 0.0015, 0.0013, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111, 55513,  1186, 15597])), torch.return_types.topk(
values=tensor([0.3918, 0.2032, 0.0578, 0.0233, 0.0176, 0.0128, 0.0105, 0.0092, 0.0043,
        0.0040], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077,    30,  3991, 15588, 34059,  1111])), torch.return_types.topk(
values=tensor([0.4287, 0.1482, 0.0411, 0.0281, 0.0197, 0.0122, 0.0112, 0.0064, 0.0049,
        0.0049], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077, 15588,  3991, 60824, 34059,  1186])), torch.return_types.topk(
values=tensor([0.5332, 0.1247, 0.0392, 0.0229, 0.0108, 0.0074, 0.0066, 0.0051, 0.0039,
        0.0036], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077, 15588,  3991, 60824, 30261, 34059])), torch.return_types.topk(
values=tensor([0.7124, 0.0987, 0.0185, 0.0074, 0.0037, 0.0026, 0.0024, 0.0023, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 54203, 41445, 15588, 60824, 30261])), torch.return_types.topk(
values=tensor([0.5610, 0.0655, 0.0322, 0.0072, 0.0071, 0.0060, 0.0057, 0.0055, 0.0053,
        0.0045], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 41565,  1390, 38982,    30, 54203,   213])), torch.return_types.topk(
values=tensor([0.5938, 0.0904, 0.0325, 0.0054, 0.0053, 0.0048, 0.0046, 0.0045, 0.0040,
        0.0033], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 41565, 54203, 20077, 38982, 33622,  1390,    34])), torch.return_types.topk(
values=tensor([0.6729, 0.0671, 0.0245, 0.0047, 0.0045, 0.0043, 0.0035, 0.0030, 0.0028,
        0.0028], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 33622, 54203, 38982, 41565,  1390, 20077,    34])), torch.return_types.topk(
values=tensor([0.8071, 0.0084, 0.0076, 0.0045, 0.0040, 0.0032, 0.0017, 0.0015, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   213, 64851,   336,  3617, 58401])), torch.return_types.topk(
values=tensor([0.5547, 0.0927, 0.0396, 0.0328, 0.0193, 0.0144, 0.0135, 0.0109, 0.0102,
        0.0064], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7734, 0.0569, 0.0353, 0.0109, 0.0067, 0.0055, 0.0050, 0.0043, 0.0032,
        0.0029], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.7695, 0.0575, 0.0343, 0.0133, 0.0065, 0.0056, 0.0051, 0.0042, 0.0029,
        0.0026], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,  1872,   980,  1390,  9919,  3991])), torch.return_types.topk(
values=tensor([0.7295, 0.0745, 0.0290, 0.0204, 0.0065, 0.0058, 0.0049, 0.0023, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.1080, 0.0323, 0.0263, 0.0253, 0.0149, 0.0114, 0.0100, 0.0099, 0.0089,
        0.0070], dtype=torch.float16),
indices=tensor([    2,  3991, 23401,  9182,  4725,  3659,   635,     5,   238,   590])), torch.return_types.topk(
values=tensor([0.1185, 0.0290, 0.0231, 0.0210, 0.0184, 0.0164, 0.0164, 0.0117, 0.0117,
        0.0100], dtype=torch.float16),
indices=tensor([    2, 38982,  4725,     5,  3659, 23401,  9182,   238,   585,   635])), torch.return_types.topk(
values=tensor([0.1185, 0.0290, 0.0231, 0.0210, 0.0184, 0.0164, 0.0164, 0.0117, 0.0117,
        0.0100], dtype=torch.float16),
indices=tensor([    2, 38982,  4725,     5,  3659, 23401,  9182,   238,   585,   635])), torch.return_types.topk(
values=tensor([9.0137e-01, 4.0054e-04, 1.6963e-04, 1.0490e-04, 4.2737e-05, 2.4796e-05,
        1.8358e-05, 1.2875e-05, 1.1563e-05, 9.9540e-06], dtype=torch.float16),
indices=tensor([   2,    6, 9182,    4,    7,  732,   13, 2207,    5,  806])), torch.return_types.topk(
values=tensor([0.1735, 0.1120, 0.0559, 0.0439, 0.0393, 0.0290, 0.0235, 0.0123, 0.0118,
        0.0111], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  1111,  3617,  1390, 47727])), torch.return_types.topk(
values=tensor([0.4648, 0.0718, 0.0252, 0.0244, 0.0193, 0.0192, 0.0121, 0.0091, 0.0063,
        0.0057], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  9919, 38982, 41445,  1111,  6091, 30360,  3617])), torch.return_types.topk(
values=tensor([0.5132, 0.0441, 0.0316, 0.0266, 0.0231, 0.0199, 0.0097, 0.0072, 0.0059,
        0.0057], dtype=torch.float16),
indices=tensor([60824,  3991, 38982,  9971,  9919, 41445,  1111,  6091, 31626,  3617])), torch.return_types.topk(
values=tensor([0.8286, 0.0130, 0.0068, 0.0052, 0.0040, 0.0035, 0.0029, 0.0019, 0.0016,
        0.0016], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110,  6091, 56796, 38982, 41445,  7610,  3617])), torch.return_types.topk(
values=tensor([0.5620, 0.1512, 0.0472, 0.0365, 0.0120, 0.0071, 0.0066, 0.0065, 0.0057,
        0.0056], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 51174,  1013,  4569,    30, 23401])), torch.return_types.topk(
values=tensor([0.5581, 0.2054, 0.0523, 0.0223, 0.0101, 0.0068, 0.0059, 0.0039, 0.0030,
        0.0028], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 60824, 51174, 23401, 21058,  1013])), torch.return_types.topk(
values=tensor([0.5767, 0.2172, 0.0380, 0.0227, 0.0086, 0.0058, 0.0054, 0.0030, 0.0028,
        0.0023], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 60824, 51174, 23401, 21058,  1013])), torch.return_types.topk(
values=tensor([0.5259, 0.3450, 0.0262, 0.0095, 0.0032, 0.0023, 0.0021, 0.0017, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824, 21058,  4569,  1013,   291, 51174])), torch.return_types.topk(
values=tensor([0.2559, 0.0757, 0.0757, 0.0695, 0.0249, 0.0244, 0.0229, 0.0208, 0.0187,
        0.0136], dtype=torch.float16),
indices=tensor([  980, 38982, 30360,  4300,  4569,  1390,  9919,  3991,    30,  2398])), torch.return_types.topk(
values=tensor([0.2959, 0.1097, 0.0931, 0.0535, 0.0273, 0.0235, 0.0143, 0.0120, 0.0102,
        0.0089], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  9919,  3991,  1390,  4569,    80, 60824])), torch.return_types.topk(
values=tensor([0.3247, 0.1071, 0.0783, 0.0526, 0.0243, 0.0189, 0.0140, 0.0131, 0.0112,
        0.0093], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  9919,  3991,  1390,  4569,    80,  2398])), torch.return_types.topk(
values=tensor([0.5278, 0.1561, 0.0401, 0.0136, 0.0103, 0.0094, 0.0069, 0.0037, 0.0032,
        0.0031], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  4569,  2398,  3991, 38982, 60824,   336,    80])), torch.return_types.topk(
values=tensor([0.8350, 0.0058, 0.0054, 0.0048, 0.0042, 0.0035, 0.0035, 0.0033, 0.0032,
        0.0030], dtype=torch.float16),
indices=tensor([41445, 33622,    30,    80, 51174, 15588, 30261,  9971,  1111,  8911])), torch.return_types.topk(
values=tensor([0.9146, 0.0041, 0.0026, 0.0026, 0.0025, 0.0022, 0.0021, 0.0014, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 33622, 51174,    80, 15588, 30261, 30502,  1111,  9971,   354])), torch.return_types.topk(
values=tensor([0.9077, 0.0053, 0.0030, 0.0027, 0.0023, 0.0022, 0.0019, 0.0017, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([41445, 33622,    80, 51174, 30261, 15588, 30502,   354, 29498,  8911])), torch.return_types.topk(
values=tensor([0.8960, 0.0046, 0.0026, 0.0026, 0.0012, 0.0011, 0.0011, 0.0010, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 30502, 51174, 48446, 30261, 15588,   409])), torch.return_types.topk(
values=tensor([0.7910, 0.0367, 0.0340, 0.0120, 0.0100, 0.0079, 0.0044, 0.0042, 0.0034,
        0.0017], dtype=torch.float16),
indices=tensor([41445, 20077, 15588, 53208,   409,    30,  1111, 30502, 55513,  1186])), torch.return_types.topk(
values=tensor([0.8208, 0.0366, 0.0283, 0.0184, 0.0106, 0.0060, 0.0031, 0.0030, 0.0025,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186,  1111,   409, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8560, 0.0288, 0.0192, 0.0141, 0.0085, 0.0036, 0.0032, 0.0027, 0.0018,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186,   409,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8228, 0.0314, 0.0297, 0.0114, 0.0096, 0.0050, 0.0017, 0.0015, 0.0014,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077, 15597,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.4524, 0.1650, 0.0398, 0.0249, 0.0130, 0.0084, 0.0080, 0.0068, 0.0049,
        0.0046], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991, 30261,  1111])), torch.return_types.topk(
values=tensor([0.5063, 0.1261, 0.0286, 0.0258, 0.0101, 0.0090, 0.0078, 0.0063, 0.0050,
        0.0049], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 15588, 20077,  3991, 60824, 30261, 34059])), torch.return_types.topk(
values=tensor([0.5767, 0.1034, 0.0261, 0.0240, 0.0068, 0.0055, 0.0053, 0.0053, 0.0052,
        0.0037], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 15588, 20077, 60824, 30261,  3991, 34059])), torch.return_types.topk(
values=tensor([0.6836, 0.1124, 0.0101, 0.0078, 0.0038, 0.0030, 0.0029, 0.0023, 0.0020,
        0.0017], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 54203, 34059, 30261, 41445, 15588])), torch.return_types.topk(
values=tensor([0.5283, 0.0570, 0.0284, 0.0072, 0.0072, 0.0069, 0.0065, 0.0061, 0.0055,
        0.0050], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390,    34,    30,   213, 38982,  3617, 54203])), torch.return_types.topk(
values=tensor([0.6309, 0.0691, 0.0266, 0.0046, 0.0045, 0.0041, 0.0039, 0.0038, 0.0038,
        0.0032], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390, 54203, 38982,   213,    34, 41565,  1111])), torch.return_types.topk(
values=tensor([0.6792, 0.0562, 0.0218, 0.0042, 0.0040, 0.0040, 0.0039, 0.0034, 0.0028,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 38982, 54203,   213,  1390,    34, 41565, 33622])), torch.return_types.topk(
values=tensor([0.7148, 0.0093, 0.0091, 0.0073, 0.0058, 0.0034, 0.0032, 0.0025, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([30261,    34,  9971, 41445, 54203,   336,   213, 58401,  3617, 64851])), torch.return_types.topk(
values=tensor([0.5112, 0.1031, 0.0440, 0.0413, 0.0223, 0.0171, 0.0134, 0.0114, 0.0087,
        0.0065], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.6948, 0.0786, 0.0448, 0.0200, 0.0087, 0.0078, 0.0071, 0.0070, 0.0040,
        0.0039], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1390,  1872,  9919,  3991])), torch.return_types.topk(
values=tensor([0.6743, 0.0825, 0.0466, 0.0240, 0.0087, 0.0086, 0.0080, 0.0079, 0.0045,
        0.0036], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1872,   980,   649,  1390,  9919,  3991])), torch.return_types.topk(
values=tensor([0.7837, 0.0460, 0.0246, 0.0121, 0.0063, 0.0060, 0.0046, 0.0026, 0.0026,
        0.0023], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  1390,  3175, 57667])), torch.return_types.topk(
values=tensor([0.5679, 0.1354, 0.0068, 0.0060, 0.0044, 0.0042, 0.0038, 0.0035, 0.0029,
        0.0020], dtype=torch.float16),
indices=tensor([    2,  9182,     4,     6,   292,   590,   749, 13038,     5,  6503])), torch.return_types.topk(
values=tensor([4.4580e-01, 3.3667e-01, 8.5083e-02, 8.4915e-03, 2.0008e-03, 1.7252e-03,
        9.1267e-04, 3.4785e-04, 3.3188e-04, 2.6989e-04], dtype=torch.float16),
indices=tensor([   5,    2,    6,    4, 9182,   60,  191,   62,   11,   40])), torch.return_types.topk(
values=tensor([4.0747e-01, 3.8892e-01, 7.4219e-02, 7.4043e-03, 1.9932e-03, 1.6136e-03,
        8.1778e-04, 3.2020e-04, 3.0923e-04, 2.6870e-04], dtype=torch.float16),
indices=tensor([   5,    2,    6,    4, 9182,   60,  191,   11,   62,   40])), torch.return_types.topk(
values=tensor([0.8125, 0.0341, 0.0120, 0.0080, 0.0028, 0.0024, 0.0021, 0.0013, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([ 3313,   688,  2369,  2367,  2676, 19936,   288,  3360,  1111,  7686])), torch.return_types.topk(
values=tensor([0.1527, 0.1492, 0.0473, 0.0310, 0.0270, 0.0143, 0.0074, 0.0062, 0.0054,
        0.0042], dtype=torch.float16),
indices=tensor([   2,    4,    6,   13, 4725,  241,   49,  130,  299,    5])), torch.return_types.topk(
values=tensor([0.4460, 0.0633, 0.0274, 0.0266, 0.0227, 0.0183, 0.0118, 0.0081, 0.0075,
        0.0073], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919, 41445,  1111, 31626,  6091, 51174])), torch.return_types.topk(
values=tensor([0.0728, 0.0662, 0.0516, 0.0255, 0.0252, 0.0173, 0.0166, 0.0164, 0.0148,
        0.0123], dtype=torch.float16),
indices=tensor([ 3991, 23401, 38982,  4725, 20076,     5,   462,     4,  1007,   635])), torch.return_types.topk(
values=tensor([0.8452, 0.0143, 0.0068, 0.0038, 0.0027, 0.0026, 0.0024, 0.0015, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([60824,  9971,   110,  3991, 38982, 56796,  6091, 41445,  3617,  7610])), torch.return_types.topk(
values=tensor([0.5122, 0.1638, 0.0411, 0.0368, 0.0126, 0.0118, 0.0095, 0.0084, 0.0073,
        0.0055], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  9919,  1013, 51174,  4569,    30,  1390])), torch.return_types.topk(
values=tensor([0.5303, 0.2109, 0.0442, 0.0288, 0.0118, 0.0084, 0.0069, 0.0056, 0.0041,
        0.0030], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 51174, 60824,  1013, 23401, 21058])), torch.return_types.topk(
values=tensor([0.5415, 0.2170, 0.0352, 0.0294, 0.0110, 0.0083, 0.0064, 0.0053, 0.0035,
        0.0029], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 51174, 60824,  1013, 23401,  4569])), torch.return_types.topk(
values=tensor([0.4832, 0.3853, 0.0277, 0.0073, 0.0028, 0.0026, 0.0022, 0.0018, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 21058,   291, 51174])), torch.return_types.topk(
values=tensor([0.2065, 0.0766, 0.0687, 0.0625, 0.0362, 0.0302, 0.0220, 0.0209, 0.0195,
        0.0168], dtype=torch.float16),
indices=tensor([  980, 38982, 30360,  4300,  1390,  4569,  2398,  9919,    30,  3991])), torch.return_types.topk(
values=tensor([0.2488, 0.1078, 0.0820, 0.0538, 0.0297, 0.0256, 0.0224, 0.0163, 0.0155,
        0.0122], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  9919,  1390,  3991,    80,  4569,  2398])), torch.return_types.topk(
values=tensor([0.2651, 0.1038, 0.0724, 0.0564, 0.0264, 0.0258, 0.0190, 0.0174, 0.0164,
        0.0153], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  9919,  1390,  3991,  4569,    80,  2398])), torch.return_types.topk(
values=tensor([0.5063, 0.1619, 0.0342, 0.0186, 0.0157, 0.0076, 0.0053, 0.0043, 0.0041,
        0.0036], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,    80,   336,  1390])), torch.return_types.topk(
values=tensor([0.8018, 0.0081, 0.0070, 0.0057, 0.0043, 0.0042, 0.0042, 0.0040, 0.0040,
        0.0038], dtype=torch.float16),
indices=tensor([41445, 33622,    30, 51174,    80, 30261, 15588,  1111,  9971, 20077])), torch.return_types.topk(
values=tensor([0.8892, 0.0058, 0.0042, 0.0038, 0.0032, 0.0029, 0.0024, 0.0023, 0.0022,
        0.0022], dtype=torch.float16),
indices=tensor([41445, 33622, 30502, 51174, 15588, 30261, 20077, 53208,    80,  1111])), torch.return_types.topk(
values=tensor([0.8853, 0.0072, 0.0039, 0.0036, 0.0030, 0.0026, 0.0026, 0.0024, 0.0019,
        0.0019], dtype=torch.float16),
indices=tensor([41445, 33622, 51174, 30502, 30261,    80, 15588,   354,  1111, 20077])), torch.return_types.topk(
values=tensor([0.9087, 0.0030, 0.0030, 0.0027, 0.0025, 0.0015, 0.0013, 0.0013, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 29498,  8911,    80, 30502, 51174, 53208,  2214, 48446, 15588])), torch.return_types.topk(
values=tensor([0.7480, 0.0482, 0.0372, 0.0196, 0.0111, 0.0076, 0.0068, 0.0054, 0.0038,
        0.0027], dtype=torch.float16),
indices=tensor([41445, 20077, 15588, 53208,    30,   409, 30502,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([0.7661, 0.0403, 0.0396, 0.0337, 0.0179, 0.0108, 0.0040, 0.0030, 0.0021,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186,  1111, 55513,   409, 51174])), torch.return_types.topk(
values=tensor([0.8188, 0.0313, 0.0267, 0.0240, 0.0135, 0.0061, 0.0034, 0.0023, 0.0021,
        0.0012], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208, 30502,  1186,  1111,   409, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7700, 0.0668, 0.0323, 0.0240, 0.0059, 0.0053, 0.0016, 0.0015, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 55513, 15597])), torch.return_types.topk(
values=tensor([0.3730, 0.1790, 0.0439, 0.0309, 0.0157, 0.0128, 0.0103, 0.0082, 0.0059,
        0.0057], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991,  1111, 30261])), torch.return_types.topk(
values=tensor([0.3843, 0.1482, 0.0415, 0.0296, 0.0159, 0.0151, 0.0104, 0.0064, 0.0063,
        0.0059], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 20077, 15588,  3991, 30261, 34059,  7680])), torch.return_types.topk(
values=tensor([0.4722, 0.1251, 0.0376, 0.0286, 0.0097, 0.0094, 0.0069, 0.0066, 0.0049,
        0.0046], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 15588, 20077, 30261,  3991, 60824, 34059])), torch.return_types.topk(
values=tensor([0.5620, 0.1636, 0.0144, 0.0093, 0.0047, 0.0032, 0.0032, 0.0032, 0.0032,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 34059, 41445, 54203, 60824, 30261, 15588])), torch.return_types.topk(
values=tensor([0.4744, 0.0688, 0.0328, 0.0090, 0.0084, 0.0075, 0.0070, 0.0067, 0.0061,
        0.0057], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    30,  1390, 38982,   213,    34, 41565, 54203])), torch.return_types.topk(
values=tensor([0.5698, 0.0861, 0.0304, 0.0059, 0.0054, 0.0052, 0.0050, 0.0041, 0.0041,
        0.0037], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390, 38982, 54203, 41565,   213,  1111, 33622])), torch.return_types.topk(
values=tensor([0.6328, 0.0677, 0.0249, 0.0054, 0.0049, 0.0047, 0.0042, 0.0040, 0.0035,
        0.0033], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 38982,  1390, 54203,   213, 33622, 41565,    34])), torch.return_types.topk(
values=tensor([0.7266, 0.0076, 0.0074, 0.0072, 0.0060, 0.0029, 0.0027, 0.0025, 0.0023,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,   336,   213,  3617, 58401, 38982])), torch.return_types.topk(
values=tensor([0.5078, 0.1048, 0.0465, 0.0343, 0.0263, 0.0167, 0.0123, 0.0100, 0.0100,
        0.0062], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  3991,  1872,  9919])), torch.return_types.topk(
values=tensor([0.7031, 0.0801, 0.0375, 0.0209, 0.0086, 0.0086, 0.0070, 0.0060, 0.0044,
        0.0039], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,  1390,   649,  1872,  3991,  9919])), torch.return_types.topk(
values=tensor([0.6855, 0.0818, 0.0384, 0.0264, 0.0093, 0.0086, 0.0076, 0.0071, 0.0042,
        0.0038], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1390,   980,  1872,   649,  9919,  3991])), torch.return_types.topk(
values=tensor([0.8022, 0.0435, 0.0231, 0.0101, 0.0057, 0.0052, 0.0040, 0.0025, 0.0023,
        0.0021], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  1390,  3175,  3991])), torch.return_types.topk(
values=tensor([0.4854, 0.0408, 0.0238, 0.0098, 0.0091, 0.0085, 0.0065, 0.0065, 0.0054,
        0.0031], dtype=torch.float16),
indices=tensor([    2,  9182, 39526,     7,   590,   292,   201,     4,  8460,    30])), torch.return_types.topk(
values=tensor([8.9453e-01, 2.7323e-04, 3.9577e-05, 2.2352e-05, 2.2233e-05, 9.5367e-06,
        9.3579e-06, 8.3447e-06, 6.9737e-06, 5.3644e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7, 9182,    5,   13,   40, 2207,   11])), torch.return_types.topk(
values=tensor([8.9453e-01, 2.6798e-04, 3.9876e-05, 2.1756e-05, 2.1279e-05, 9.0599e-06,
        8.9407e-06, 8.2850e-06, 6.8545e-06, 5.2452e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4, 9182,    7,    5,   13,   40, 2207,   11])), torch.return_types.topk(
values=tensor([0.7661, 0.0670, 0.0337, 0.0048, 0.0048, 0.0033, 0.0020, 0.0019, 0.0017,
        0.0013], dtype=torch.float16),
indices=tensor([ 3313,   688,  2369, 19936,  2367,  2676,  1111,   288,  7686,  3360])), torch.return_types.topk(
values=tensor([7.4414e-01, 1.2341e-01, 4.2725e-03, 2.5311e-03, 1.1911e-03, 1.1053e-03,
        8.5449e-04, 8.2827e-04, 7.5102e-04, 7.2527e-04], dtype=torch.float16),
indices=tensor([  644,  4433,  3991,  2313,  1390, 38982,  6653,  9971,  4247,  1149])), torch.return_types.topk(
values=tensor([0.2334, 0.1086, 0.0364, 0.0316, 0.0309, 0.0292, 0.0240, 0.0147, 0.0124,
        0.0113], dtype=torch.float16),
indices=tensor([60824,  3991,  9919, 41445, 38982,  9971,  1111, 51174, 30360,  4300])), torch.return_types.topk(
values=tensor([0.2815, 0.0668, 0.0525, 0.0347, 0.0321, 0.0306, 0.0193, 0.0141, 0.0126,
        0.0103], dtype=torch.float16),
indices=tensor([60824,  3991, 38982,  9919,  9971, 41445,  1111, 51174, 31626, 30360])), torch.return_types.topk(
values=tensor([0.8247, 0.0129, 0.0058, 0.0057, 0.0037, 0.0032, 0.0025, 0.0018, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110, 56796,  6091, 38982, 41445,  7610,  1111])), torch.return_types.topk(
values=tensor([0.4719, 0.1439, 0.0475, 0.0345, 0.0165, 0.0154, 0.0145, 0.0107, 0.0090,
        0.0084], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 51174,  1013,  4569,  1390,  1111])), torch.return_types.topk(
values=tensor([0.4805, 0.1868, 0.0651, 0.0263, 0.0174, 0.0145, 0.0076, 0.0073, 0.0068,
        0.0055], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 51174,  1013, 60824, 23401,  1111])), torch.return_types.topk(
values=tensor([0.5029, 0.1938, 0.0494, 0.0281, 0.0158, 0.0140, 0.0069, 0.0066, 0.0055,
        0.0049], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 51174,  1013, 60824, 23401, 38982])), torch.return_types.topk(
values=tensor([0.5112, 0.3770, 0.0213, 0.0063, 0.0026, 0.0025, 0.0020, 0.0017, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 21058, 51174,   291])), torch.return_types.topk(
values=tensor([0.1436, 0.0964, 0.0694, 0.0668, 0.0496, 0.0308, 0.0223, 0.0197, 0.0177,
        0.0171], dtype=torch.float16),
indices=tensor([  980, 38982, 30360,  4300,  1390,  4569,  9919,  2398,    30,  3991])), torch.return_types.topk(
values=tensor([0.1807, 0.1113, 0.0860, 0.0771, 0.0342, 0.0329, 0.0235, 0.0174, 0.0152,
        0.0129], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  1390,  9919,  3991,  4569, 51174,    80])), torch.return_types.topk(
values=tensor([0.1949, 0.1093, 0.0781, 0.0781, 0.0344, 0.0292, 0.0198, 0.0198, 0.0141,
        0.0137], dtype=torch.float16),
indices=tensor([  980, 30360, 38982,  4300,  1390,  9919,  3991,  4569,    80, 51174])), torch.return_types.topk(
values=tensor([0.4451, 0.2102, 0.0434, 0.0208, 0.0152, 0.0076, 0.0056, 0.0038, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,    80,   336, 60824])), torch.return_types.topk(
values=tensor([0.8135, 0.0060, 0.0059, 0.0056, 0.0048, 0.0039, 0.0038, 0.0033, 0.0032,
        0.0027], dtype=torch.float16),
indices=tensor([41445,    80,    30, 33622, 51174, 30261,  8911,  9971,  1111, 48446])), torch.return_types.topk(
values=tensor([0.8984, 0.0040, 0.0036, 0.0034, 0.0029, 0.0021, 0.0020, 0.0015, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 33622,    80, 51174, 30261, 30502, 15588,  9971, 53208,  1111])), torch.return_types.topk(
values=tensor([0.8950, 0.0048, 0.0041, 0.0032, 0.0029, 0.0018, 0.0017, 0.0017, 0.0017,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 33622,    80, 51174, 30261, 30502,   354, 29498,  8911, 15588])), torch.return_types.topk(
values=tensor([0.9087, 0.0036, 0.0030, 0.0026, 0.0014, 0.0014, 0.0012, 0.0012, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445,    80,  8911, 29498, 51174, 30502, 30261, 48446,  2214,  1828])), torch.return_types.topk(
values=tensor([0.7925, 0.0298, 0.0271, 0.0142, 0.0098, 0.0082, 0.0046, 0.0038, 0.0026,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409,    30,  1111, 30502, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8267, 0.0303, 0.0229, 0.0222, 0.0101, 0.0055, 0.0031, 0.0029, 0.0020,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,  1186,  1111,   409, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8628, 0.0230, 0.0173, 0.0144, 0.0079, 0.0031, 0.0030, 0.0025, 0.0014,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1186,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8315, 0.0357, 0.0229, 0.0116, 0.0067, 0.0042, 0.0013, 0.0013, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111, 15597, 55513, 51174])), torch.return_types.topk(
values=tensor([0.4583, 0.1547, 0.0400, 0.0226, 0.0108, 0.0066, 0.0064, 0.0061, 0.0054,
        0.0046], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991, 30261,  1390])), torch.return_types.topk(
values=tensor([0.4963, 0.1161, 0.0303, 0.0257, 0.0082, 0.0076, 0.0075, 0.0063, 0.0062,
        0.0046], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 15588, 20077,  3991, 30261, 60824,  7680])), torch.return_types.topk(
values=tensor([0.5718, 0.0955, 0.0263, 0.0238, 0.0065, 0.0052, 0.0051, 0.0046, 0.0044,
        0.0040], dtype=torch.float16),
indices=tensor([ 9971, 41565, 41445, 24501, 30261, 15588, 60824,  3991, 20077, 54203])), torch.return_types.topk(
values=tensor([0.7139, 0.0922, 0.0098, 0.0077, 0.0034, 0.0032, 0.0025, 0.0022, 0.0019,
        0.0013], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 54203, 30261, 34059, 41445, 40315])), torch.return_types.topk(
values=tensor([0.5254, 0.0520, 0.0290, 0.0078, 0.0068, 0.0065, 0.0064, 0.0060, 0.0059,
        0.0057], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390,   213, 38982,    30,    34,  3617, 54203])), torch.return_types.topk(
values=tensor([0.6143, 0.0689, 0.0276, 0.0056, 0.0052, 0.0049, 0.0042, 0.0038, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,  1390, 54203, 38982,   213, 41565,  1111,   336])), torch.return_types.topk(
values=tensor([0.6733, 0.0527, 0.0215, 0.0046, 0.0046, 0.0043, 0.0041, 0.0030, 0.0028,
        0.0027], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 38982, 54203,  1390,   213, 33622,    34, 41565])), torch.return_types.topk(
values=tensor([0.7314, 0.0084, 0.0078, 0.0070, 0.0060, 0.0032, 0.0030, 0.0024, 0.0021,
        0.0021], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,   336,   213, 58401,  3617, 38982])), torch.return_types.topk(
values=tensor([0.5278, 0.0962, 0.0548, 0.0327, 0.0216, 0.0152, 0.0130, 0.0102, 0.0069,
        0.0053], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991,  9919])), torch.return_types.topk(
values=tensor([0.6919, 0.0795, 0.0403, 0.0277, 0.0076, 0.0075, 0.0073, 0.0063, 0.0038,
        0.0030], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,  1390,   649,  1872,  9919,  3991])), torch.return_types.topk(
values=tensor([0.6782, 0.0829, 0.0407, 0.0320, 0.0079, 0.0077, 0.0072, 0.0071, 0.0041,
        0.0028], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,  1390,  1872,   649,   980,  9919, 57667])), torch.return_types.topk(
values=tensor([0.6978, 0.0782, 0.0329, 0.0299, 0.0073, 0.0058, 0.0045, 0.0032, 0.0026,
        0.0024], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1872,  1390,  3175, 57667])), torch.return_types.topk(
values=tensor([0.2117, 0.1882, 0.0862, 0.0822, 0.0282, 0.0267, 0.0263, 0.0177, 0.0114,
        0.0098], dtype=torch.float16),
indices=tensor([ 4569,  5442, 21405,  1390, 45883,  2398, 38982,   649,   980,  3175])), torch.return_types.topk(
values=tensor([8.9307e-01, 1.7893e-04, 5.9664e-05, 2.6703e-05, 1.5497e-05, 1.3590e-05,
        1.1146e-05, 1.0133e-05, 6.6161e-06, 6.0797e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7, 9182,    5,   13,   40,   11, 2207])), torch.return_types.topk(
values=tensor([8.9941e-01, 1.6375e-03, 2.2340e-04, 1.0067e-04, 6.8665e-05, 2.3186e-05,
        1.7583e-05, 1.6987e-05, 1.5259e-05, 1.2577e-05], dtype=torch.float16),
indices=tensor([   2,    6, 9182,    4,    7,  732,   13,   40, 2207,    5])), torch.return_types.topk(
values=tensor([0.7690, 0.0421, 0.0181, 0.0151, 0.0028, 0.0027, 0.0022, 0.0011, 0.0010,
        0.0009], dtype=torch.float16),
indices=tensor([ 3313,   688,  2369,  2367, 19936,   288,  2676,  3360,  7686,  1111])), torch.return_types.topk(
values=tensor([0.0905, 0.0448, 0.0377, 0.0318, 0.0227, 0.0125, 0.0091, 0.0082, 0.0076,
        0.0067], dtype=torch.float16),
indices=tensor([   2,    4,   13, 4725,  241,    6,  435,  130,  552,   49])), torch.return_types.topk(
values=tensor([0.3704, 0.0538, 0.0364, 0.0279, 0.0258, 0.0212, 0.0127, 0.0101, 0.0090,
        0.0087], dtype=torch.float16),
indices=tensor([60824,  3991, 38982,  9971,  9919, 41445,  1111, 31626,  4300, 51174])), torch.return_types.topk(
values=tensor([0.3669, 0.3088, 0.0139, 0.0103, 0.0086, 0.0062, 0.0049, 0.0040, 0.0032,
        0.0028], dtype=torch.float16),
indices=tensor([11446,  7133,  2651,  6706, 16970, 35859, 13175,  8896, 15865,  3142])), torch.return_types.topk(
values=tensor([8.2812e-01, 2.4231e-02, 8.1177e-03, 7.9880e-03, 2.2888e-03, 1.5488e-03,
        1.3514e-03, 7.4339e-04, 6.2084e-04, 4.7803e-04], dtype=torch.float16),
indices=tensor([ 3313,   688,  2367,  2369, 19936,  2676,   288,  3360,  7686,  1111])), torch.return_types.topk(
values=tensor([0.5459, 0.1627, 0.0344, 0.0238, 0.0117, 0.0108, 0.0108, 0.0084, 0.0083,
        0.0056], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  9919,  4569, 51174,    30,  1390])), torch.return_types.topk(
values=tensor([0.5679, 0.2137, 0.0259, 0.0238, 0.0102, 0.0072, 0.0060, 0.0057, 0.0037,
        0.0032], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 51174,  1013, 60824,  4569, 23401])), torch.return_types.topk(
values=tensor([0.5723, 0.2277, 0.0246, 0.0196, 0.0087, 0.0065, 0.0053, 0.0050, 0.0039,
        0.0026], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  9919, 51174,  1013, 60824,  4569, 38982])), torch.return_types.topk(
values=tensor([0.5562, 0.3242, 0.0211, 0.0061, 0.0036, 0.0034, 0.0027, 0.0016, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013, 60824,  4569, 51174,   291, 21058])), torch.return_types.topk(
values=tensor([0.1970, 0.0754, 0.0697, 0.0587, 0.0426, 0.0327, 0.0279, 0.0235, 0.0180,
        0.0129], dtype=torch.float16),
indices=tensor([  980, 30360, 38982,  4300,  4569,  1390,  2398,    30,  9919,  3991])), torch.return_types.topk(
values=tensor([0.2257, 0.1208, 0.0786, 0.0511, 0.0276, 0.0253, 0.0244, 0.0169, 0.0162,
        0.0159], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  9919,  4569,  1390,  2398,  3991,    80])), torch.return_types.topk(
values=tensor([0.2546, 0.1231, 0.0696, 0.0482, 0.0279, 0.0226, 0.0222, 0.0217, 0.0157,
        0.0132], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  9919,  1390,  2398,    80,  3991])), torch.return_types.topk(
values=tensor([0.4880, 0.1635, 0.0356, 0.0245, 0.0176, 0.0065, 0.0050, 0.0044, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,    80,   336,  1390])), torch.return_types.topk(
values=tensor([0.8867, 0.0040, 0.0037, 0.0034, 0.0027, 0.0021, 0.0020, 0.0019, 0.0017,
        0.0015], dtype=torch.float16),
indices=tensor([41445,    30, 33622,    80,  8911, 51174, 30261, 29498, 48446,  9971])), torch.return_types.topk(
values=tensor([9.4678e-01, 2.2392e-03, 1.5812e-03, 1.4629e-03, 1.2465e-03, 1.1616e-03,
        1.1435e-03, 9.2983e-04, 8.1396e-04, 7.4720e-04], dtype=torch.float16),
indices=tensor([41445, 33622,    80, 30502, 51174, 29498, 30261,  8911, 15588, 53208])), torch.return_types.topk(
values=tensor([9.4189e-01, 2.9278e-03, 1.7481e-03, 1.3990e-03, 1.3046e-03, 1.2445e-03,
        1.2302e-03, 1.2255e-03, 7.4339e-04, 7.4053e-04], dtype=torch.float16),
indices=tensor([41445, 33622,    80, 29498, 30502, 30261,  8911, 51174,  2214,   354])), torch.return_types.topk(
values=tensor([9.1699e-01, 2.8076e-03, 2.6779e-03, 2.3174e-03, 1.1435e-03, 9.4748e-04,
        9.0075e-04, 8.3303e-04, 7.3528e-04, 7.1239e-04], dtype=torch.float16),
indices=tensor([41445,    80, 29498,  8911, 30502, 30261, 48446, 51174, 58599,  2214])), torch.return_types.topk(
values=tensor([0.8262, 0.0260, 0.0255, 0.0136, 0.0091, 0.0075, 0.0041, 0.0026, 0.0025,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409,    30, 30502, 55513,  1111,  1186])), torch.return_types.topk(
values=tensor([8.5352e-01, 2.6184e-02, 2.0386e-02, 1.7578e-02, 1.0750e-02, 3.3283e-03,
        2.1152e-03, 1.6670e-03, 1.6479e-03, 6.3515e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,  1186,   409,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([8.8965e-01, 1.8753e-02, 1.4267e-02, 1.0941e-02, 7.9422e-03, 2.1782e-03,
        1.6966e-03, 1.2712e-03, 1.0834e-03, 5.7983e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077, 30502,   409,  1186,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8115, 0.0451, 0.0291, 0.0129, 0.0063, 0.0053, 0.0013, 0.0012, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077, 55513,  1111, 15597,  1186])), torch.return_types.topk(
values=tensor([0.5264, 0.1749, 0.0409, 0.0119, 0.0119, 0.0066, 0.0045, 0.0036, 0.0035,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991,  7610, 30261])), torch.return_types.topk(
values=tensor([0.5923, 0.1157, 0.0246, 0.0142, 0.0065, 0.0052, 0.0049, 0.0040, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077, 15588, 60824,  3991, 34059,  7610])), torch.return_types.topk(
values=tensor([0.6938, 0.0822, 0.0206, 0.0107, 0.0035, 0.0034, 0.0031, 0.0028, 0.0026,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 30261, 20077, 15588, 54203,  7610])), torch.return_types.topk(
values=tensor([0.6650, 0.1165, 0.0123, 0.0077, 0.0036, 0.0031, 0.0029, 0.0029, 0.0024,
        0.0020], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 54203, 30261, 34059, 41445, 20077])), torch.return_types.topk(
values=tensor([0.6895, 0.0280, 0.0179, 0.0061, 0.0055, 0.0053, 0.0041, 0.0037, 0.0037,
        0.0029], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   213,    30, 54203, 38982,  3617,  1390])), torch.return_types.topk(
values=tensor([0.7749, 0.0338, 0.0162, 0.0034, 0.0025, 0.0024, 0.0023, 0.0019, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,   213,    34, 38982, 41565,  1390,  3617])), torch.return_types.topk(
values=tensor([0.8203, 0.0244, 0.0115, 0.0027, 0.0023, 0.0021, 0.0021, 0.0016, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,   213,    34, 38982, 33622,  3617,  1390])), torch.return_types.topk(
values=tensor([0.7856, 0.0080, 0.0066, 0.0051, 0.0047, 0.0025, 0.0023, 0.0019, 0.0018,
        0.0017], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,   336,   213, 58401, 64851,  3617])), torch.return_types.topk(
values=tensor([0.6377, 0.0817, 0.0338, 0.0276, 0.0137, 0.0120, 0.0117, 0.0094, 0.0064,
        0.0046], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7939, 0.0520, 0.0259, 0.0139, 0.0064, 0.0053, 0.0048, 0.0037, 0.0025,
        0.0020], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.7798, 0.0547, 0.0267, 0.0171, 0.0062, 0.0060, 0.0049, 0.0041, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,  1872,   980,  1390,  9919,  3991])), torch.return_types.topk(
values=tensor([0.8071, 0.0456, 0.0177, 0.0117, 0.0053, 0.0053, 0.0051, 0.0022, 0.0018,
        0.0018], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  1390,  3175,    57])), torch.return_types.topk(
values=tensor([0.6519, 0.0204, 0.0093, 0.0036, 0.0029, 0.0023, 0.0022, 0.0021, 0.0018,
        0.0016], dtype=torch.float16),
indices=tensor([   2, 9182,    4,  359,    6, 3991, 1911,  299,  242, 1848])), torch.return_types.topk(
values=tensor([5.9424e-01, 2.0544e-01, 7.2083e-02, 1.0971e-02, 2.9182e-03, 2.0771e-03,
        6.3372e-04, 4.1723e-04, 3.5143e-04, 3.3402e-04], dtype=torch.float16),
indices=tensor([   2,    5,    6,    4, 9182,   60,  191, 5888,   13,   11])), torch.return_types.topk(
values=tensor([8.9746e-01, 2.4748e-04, 4.4286e-05, 2.4557e-05, 1.9908e-05, 9.4175e-06,
        8.3447e-06, 8.0466e-06, 7.1526e-06, 5.0664e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4, 9182,    7,   13,    5,   40, 2207,   22])), torch.return_types.topk(
values=tensor([0.6982, 0.1322, 0.0148, 0.0064, 0.0042, 0.0038, 0.0024, 0.0021, 0.0021,
        0.0009], dtype=torch.float16),
indices=tensor([50449,  6530, 26306, 46789, 18900, 25728, 34001, 32543, 20694, 52173])), torch.return_types.topk(
values=tensor([0.3723, 0.0699, 0.0466, 0.0246, 0.0151, 0.0137, 0.0136, 0.0115, 0.0109,
        0.0084], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  3617,  1111, 47727,    30])), torch.return_types.topk(
values=tensor([0.6636, 0.0374, 0.0166, 0.0095, 0.0091, 0.0090, 0.0062, 0.0053, 0.0048,
        0.0044], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  9919,  6091, 38982, 41445, 30360,  3617,  4300])), torch.return_types.topk(
values=tensor([0.7319, 0.0185, 0.0145, 0.0125, 0.0067, 0.0062, 0.0055, 0.0044, 0.0037,
        0.0029], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919,  6091, 41445,  3617, 30360,  4300])), torch.return_types.topk(
values=tensor([0.8682, 0.0101, 0.0044, 0.0037, 0.0037, 0.0029, 0.0017, 0.0011, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110,  6091, 56796, 38982,  4247,  3617,  7610])), torch.return_types.topk(
values=tensor([0.6660, 0.1835, 0.0223, 0.0123, 0.0061, 0.0059, 0.0047, 0.0037, 0.0031,
        0.0025], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,    30,  1013,  9919,  4569, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6543, 0.2333, 0.0135, 0.0129, 0.0037, 0.0036, 0.0027, 0.0026, 0.0018,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  9919, 51174,  1013, 23401, 21058])), torch.return_types.topk(
values=tensor([0.6558, 0.2430, 0.0132, 0.0098, 0.0032, 0.0029, 0.0024, 0.0021, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  9919, 51174,  1013, 21058, 23401])), torch.return_types.topk(
values=tensor([0.6387, 0.2705, 0.0135, 0.0060, 0.0033, 0.0027, 0.0015, 0.0012, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 51174,   291, 21058])), torch.return_types.topk(
values=tensor([0.3591, 0.1078, 0.0664, 0.0425, 0.0277, 0.0250, 0.0250, 0.0136, 0.0096,
        0.0089], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,    30,  4569,  2398,  1390,  9919,  3991])), torch.return_types.topk(
values=tensor([0.4377, 0.1478, 0.0848, 0.0220, 0.0146, 0.0127, 0.0099, 0.0094, 0.0083,
        0.0078], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991,  9919,    80,  1390])), torch.return_types.topk(
values=tensor([0.4915, 0.1333, 0.0640, 0.0201, 0.0197, 0.0129, 0.0083, 0.0074, 0.0073,
        0.0071], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,    80,  3991,  9919,  1390])), torch.return_types.topk(
values=tensor([0.5352, 0.1620, 0.0471, 0.0157, 0.0133, 0.0062, 0.0048, 0.0040, 0.0033,
        0.0033], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982,    80, 60824,   336])), torch.return_types.topk(
values=tensor([0.8853, 0.0043, 0.0032, 0.0030, 0.0030, 0.0023, 0.0020, 0.0019, 0.0019,
        0.0012], dtype=torch.float16),
indices=tensor([41445,    80,    30, 51174,  8911, 29498, 33622, 30261, 48446,  9971])), torch.return_types.topk(
values=tensor([0.9331, 0.0026, 0.0023, 0.0021, 0.0016, 0.0016, 0.0015, 0.0013, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([41445,    80, 30502, 51174, 53208, 30261, 29498,  8911,  2214, 33622])), torch.return_types.topk(
values=tensor([0.9326, 0.0027, 0.0018, 0.0017, 0.0016, 0.0016, 0.0016, 0.0014, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([41445,    80, 51174, 30502,  8911, 29498, 30261, 33622,  2214, 53208])), torch.return_types.topk(
values=tensor([0.9146, 0.0031, 0.0030, 0.0026, 0.0020, 0.0013, 0.0013, 0.0011, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445,  8911, 29498,    80, 30502, 51174, 53208,  2214, 48446, 30261])), torch.return_types.topk(
values=tensor([0.8335, 0.0283, 0.0254, 0.0107, 0.0072, 0.0068, 0.0049, 0.0023, 0.0015,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 20077,    30,   409, 30502,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([8.3936e-01, 4.5898e-02, 2.5543e-02, 1.3779e-02, 7.2021e-03, 2.2144e-03,
        1.4868e-03, 1.3962e-03, 1.0538e-03, 8.2731e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,  1186,   409,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([8.7988e-01, 2.9404e-02, 1.7975e-02, 9.6207e-03, 4.5433e-03, 1.5106e-03,
        1.1139e-03, 1.0967e-03, 7.3624e-04, 7.1335e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 51174, 55513])), torch.return_types.topk(
values=tensor([0.7773, 0.0718, 0.0288, 0.0170, 0.0058, 0.0038, 0.0016, 0.0014, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077, 15597,  1111, 55513, 14552])), torch.return_types.topk(
values=tensor([0.5059, 0.1832, 0.0347, 0.0101, 0.0096, 0.0046, 0.0046, 0.0042, 0.0038,
        0.0038], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30, 41445, 20077,  7610, 15588,    34, 34059])), torch.return_types.topk(
values=tensor([0.5229, 0.1333, 0.0223, 0.0144, 0.0070, 0.0058, 0.0054, 0.0050, 0.0046,
        0.0044], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 15588, 20077,  7610, 34059,  3991])), torch.return_types.topk(
values=tensor([0.6372, 0.0984, 0.0182, 0.0106, 0.0053, 0.0041, 0.0037, 0.0032, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 60824, 30261,  7610, 15588, 34059, 54203])), torch.return_types.topk(
values=tensor([0.6128, 0.1274, 0.0108, 0.0101, 0.0045, 0.0037, 0.0034, 0.0026, 0.0022,
        0.0018], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 34059, 54203, 30261, 41445, 15588])), torch.return_types.topk(
values=tensor([0.6470, 0.0257, 0.0223, 0.0064, 0.0056, 0.0050, 0.0049, 0.0045, 0.0044,
        0.0034], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,    30,   213,  3617, 38982, 54203, 41565])), torch.return_types.topk(
values=tensor([0.7397, 0.0285, 0.0188, 0.0034, 0.0030, 0.0026, 0.0024, 0.0024, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,    34,   213, 41565,  1390,  3617])), torch.return_types.topk(
values=tensor([0.7896, 0.0209, 0.0136, 0.0028, 0.0027, 0.0024, 0.0022, 0.0017, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,    34,   213,  3617,  1390, 33622])), torch.return_types.topk(
values=tensor([0.8066, 0.0072, 0.0056, 0.0050, 0.0033, 0.0032, 0.0014, 0.0014, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([30261,  9971,    34, 41445, 54203,   213, 64851,  3617,   336, 58401])), torch.return_types.topk(
values=tensor([0.7192, 0.0638, 0.0304, 0.0195, 0.0103, 0.0101, 0.0084, 0.0053, 0.0032,
        0.0028], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8198, 0.0481, 0.0201, 0.0142, 0.0050, 0.0049, 0.0038, 0.0035, 0.0014,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3991,  2347])), torch.return_types.topk(
values=tensor([0.8032, 0.0505, 0.0217, 0.0177, 0.0049, 0.0048, 0.0047, 0.0039, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390, 57667,  3991])), torch.return_types.topk(
values=tensor([0.7329, 0.0743, 0.0259, 0.0245, 0.0061, 0.0057, 0.0045, 0.0024, 0.0023,
        0.0020], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1872,  1390,  3175,  2398])), torch.return_types.topk(
values=tensor([3.8330e-01, 3.3301e-01, 1.5979e-01, 3.6430e-03, 1.3828e-03, 4.4370e-04,
        3.5524e-04, 3.4165e-04, 3.1471e-04, 2.7990e-04], dtype=torch.float16),
indices=tensor([   5,    2,    6,    4, 9182,  191,   60,   11,   40,    7])), torch.return_types.topk(
values=tensor([0.1768, 0.1273, 0.0731, 0.0163, 0.0094, 0.0093, 0.0085, 0.0076, 0.0073,
        0.0060], dtype=torch.float16),
indices=tensor([    2,  9182,     4,     6,     5,  2313,  4725, 38982,  1331,  2304])), torch.return_types.topk(
values=tensor([0.1768, 0.1273, 0.0731, 0.0163, 0.0094, 0.0093, 0.0085, 0.0076, 0.0073,
        0.0060], dtype=torch.float16),
indices=tensor([    2,  9182,     4,     6,     5,  2313,  4725, 38982,  1331,  2304])), torch.return_types.topk(
values=tensor([9.6533e-01, 2.3193e-03, 3.9983e-04, 2.2089e-04, 2.0671e-04, 1.8167e-04,
        1.3185e-04, 9.3520e-05, 8.5115e-05, 8.1897e-05], dtype=torch.float16),
indices=tensor([ 1892, 12275,  1927, 86819,   122, 11818,  7171,  2783,  1340, 61248])), torch.return_types.topk(
values=tensor([0.3748, 0.0548, 0.0480, 0.0220, 0.0157, 0.0133, 0.0120, 0.0098, 0.0093,
        0.0076], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  3617,  1111,  9919,  4300, 51174])), torch.return_types.topk(
values=tensor([0.6123, 0.0359, 0.0192, 0.0096, 0.0087, 0.0079, 0.0077, 0.0074, 0.0065,
        0.0047], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091,  9919, 41445, 30360,  4300,  1111])), torch.return_types.topk(
values=tensor([0.0371, 0.0171, 0.0155, 0.0102, 0.0094, 0.0089, 0.0089, 0.0066, 0.0066,
        0.0057], dtype=torch.float16),
indices=tensor([ 1007,  1687,   462,    30,   635,     3,  1042,   143,     4, 23401])), torch.return_types.topk(
values=tensor([0.8481, 0.0118, 0.0055, 0.0049, 0.0034, 0.0031, 0.0021, 0.0014, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([60824,  9971,   110,  3991, 56796,  6091, 38982,  7610,  3617, 41445])), torch.return_types.topk(
values=tensor([0.6841, 0.1945, 0.0208, 0.0085, 0.0052, 0.0051, 0.0035, 0.0024, 0.0021,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,    30,  1013,  4569, 51174,  9919, 60824])), torch.return_types.topk(
values=tensor([0.6582, 0.2460, 0.0122, 0.0109, 0.0032, 0.0026, 0.0023, 0.0017, 0.0016,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013, 51174,  9919, 21058,  4569])), torch.return_types.topk(
values=tensor([0.6553, 0.2588, 0.0124, 0.0081, 0.0027, 0.0022, 0.0020, 0.0014, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013, 51174,  9919, 21058,  4569])), torch.return_types.topk(
values=tensor([0.5610, 0.3376, 0.0189, 0.0055, 0.0025, 0.0024, 0.0016, 0.0013, 0.0012,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 21058,   291, 51174])), torch.return_types.topk(
values=tensor([0.3723, 0.1144, 0.0745, 0.0414, 0.0247, 0.0240, 0.0234, 0.0152, 0.0067,
        0.0066], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,    30,  4569,  1390,    80,     7])), torch.return_types.topk(
values=tensor([0.4119, 0.1588, 0.1010, 0.0227, 0.0150, 0.0130, 0.0101, 0.0085, 0.0080,
        0.0066], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  1390,  3991,    80,  9919])), torch.return_types.topk(
values=tensor([0.4685, 0.1510, 0.0765, 0.0198, 0.0185, 0.0133, 0.0090, 0.0073, 0.0068,
        0.0050], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398, 38982,  4569,  1390,    80,  3991,  9919])), torch.return_types.topk(
values=tensor([0.5020, 0.1721, 0.0439, 0.0174, 0.0134, 0.0072, 0.0053, 0.0038, 0.0037,
        0.0034], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982, 60824,    80,  1390])), torch.return_types.topk(
values=tensor([0.8652, 0.0047, 0.0040, 0.0037, 0.0031, 0.0028, 0.0027, 0.0021, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([41445, 33622,    80,    30,  8911, 30261, 51174,  9971, 48446, 15588])), torch.return_types.topk(
values=tensor([0.9277, 0.0032, 0.0026, 0.0020, 0.0018, 0.0017, 0.0015, 0.0014, 0.0013,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 33622, 30502,    80, 51174, 30261, 53208, 15588, 29498,  8911])), torch.return_types.topk(
values=tensor([0.9277, 0.0037, 0.0022, 0.0021, 0.0017, 0.0017, 0.0014, 0.0014, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 33622,    80, 30502, 30261, 51174, 29498,  8911, 15588, 53208])), torch.return_types.topk(
values=tensor([0.9199, 0.0031, 0.0026, 0.0025, 0.0016, 0.0012, 0.0010, 0.0010, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 30502, 51174, 48446, 30261, 53208,  2214])), torch.return_types.topk(
values=tensor([0.8145, 0.0290, 0.0266, 0.0181, 0.0067, 0.0065, 0.0052, 0.0030, 0.0029,
        0.0013], dtype=torch.float16),
indices=tensor([41445, 15588, 20077, 53208,   409,    30, 30502,  1111, 55513,  1186])), torch.return_types.topk(
values=tensor([8.1982e-01, 3.3569e-02, 2.9861e-02, 2.1179e-02, 1.5976e-02, 5.9738e-03,
        2.2659e-03, 2.1133e-03, 1.5821e-03, 7.6246e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 20077, 30502,  1186,  1111, 55513,   409, 51174])), torch.return_types.topk(
values=tensor([8.7012e-01, 2.2293e-02, 2.1271e-02, 1.2024e-02, 1.1040e-02, 2.7046e-03,
        1.6861e-03, 1.6861e-03, 1.2980e-03, 6.6805e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 20077, 30502,  1186,  1111,   409, 55513, 51174])), torch.return_types.topk(
values=tensor([0.8071, 0.0516, 0.0285, 0.0136, 0.0054, 0.0050, 0.0014, 0.0012, 0.0011,
        0.0011], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502,   409, 20077,  1111, 15597, 55513,  1186])), torch.return_types.topk(
values=tensor([0.4644, 0.1862, 0.0428, 0.0163, 0.0116, 0.0080, 0.0064, 0.0054, 0.0044,
        0.0041], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30, 20077, 15588,  3991, 34059, 30261])), torch.return_types.topk(
values=tensor([0.4717, 0.1405, 0.0264, 0.0250, 0.0100, 0.0094, 0.0071, 0.0065, 0.0053,
        0.0046], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077, 15588,  3991, 60824, 34059, 30261])), torch.return_types.topk(
values=tensor([0.5923, 0.1071, 0.0231, 0.0188, 0.0051, 0.0050, 0.0047, 0.0045, 0.0037,
        0.0035], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 15588, 60824, 20077, 30261,  3991, 34059])), torch.return_types.topk(
values=tensor([0.5977, 0.1511, 0.0114, 0.0113, 0.0043, 0.0038, 0.0034, 0.0029, 0.0026,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610, 60824, 34059, 54203, 41445, 30261, 15588])), torch.return_types.topk(
values=tensor([0.6187, 0.0386, 0.0240, 0.0062, 0.0056, 0.0054, 0.0054, 0.0051, 0.0048,
        0.0047], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34,   213,  3617,    30, 54203,  1390, 38982])), torch.return_types.topk(
values=tensor([0.6836, 0.0540, 0.0227, 0.0047, 0.0037, 0.0035, 0.0034, 0.0028, 0.0028,
        0.0026], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,  1390, 41565,   213,    34,  3617])), torch.return_types.topk(
values=tensor([0.7515, 0.0389, 0.0171, 0.0038, 0.0032, 0.0026, 0.0025, 0.0023, 0.0022,
        0.0021], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203, 38982,   213,    34,  1390, 33622, 41565])), torch.return_types.topk(
values=tensor([0.7397, 0.0088, 0.0085, 0.0063, 0.0057, 0.0035, 0.0025, 0.0024, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,   336, 58401,  3617, 38982,   213])), torch.return_types.topk(
values=tensor([0.6084, 0.0919, 0.0371, 0.0247, 0.0157, 0.0131, 0.0121, 0.0083, 0.0068,
        0.0048], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7686, 0.0651, 0.0263, 0.0152, 0.0066, 0.0059, 0.0046, 0.0046, 0.0028,
        0.0028], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.7603, 0.0670, 0.0266, 0.0184, 0.0063, 0.0055, 0.0055, 0.0047, 0.0028,
        0.0023], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  9919,  3991])), torch.return_types.topk(
values=tensor([0.7197, 0.0833, 0.0266, 0.0231, 0.0063, 0.0057, 0.0042, 0.0027, 0.0023,
        0.0019], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   980,   649,  1872,  1390,  3175, 57667])), torch.return_types.topk(
values=tensor([8.9404e-01, 4.7946e-04, 5.5909e-05, 2.9325e-05, 2.5153e-05, 1.5020e-05,
        1.4842e-05, 1.3828e-05, 8.5235e-06, 8.0466e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4, 9182,    7,   40,   13,    5, 2207,   11])), torch.return_types.topk(
values=tensor([8.9648e-01, 2.9492e-04, 1.6999e-04, 1.1373e-04, 4.6492e-05, 2.1815e-05,
        1.5020e-05, 8.0466e-06, 7.3314e-06, 6.4373e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,   13,    5, 9182,   22, 2207,   30])), torch.return_types.topk(
values=tensor([8.8721e-01, 5.1117e-03, 4.4060e-03, 1.0449e-04, 9.8526e-05, 9.1136e-05,
        7.8559e-05, 6.9320e-05, 4.9472e-05, 4.7028e-05], dtype=torch.float16),
indices=tensor([   2, 9182,    6,   20,    4, 2313,    7,  732,   40,  749])), torch.return_types.topk(
values=tensor([0.8340, 0.0172, 0.0164, 0.0070, 0.0061, 0.0055, 0.0043, 0.0031, 0.0021,
        0.0015], dtype=torch.float16),
indices=tensor([40625, 61906, 25042,  1303,   515, 38507, 47061, 12561,   336,   788])), torch.return_types.topk(
values=tensor([0.2419, 0.0804, 0.0540, 0.0357, 0.0243, 0.0201, 0.0174, 0.0135, 0.0118,
        0.0104], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  9919,  1111,  3617, 47727,  4300])), torch.return_types.topk(
values=tensor([0.4971, 0.0566, 0.0229, 0.0190, 0.0166, 0.0139, 0.0102, 0.0094, 0.0082,
        0.0075], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  9919, 38982, 41445,  6091,  1111, 30360,  4300])), torch.return_types.topk(
values=tensor([0.6035, 0.0278, 0.0238, 0.0217, 0.0133, 0.0112, 0.0074, 0.0059, 0.0057,
        0.0049], dtype=torch.float16),
indices=tensor([60824,  3991, 38982,  9971,  9919, 41445,  6091,  1111, 30360,  4300])), torch.return_types.topk(
values=tensor([0.8433, 0.0117, 0.0054, 0.0046, 0.0040, 0.0038, 0.0024, 0.0014, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([60824,  9971,  3991,   110,  6091, 56796, 38982, 41445,  7610,  3617])), torch.return_types.topk(
values=tensor([0.6494, 0.1655, 0.0252, 0.0170, 0.0078, 0.0066, 0.0058, 0.0055, 0.0039,
        0.0030], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,    30,  9919,  4569, 51174, 23401])), torch.return_types.topk(
values=tensor([0.6270, 0.2167, 0.0227, 0.0159, 0.0061, 0.0047, 0.0041, 0.0038, 0.0027,
        0.0024], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980,  9919, 60824, 51174,  1013, 23401, 21058])), torch.return_types.topk(
values=tensor([0.6294, 0.2369, 0.0166, 0.0151, 0.0047, 0.0040, 0.0035, 0.0030, 0.0020,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  9919, 60824, 51174,  1013, 21058, 23401])), torch.return_types.topk(
values=tensor([0.5640, 0.3215, 0.0210, 0.0068, 0.0028, 0.0024, 0.0019, 0.0018, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013,  4569, 21058, 51174,   291])), torch.return_types.topk(
values=tensor([0.3013, 0.0970, 0.0762, 0.0508, 0.0305, 0.0257, 0.0234, 0.0176, 0.0125,
        0.0111], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,    30,  1390,  9919,  3991])), torch.return_types.topk(
values=tensor([0.3254, 0.1455, 0.1024, 0.0368, 0.0179, 0.0168, 0.0147, 0.0135, 0.0116,
        0.0110], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  9919,  4569,  2398,  3991,  1390,    80])), torch.return_types.topk(
values=tensor([0.3877, 0.1415, 0.0800, 0.0313, 0.0198, 0.0179, 0.0131, 0.0105, 0.0101,
        0.0101], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  9919,    80,  1390,  3991])), torch.return_types.topk(
values=tensor([0.5068, 0.1672, 0.0464, 0.0159, 0.0144, 0.0079, 0.0054, 0.0036, 0.0035,
        0.0033], dtype=torch.float16),
indices=tensor([  980, 30360,  4300,  2398,  4569,  3991, 38982, 60824,    80,   336])), torch.return_types.topk(
values=tensor([9.2285e-01, 3.2024e-03, 2.0504e-03, 1.8454e-03, 1.3771e-03, 1.3504e-03,
        1.1330e-03, 1.0433e-03, 9.8038e-04, 9.1743e-04], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 33622, 30261, 48446, 51174,  9971, 15588])), torch.return_types.topk(
values=tensor([9.4385e-01, 1.8654e-03, 1.5707e-03, 1.4191e-03, 1.3227e-03, 1.2426e-03,
        1.1768e-03, 1.1225e-03, 8.0538e-04, 6.5231e-04], dtype=torch.float16),
indices=tensor([41445,  8911, 29498, 30502, 33622,    80,  2214, 30261, 51174, 53208])), torch.return_types.topk(
values=tensor([9.4824e-01, 1.9178e-03, 1.5230e-03, 1.2484e-03, 1.2293e-03, 1.1959e-03,
        1.0471e-03, 1.0185e-03, 7.8106e-04, 7.3099e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502,  8911, 33622, 29498, 51174, 30261, 53208,  2214])), torch.return_types.topk(
values=tensor([0.8525, 0.0244, 0.0135, 0.0102, 0.0072, 0.0039, 0.0036, 0.0031, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502, 55513,    30,  1111, 15597])), torch.return_types.topk(
values=tensor([8.5596e-01, 2.7939e-02, 1.9058e-02, 9.6588e-03, 4.4899e-03, 3.6087e-03,
        2.2850e-03, 1.5097e-03, 1.2417e-03, 8.3065e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409, 55513,  1186,  1111, 15597])), torch.return_types.topk(
values=tensor([8.6670e-01, 2.1866e-02, 1.8997e-02, 1.0246e-02, 5.4855e-03, 2.9812e-03,
        1.6727e-03, 1.2722e-03, 9.9087e-04, 6.2037e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.6890, 0.0911, 0.0229, 0.0062, 0.0057, 0.0037, 0.0033, 0.0030, 0.0028,
        0.0025], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610,    30, 54203, 41445, 30261, 40315, 34059])), torch.return_types.topk(
values=tensor([0.7446, 0.0574, 0.0141, 0.0046, 0.0042, 0.0035, 0.0033, 0.0028, 0.0021,
        0.0018], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 54203,  7610, 41445, 30261, 60824, 34059, 15588])), torch.return_types.topk(
values=tensor([0.6255, 0.1332, 0.0241, 0.0051, 0.0040, 0.0037, 0.0032, 0.0031, 0.0030,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 20077, 60824, 30261, 54203, 34059])), torch.return_types.topk(
values=tensor([0.7612, 0.0245, 0.0151, 0.0066, 0.0065, 0.0026, 0.0022, 0.0020, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,  3617,    30, 38982,   354, 58401])), torch.return_types.topk(
values=tensor([0.8589, 0.0132, 0.0106, 0.0046, 0.0029, 0.0013, 0.0013, 0.0010, 0.0009,
        0.0009], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,   354, 38982,   449, 64851, 33622])), torch.return_types.topk(
values=tensor([0.8154, 0.0154, 0.0136, 0.0036, 0.0034, 0.0017, 0.0017, 0.0016, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203, 41565, 38982,   213,  3617, 33622])), torch.return_types.topk(
values=tensor([0.7100, 0.0676, 0.0305, 0.0181, 0.0104, 0.0103, 0.0096, 0.0069, 0.0049,
        0.0042], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8115, 0.0487, 0.0184, 0.0179, 0.0052, 0.0043, 0.0042, 0.0040, 0.0021,
        0.0016], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.8555, 0.0373, 0.0185, 0.0103, 0.0039, 0.0034, 0.0026, 0.0025, 0.0014,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([8.9453e-01, 1.9991e-04, 5.0366e-05, 2.4498e-05, 1.3292e-05, 1.0669e-05,
        9.0599e-06, 6.7353e-06, 6.3181e-06, 5.1856e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13,   40, 2207,   22])), torch.return_types.topk(
values=tensor([8.9355e-01, 1.7214e-04, 4.2498e-05, 1.3590e-05, 9.5367e-06, 8.9407e-06,
        7.3910e-06, 5.5432e-06, 5.3048e-06, 4.4107e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13,   40, 2207,   22])), torch.return_types.topk(
values=tensor([8.9746e-01, 1.5199e-04, 4.8399e-05, 1.3292e-05, 1.0133e-05, 7.9870e-06,
        6.0797e-06, 5.2452e-06, 4.1723e-06, 3.8743e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.5083, 0.0641, 0.0455, 0.0138, 0.0124, 0.0101, 0.0083, 0.0080, 0.0051,
        0.0049], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  3617,  1111, 47727,  9919,   110])), torch.return_types.topk(
values=tensor([8.9160e-01, 7.0620e-04, 5.3823e-05, 3.8922e-05, 2.9385e-05, 1.7226e-05,
        1.2279e-05, 1.2040e-05, 9.3579e-06, 8.7619e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4, 9182,    7,   40,   13,    5,   22,   11])), torch.return_types.topk(
values=tensor([0.7217, 0.0216, 0.0194, 0.0061, 0.0060, 0.0049, 0.0046, 0.0043, 0.0038,
        0.0037], dtype=torch.float16),
indices=tensor([60824,  3991,  9971,  6091, 38982,  3617, 41445,  9919,   110, 30360])), torch.return_types.topk(
values=tensor([0.5967, 0.2795, 0.0277, 0.0106, 0.0042, 0.0040, 0.0020, 0.0019, 0.0019,
        0.0016], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  4569,  1013, 47727, 21058,  9919,    30])), torch.return_types.topk(
values=tensor([0.5415, 0.3579, 0.0173, 0.0123, 0.0022, 0.0018, 0.0017, 0.0016, 0.0014,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824, 21058,  1013,  4569, 51174,  9919])), torch.return_types.topk(
values=tensor([0.5996, 0.3015, 0.0155, 0.0113, 0.0024, 0.0018, 0.0015, 0.0015, 0.0014,
        0.0013], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  9919,  4569,  1013, 21058, 51174])), torch.return_types.topk(
values=tensor([0.3848, 0.1949, 0.0668, 0.0254, 0.0224, 0.0204, 0.0091, 0.0075, 0.0074,
        0.0072], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390, 47727,    80])), torch.return_types.topk(
values=tensor([0.4395, 0.2262, 0.0653, 0.0160, 0.0128, 0.0118, 0.0097, 0.0081, 0.0052,
        0.0034], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,    80,  1390, 60824])), torch.return_types.topk(
values=tensor([0.4541, 0.1849, 0.0783, 0.0148, 0.0116, 0.0111, 0.0104, 0.0078, 0.0062,
        0.0047], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  2398,    80,  9919,  1390])), torch.return_types.topk(
values=tensor([0.9136, 0.0034, 0.0025, 0.0019, 0.0018, 0.0016, 0.0014, 0.0013, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 33622, 30261,  9971, 51174, 48446, 15588])), torch.return_types.topk(
values=tensor([9.3896e-01, 1.9913e-03, 1.8921e-03, 1.8272e-03, 1.6184e-03, 1.3952e-03,
        1.3208e-03, 1.2703e-03, 9.6655e-04, 9.2220e-04], dtype=torch.float16),
indices=tensor([41445, 30502,  8911, 33622, 29498,    80,  2214, 30261, 51174, 53208])), torch.return_types.topk(
values=tensor([9.4580e-01, 1.9741e-03, 1.8911e-03, 1.5020e-03, 1.2894e-03, 1.2445e-03,
        1.1339e-03, 1.0815e-03, 1.0080e-03, 8.1635e-04], dtype=torch.float16),
indices=tensor([41445, 30502,    80, 33622,  8911, 29498, 51174, 30261, 53208, 15588])), torch.return_types.topk(
values=tensor([0.8267, 0.0301, 0.0169, 0.0102, 0.0095, 0.0052, 0.0047, 0.0040, 0.0023,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 55513, 30502,    30,  1111, 15597])), torch.return_types.topk(
values=tensor([0.8262, 0.0355, 0.0244, 0.0123, 0.0072, 0.0036, 0.0033, 0.0029, 0.0018,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077, 55513,   409,  1186,  1111, 15597])), torch.return_types.topk(
values=tensor([8.4473e-01, 2.8015e-02, 2.3224e-02, 1.3130e-02, 7.6599e-03, 2.8172e-03,
        2.0771e-03, 2.0618e-03, 1.2703e-03, 7.2098e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1186,  1111, 55513, 51174])), torch.return_types.topk(
values=tensor([0.6650, 0.0951, 0.0242, 0.0068, 0.0058, 0.0047, 0.0042, 0.0032, 0.0028,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 54203, 30261, 40315,    34])), torch.return_types.topk(
values=tensor([0.7290, 0.0603, 0.0161, 0.0052, 0.0048, 0.0041, 0.0035, 0.0029, 0.0023,
        0.0020], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 54203, 41445,  7610, 30261, 60824, 15588, 34059])), torch.return_types.topk(
values=tensor([0.5967, 0.1451, 0.0262, 0.0061, 0.0046, 0.0043, 0.0033, 0.0033, 0.0033,
        0.0032], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077,  7610, 60824,  3991, 54203, 30261])), torch.return_types.topk(
values=tensor([0.7070, 0.0333, 0.0240, 0.0083, 0.0070, 0.0029, 0.0027, 0.0027, 0.0026,
        0.0023], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,    30,  3617,   354, 38982, 41565])), torch.return_types.topk(
values=tensor([0.8193, 0.0190, 0.0184, 0.0062, 0.0034, 0.0019, 0.0017, 0.0015, 0.0014,
        0.0011], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,   354, 38982, 33622,   449, 64851])), torch.return_types.topk(
values=tensor([0.7886, 0.0219, 0.0174, 0.0040, 0.0039, 0.0022, 0.0020, 0.0019, 0.0017,
        0.0017], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203, 41565, 33622, 38982,   354,   213])), torch.return_types.topk(
values=tensor([0.7065, 0.0617, 0.0325, 0.0181, 0.0113, 0.0102, 0.0092, 0.0064, 0.0058,
        0.0045], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1390,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8228, 0.0436, 0.0172, 0.0162, 0.0050, 0.0041, 0.0038, 0.0036, 0.0023,
        0.0016], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1390,  1872,  3991, 57667])), torch.return_types.topk(
values=tensor([0.8608, 0.0358, 0.0168, 0.0098, 0.0039, 0.0035, 0.0025, 0.0025, 0.0016,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1390,  1872,  3991,  9919])), torch.return_types.topk(
values=tensor([8.9795e-01, 1.6870e-03, 3.2711e-04, 2.6798e-04, 7.8917e-05, 3.1650e-05,
        2.8074e-05, 2.6643e-05, 2.6047e-05, 2.3544e-05], dtype=torch.float16),
indices=tensor([   2,    6,    7, 9182,    4,   30, 2207,   13,  732,   40])), torch.return_types.topk(
values=tensor([8.6621e-01, 3.2043e-02, 6.6519e-04, 2.9278e-04, 8.5235e-05, 7.4029e-05,
        3.6597e-05, 3.5167e-05, 2.9147e-05, 2.7835e-05], dtype=torch.float16),
indices=tensor([   6, 9182,    2,    4,    5, 2207,   70,  732,   40,  191])), torch.return_types.topk(
values=tensor([8.9648e-01, 1.5295e-04, 4.2796e-05, 1.4246e-05, 9.8348e-06, 7.4506e-06,
        6.3777e-06, 5.1856e-06, 4.0531e-06, 3.6955e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.4080, 0.0720, 0.0640, 0.0200, 0.0189, 0.0121, 0.0109, 0.0097, 0.0079,
        0.0052], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  1111,  3617, 47727,  9919, 41565])), torch.return_types.topk(
values=tensor([0.6680, 0.0276, 0.0261, 0.0166, 0.0089, 0.0052, 0.0052, 0.0051, 0.0042,
        0.0039], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445, 30360,  6091,  9919,  1111,  3617])), torch.return_types.topk(
values=tensor([0.6689, 0.0299, 0.0231, 0.0087, 0.0068, 0.0064, 0.0061, 0.0052, 0.0051,
        0.0049], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  6091,  9919,  1111,  3617, 30360])), torch.return_types.topk(
values=tensor([0.6094, 0.2520, 0.0281, 0.0153, 0.0049, 0.0045, 0.0026, 0.0024, 0.0021,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 47727, 21058,    30])), torch.return_types.topk(
values=tensor([0.5435, 0.3350, 0.0195, 0.0188, 0.0029, 0.0023, 0.0023, 0.0021, 0.0021,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,  3991,   980, 60824,  1013,  9919, 51174, 21058,  4569])), torch.return_types.topk(
values=tensor([0.5991, 0.2920, 0.0162, 0.0158, 0.0028, 0.0024, 0.0017, 0.0016, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  9919,  1013, 51174,  4569, 21058])), torch.return_types.topk(
values=tensor([0.3425, 0.1776, 0.0758, 0.0352, 0.0233, 0.0192, 0.0114, 0.0113, 0.0083,
        0.0081], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  1390,  3991, 27993,    80])), torch.return_types.topk(
values=tensor([0.3770, 0.2234, 0.0778, 0.0257, 0.0134, 0.0130, 0.0103, 0.0093, 0.0089,
        0.0060], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  2398,    80,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4258, 0.1788, 0.0832, 0.0210, 0.0140, 0.0117, 0.0094, 0.0086, 0.0081,
        0.0063], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  3991,  4569,  2398,  9919,    80,  1390])), torch.return_types.topk(
values=tensor([0.9062, 0.0035, 0.0025, 0.0021, 0.0018, 0.0018, 0.0016, 0.0015, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 33622, 29498, 30261,  9971,    30, 51174, 15588])), torch.return_types.topk(
values=tensor([9.3652e-01, 1.8950e-03, 1.8444e-03, 1.6661e-03, 1.5707e-03, 1.4029e-03,
        1.3437e-03, 1.3180e-03, 1.0509e-03, 9.2697e-04], dtype=torch.float16),
indices=tensor([41445,  8911, 33622, 30502, 29498,    80, 30261,  2214, 51174, 15588])), torch.return_types.topk(
values=tensor([9.4678e-01, 1.8139e-03, 1.6508e-03, 1.3742e-03, 1.2321e-03, 1.1435e-03,
        1.0996e-03, 1.0214e-03, 8.5640e-04, 7.7105e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502, 33622,  8911, 29498, 51174, 30261, 53208, 15588])), torch.return_types.topk(
values=tensor([0.8198, 0.0313, 0.0138, 0.0119, 0.0117, 0.0058, 0.0048, 0.0043, 0.0023,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 20077,   409, 55513,    30, 30502,  1111, 15597])), torch.return_types.topk(
values=tensor([0.8286, 0.0353, 0.0204, 0.0108, 0.0071, 0.0044, 0.0037, 0.0025, 0.0017,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409, 55513,  1186,  1111, 15597])), torch.return_types.topk(
values=tensor([8.5498e-01, 2.3148e-02, 2.1408e-02, 1.1459e-02, 7.0572e-03, 3.3855e-03,
        1.8778e-03, 1.6441e-03, 1.1797e-03, 6.7997e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.6743, 0.0871, 0.0253, 0.0069, 0.0054, 0.0046, 0.0042, 0.0036, 0.0029,
        0.0028], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 41445, 54203, 30261,    34, 40315])), torch.return_types.topk(
values=tensor([0.7358, 0.0546, 0.0159, 0.0051, 0.0045, 0.0038, 0.0037, 0.0027, 0.0021,
        0.0020], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 54203, 41445,  7610, 30261, 60824, 34059, 15588])), torch.return_types.topk(
values=tensor([0.6250, 0.1300, 0.0256, 0.0055, 0.0039, 0.0038, 0.0031, 0.0031, 0.0031,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 20077, 30261, 34059, 54203, 60824])), torch.return_types.topk(
values=tensor([0.7261, 0.0288, 0.0204, 0.0076, 0.0071, 0.0028, 0.0027, 0.0025, 0.0025,
        0.0022], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,    30, 38982,  3617,   354,   213])), torch.return_types.topk(
values=tensor([0.8403, 0.0159, 0.0139, 0.0054, 0.0033, 0.0017, 0.0017, 0.0012, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,   354, 38982, 33622,   449,   213])), torch.return_types.topk(
values=tensor([0.8096, 0.0169, 0.0144, 0.0039, 0.0036, 0.0018, 0.0018, 0.0017, 0.0016,
        0.0015], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203, 38982, 41565, 33622,   213,  3617])), torch.return_types.topk(
values=tensor([0.6836, 0.0687, 0.0310, 0.0174, 0.0118, 0.0116, 0.0098, 0.0080, 0.0071,
        0.0050], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7969, 0.0518, 0.0172, 0.0169, 0.0058, 0.0050, 0.0045, 0.0044, 0.0030,
        0.0021], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,   649,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([0.8496, 0.0376, 0.0172, 0.0097, 0.0040, 0.0038, 0.0030, 0.0026, 0.0019,
        0.0014], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([8.9404e-01, 2.6464e-04, 4.2796e-05, 2.5928e-05, 2.0087e-05, 1.5080e-05,
        9.8944e-06, 8.8215e-06, 7.3314e-06, 6.5565e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7, 9182,    5,   13,   40, 2207,   11])), torch.return_types.topk(
values=tensor([8.9355e-01, 1.8466e-04, 4.0531e-05, 1.5199e-05, 8.7619e-06, 8.7023e-06,
        7.9274e-06, 5.9605e-06, 5.3048e-06, 4.6492e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7, 9182,    5,   13,   40, 2207,   22])), torch.return_types.topk(
values=tensor([8.9697e-01, 1.5616e-04, 4.7266e-05, 1.3351e-05, 9.5963e-06, 7.4506e-06,
        6.4969e-06, 5.1260e-06, 4.3511e-06, 3.8147e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([8.9258e-01, 6.9094e-04, 5.2631e-05, 4.2140e-05, 2.7478e-05, 1.8597e-05,
        1.6570e-05, 1.2577e-05, 1.1921e-05, 9.7156e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7, 9182,   40,    5,   13,   11,   22])), torch.return_types.topk(
values=tensor([8.7842e-01, 1.6464e-02, 5.9986e-04, 1.1861e-04, 6.2764e-05, 5.5909e-05,
        4.5836e-05, 3.8207e-05, 3.8028e-05, 2.6166e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13,   30,   40,    5, 9182,  806])), torch.return_types.topk(
values=tensor([0.6826, 0.0269, 0.0211, 0.0083, 0.0061, 0.0060, 0.0056, 0.0052, 0.0047,
        0.0045], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919,  6091, 41445,  3617,  1111, 30360])), torch.return_types.topk(
values=tensor([0.5801, 0.2615, 0.0317, 0.0167, 0.0057, 0.0050, 0.0033, 0.0028, 0.0026,
        0.0023], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 47727,    30, 21058])), torch.return_types.topk(
values=tensor([0.5337, 0.3418, 0.0208, 0.0184, 0.0026, 0.0024, 0.0023, 0.0022, 0.0020,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  9919,  1013, 21058, 51174,  4569])), torch.return_types.topk(
values=tensor([0.5850, 0.3035, 0.0174, 0.0146, 0.0025, 0.0025, 0.0016, 0.0016, 0.0015,
        0.0015], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  9919, 60824,  1013, 51174,  4569, 21058])), torch.return_types.topk(
values=tensor([0.3271, 0.1724, 0.0707, 0.0391, 0.0233, 0.0199, 0.0120, 0.0120, 0.0091,
        0.0090], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,    30, 47727])), torch.return_types.topk(
values=tensor([0.3855, 0.2179, 0.0707, 0.0262, 0.0131, 0.0126, 0.0116, 0.0090, 0.0078,
        0.0061], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  2398,    80,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4343, 0.1796, 0.0767, 0.0194, 0.0133, 0.0110, 0.0103, 0.0084, 0.0079,
        0.0054], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  3991,  4569,  2398,  9919,    80,  1390])), torch.return_types.topk(
values=tensor([0.9189, 0.0036, 0.0023, 0.0018, 0.0017, 0.0015, 0.0012, 0.0012, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 33622, 30261, 48446,  9971, 51174,    30])), torch.return_types.topk(
values=tensor([9.4287e-01, 2.0790e-03, 1.5268e-03, 1.4744e-03, 1.4515e-03, 1.3742e-03,
        1.3475e-03, 1.0958e-03, 7.4434e-04, 6.5660e-04], dtype=torch.float16),
indices=tensor([41445,  8911, 29498, 33622, 30502,  2214,    80, 30261, 51174, 53208])), torch.return_types.topk(
values=tensor([9.4873e-01, 1.9341e-03, 1.3876e-03, 1.3037e-03, 1.2245e-03, 1.1683e-03,
        9.3174e-04, 8.9264e-04, 7.6342e-04, 7.2861e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502,  8911, 33622, 29498, 30261, 51174,  2214, 53208])), torch.return_types.topk(
values=tensor([0.8447, 0.0255, 0.0135, 0.0118, 0.0083, 0.0041, 0.0039, 0.0031, 0.0017,
        0.0015], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 55513, 30502,    30,  1111, 15597])), torch.return_types.topk(
values=tensor([8.5449e-01, 2.7039e-02, 1.9470e-02, 9.6359e-03, 4.6616e-03, 4.2458e-03,
        2.4662e-03, 1.5192e-03, 1.2493e-03, 8.4877e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409, 55513,  1186,  1111, 15597])), torch.return_types.topk(
values=tensor([8.7158e-01, 2.1301e-02, 1.7120e-02, 9.6054e-03, 5.0621e-03, 3.2425e-03,
        1.4725e-03, 1.0815e-03, 9.2173e-04, 5.5695e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.7095, 0.0809, 0.0223, 0.0054, 0.0052, 0.0037, 0.0036, 0.0030, 0.0027,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,    30,  7610, 54203, 41445, 30261, 40315, 34059])), torch.return_types.topk(
values=tensor([0.7637, 0.0500, 0.0130, 0.0044, 0.0036, 0.0034, 0.0030, 0.0027, 0.0019,
        0.0015], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 54203,  7610, 41445, 30261, 60824, 34059,  3991])), torch.return_types.topk(
values=tensor([0.6548, 0.1202, 0.0226, 0.0046, 0.0037, 0.0029, 0.0029, 0.0029, 0.0028,
        0.0027], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 54203, 20077, 30261, 60824, 34059])), torch.return_types.topk(
values=tensor([0.7715, 0.0244, 0.0147, 0.0065, 0.0058, 0.0023, 0.0021, 0.0020, 0.0019,
        0.0019], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,  3617,    30, 38982,   354, 58401])), torch.return_types.topk(
values=tensor([8.6816e-01, 1.3184e-02, 9.5749e-03, 4.3488e-03, 2.5959e-03, 1.2169e-03,
        1.1845e-03, 8.9359e-04, 8.8358e-04, 8.5974e-04], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,   354, 38982,   449, 33622, 64851])), torch.return_types.topk(
values=tensor([0.8403, 0.0126, 0.0119, 0.0033, 0.0031, 0.0014, 0.0013, 0.0013, 0.0013,
        0.0013], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203, 38982,   213, 33622,  3617, 41565])), torch.return_types.topk(
values=tensor([0.6997, 0.0626, 0.0354, 0.0182, 0.0111, 0.0105, 0.0092, 0.0070, 0.0059,
        0.0044], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8042, 0.0464, 0.0206, 0.0183, 0.0056, 0.0044, 0.0042, 0.0042, 0.0025,
        0.0017], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,  1390,   649,  3991,  3175])), torch.return_types.topk(
values=tensor([0.8525, 0.0357, 0.0183, 0.0112, 0.0038, 0.0036, 0.0028, 0.0026, 0.0016,
        0.0012], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,    57])), torch.return_types.topk(
values=tensor([8.8379e-01, 1.2604e-02, 7.8106e-04, 1.1837e-04, 7.9453e-05, 6.9320e-05,
        5.3227e-05, 4.1544e-05, 3.7551e-05, 2.6464e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13,   30,   40,    5, 9182,   22])), torch.return_types.topk(
values=tensor([8.8916e-01, 8.2550e-03, 4.8804e-04, 6.6042e-05, 5.9783e-05, 4.0472e-05,
        3.6538e-05, 3.4928e-05, 2.9206e-05, 2.3305e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13, 9182,   30,   40,    5,  806])), torch.return_types.topk(
values=tensor([8.9697e-01, 1.4210e-04, 4.5419e-05, 1.3411e-05, 9.1195e-06, 7.2718e-06,
        6.1393e-06, 5.1260e-06, 4.1723e-06, 3.8743e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.4675, 0.0668, 0.0512, 0.0173, 0.0128, 0.0104, 0.0100, 0.0091, 0.0064,
        0.0051], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  3617,  1111, 47727,  9919,   110])), torch.return_types.topk(
values=tensor([8.9209e-01, 5.5885e-04, 5.0187e-05, 2.7835e-05, 2.4199e-05, 1.4663e-05,
        1.0967e-05, 1.0908e-05, 8.9407e-06, 8.9407e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7, 9182,   40,    5,   13,   22,   11])), torch.return_types.topk(
values=tensor([0.7197, 0.0211, 0.0192, 0.0066, 0.0061, 0.0051, 0.0043, 0.0042, 0.0042,
        0.0040], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091,  3617,  9919, 41445, 30360,   110])), torch.return_types.topk(
values=tensor([0.6030, 0.2759, 0.0257, 0.0105, 0.0046, 0.0039, 0.0022, 0.0020, 0.0019,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,    30, 47727,  9919, 21058])), torch.return_types.topk(
values=tensor([0.5425, 0.3643, 0.0165, 0.0116, 0.0018, 0.0018, 0.0016, 0.0014, 0.0013,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  1013, 21058,  4569,  9919, 51174])), torch.return_types.topk(
values=tensor([0.5928, 0.3174, 0.0146, 0.0100, 0.0019, 0.0016, 0.0014, 0.0014, 0.0012,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  9919,  1013,  4569, 21058, 51174])), torch.return_types.topk(
values=tensor([0.3545, 0.1973, 0.0682, 0.0312, 0.0215, 0.0208, 0.0094, 0.0084, 0.0083,
        0.0078], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,    30, 47727])), torch.return_types.topk(
values=tensor([0.4282, 0.2383, 0.0627, 0.0182, 0.0121, 0.0119, 0.0097, 0.0076, 0.0053,
        0.0036], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  2398,  4569,  3991,    80,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4583, 0.1956, 0.0725, 0.0150, 0.0111, 0.0107, 0.0104, 0.0071, 0.0060,
        0.0044], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  2398,    80,  9919,  1390])), torch.return_types.topk(
values=tensor([0.9165, 0.0036, 0.0023, 0.0020, 0.0014, 0.0013, 0.0012, 0.0011, 0.0011,
        0.0010], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 29498, 33622, 30261, 48446, 51174,    30,  2214])), torch.return_types.topk(
values=tensor([9.4092e-01, 2.1400e-03, 1.7328e-03, 1.6537e-03, 1.3494e-03, 1.3132e-03,
        1.2579e-03, 1.0309e-03, 8.3447e-04, 7.3099e-04], dtype=torch.float16),
indices=tensor([41445,  8911, 29498, 30502,    80,  2214, 33622, 30261, 51174, 53208])), torch.return_types.topk(
values=tensor([9.4775e-01, 1.8654e-03, 1.6527e-03, 1.3180e-03, 1.2474e-03, 1.1625e-03,
        9.7179e-04, 9.0551e-04, 8.3780e-04, 7.6246e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502,  8911, 29498, 33622, 51174, 30261, 53208,  2214])), torch.return_types.topk(
values=tensor([0.8408, 0.0250, 0.0149, 0.0114, 0.0074, 0.0044, 0.0041, 0.0035, 0.0018,
        0.0016], dtype=torch.float16),
indices=tensor([41445, 15588, 53208,   409, 20077, 30502, 55513,    30,  1111, 15597])), torch.return_types.topk(
values=tensor([0.8457, 0.0287, 0.0210, 0.0110, 0.0044, 0.0043, 0.0026, 0.0016, 0.0014,
        0.0010], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409, 55513,  1186,  1111, 15597])), torch.return_types.topk(
values=tensor([8.6084e-01, 2.4414e-02, 1.9012e-02, 1.1444e-02, 5.5771e-03, 3.1776e-03,
        1.6108e-03, 1.3094e-03, 1.0519e-03, 6.1369e-04], dtype=torch.float16),
indices=tensor([41445, 53208, 15588, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.6914, 0.0872, 0.0226, 0.0063, 0.0060, 0.0040, 0.0034, 0.0029, 0.0029,
        0.0024], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501,  7610,    30, 54203, 41445, 30261, 40315, 34059])), torch.return_types.topk(
values=tensor([0.7476, 0.0563, 0.0139, 0.0049, 0.0044, 0.0031, 0.0031, 0.0027, 0.0019,
        0.0016], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 54203,  7610, 41445, 30261, 60824, 34059, 15588])), torch.return_types.topk(
values=tensor([0.6172, 0.1377, 0.0245, 0.0047, 0.0044, 0.0036, 0.0031, 0.0030, 0.0029,
        0.0029], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,  7610, 20077, 54203, 60824, 30261, 34059])), torch.return_types.topk(
values=tensor([0.7437, 0.0260, 0.0145, 0.0076, 0.0064, 0.0027, 0.0027, 0.0024, 0.0023,
        0.0022], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,    30,  3617, 38982, 58401,   354])), torch.return_types.topk(
values=tensor([0.8525, 0.0138, 0.0095, 0.0051, 0.0029, 0.0015, 0.0014, 0.0012, 0.0010,
        0.0010], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34, 38982,   354,   449, 64851, 58401])), torch.return_types.topk(
values=tensor([0.8198, 0.0134, 0.0129, 0.0035, 0.0034, 0.0017, 0.0017, 0.0015, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([30261, 41445,  9971, 54203,    34, 38982, 41565, 33622,  3617,   213])), torch.return_types.topk(
values=tensor([0.7090, 0.0644, 0.0311, 0.0163, 0.0102, 0.0099, 0.0094, 0.0066, 0.0052,
        0.0042], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.8174, 0.0461, 0.0182, 0.0152, 0.0049, 0.0040, 0.0040, 0.0038, 0.0020,
        0.0018], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,   649,  1872,  1390,  3991,  3175])), torch.return_types.topk(
values=tensor([0.8555, 0.0364, 0.0164, 0.0106, 0.0039, 0.0035, 0.0026, 0.0025, 0.0015,
        0.0011], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([8.9453e-01, 3.7789e-04, 4.6194e-05, 2.9862e-05, 2.7120e-05, 1.6212e-05,
        1.0848e-05, 1.0610e-05, 8.3447e-06, 7.4506e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4, 9182,    7,    5,   13,   40, 2207,   11])), torch.return_types.topk(
values=tensor([8.9111e-01, 6.8588e-03, 6.4278e-04, 6.5684e-05, 5.5313e-05, 4.1425e-05,
        3.5286e-05, 3.0220e-05, 3.0160e-05, 1.8656e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13,   30, 9182,   40,    5,   22])), torch.return_types.topk(
values=tensor([8.9648e-01, 1.6940e-04, 4.7624e-05, 1.3590e-05, 9.8944e-06, 7.7486e-06,
        6.4969e-06, 5.2452e-06, 4.4703e-06, 3.6955e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.4854, 0.0646, 0.0500, 0.0165, 0.0122, 0.0102, 0.0092, 0.0086, 0.0059,
        0.0045], dtype=torch.float16),
indices=tensor([60824,  9971,  3991, 38982, 41445,  3617,  1111, 47727,  9919,  6091])), torch.return_types.topk(
values=tensor([8.9160e-01, 1.0605e-03, 5.6863e-05, 4.7684e-05, 3.2365e-05, 2.0206e-05,
        1.4007e-05, 1.2815e-05, 1.0669e-05, 1.0073e-05], dtype=torch.float16),
indices=tensor([   2,    6,    4, 9182,    7,   40,   13,    5,   22,   11])), torch.return_types.topk(
values=tensor([0.7231, 0.0227, 0.0181, 0.0065, 0.0064, 0.0047, 0.0044, 0.0042, 0.0039,
        0.0035], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  6091,  3617,  9919, 41445, 30360,  1111])), torch.return_types.topk(
values=tensor([0.6001, 0.2769, 0.0262, 0.0114, 0.0042, 0.0041, 0.0023, 0.0020, 0.0020,
        0.0020], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  4569,  1013,    30,  9919, 21058, 47727])), torch.return_types.topk(
values=tensor([0.5342, 0.3701, 0.0168, 0.0125, 0.0020, 0.0018, 0.0016, 0.0015, 0.0014,
        0.0012], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824, 21058,  1013,  4569,  9919, 51174])), torch.return_types.topk(
values=tensor([0.5903, 0.3159, 0.0149, 0.0114, 0.0022, 0.0018, 0.0014, 0.0014, 0.0014,
        0.0011], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991, 60824,  9919,  4569, 21058,  1013, 51174])), torch.return_types.topk(
values=tensor([0.3469, 0.1992, 0.0756, 0.0310, 0.0233, 0.0165, 0.0102, 0.0086, 0.0085,
        0.0081], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,    30, 47727])), torch.return_types.topk(
values=tensor([0.4060, 0.2463, 0.0717, 0.0193, 0.0126, 0.0103, 0.0097, 0.0075, 0.0055,
        0.0038], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  3991,  2398,    80,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4473, 0.1940, 0.0802, 0.0166, 0.0115, 0.0113, 0.0087, 0.0067, 0.0063,
        0.0044], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  3991,  4569,  2398,    80,  9919,  1390])), torch.return_types.topk(
values=tensor([0.9019, 0.0040, 0.0030, 0.0022, 0.0021, 0.0019, 0.0019, 0.0017, 0.0015,
        0.0014], dtype=torch.float16),
indices=tensor([41445,  8911,    80, 30261, 33622,  9971, 29498, 51174, 15588,    30])), torch.return_types.topk(
values=tensor([9.3701e-01, 2.1305e-03, 2.0332e-03, 1.8015e-03, 1.7672e-03, 1.6212e-03,
        1.5965e-03, 1.2922e-03, 1.1864e-03, 8.8501e-04], dtype=torch.float16),
indices=tensor([41445,  8911, 30502,    80, 33622, 29498, 30261,  2214, 51174, 15588])), torch.return_types.topk(
values=tensor([9.4189e-01, 2.5043e-03, 1.8253e-03, 1.4839e-03, 1.4048e-03, 1.3514e-03,
        1.2798e-03, 1.2550e-03, 8.2588e-04, 8.1348e-04], dtype=torch.float16),
indices=tensor([41445,    80, 30502,  8911, 33622, 51174, 29498, 30261, 15588,  2214])), torch.return_types.topk(
values=tensor([0.8193, 0.0289, 0.0123, 0.0122, 0.0112, 0.0054, 0.0051, 0.0047, 0.0029,
        0.0017], dtype=torch.float16),
indices=tensor([41445, 15588,   409, 20077, 53208, 55513, 30502,    30,  1111, 15597])), torch.return_types.topk(
values=tensor([0.8447, 0.0289, 0.0161, 0.0124, 0.0067, 0.0041, 0.0032, 0.0024, 0.0020,
        0.0009], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409, 55513,  1186,  1111, 15597])), torch.return_types.topk(
values=tensor([8.5352e-01, 2.1698e-02, 2.0386e-02, 1.2177e-02, 7.7972e-03, 3.6259e-03,
        2.1152e-03, 1.8454e-03, 1.1730e-03, 7.9679e-04], dtype=torch.float16),
indices=tensor([41445, 15588, 53208, 30502, 20077,   409,  1111,  1186, 55513, 51174])), torch.return_types.topk(
values=tensor([0.6782, 0.0803, 0.0241, 0.0065, 0.0055, 0.0051, 0.0045, 0.0039, 0.0030,
        0.0030], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445,    30,  7610, 30261, 54203,    34, 34059])), torch.return_types.topk(
values=tensor([0.7549, 0.0471, 0.0138, 0.0062, 0.0045, 0.0044, 0.0033, 0.0023, 0.0022,
        0.0022], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 30261, 54203,  7610, 60824, 34059, 15588])), torch.return_types.topk(
values=tensor([0.6221, 0.1304, 0.0234, 0.0069, 0.0040, 0.0039, 0.0035, 0.0031, 0.0031,
        0.0031], dtype=torch.float16),
indices=tensor([ 9971, 41565, 24501, 41445, 20077,  7610, 30261,  3991, 34059, 15588])), torch.return_types.topk(
values=tensor([0.7539, 0.0288, 0.0186, 0.0067, 0.0063, 0.0026, 0.0021, 0.0020, 0.0019,
        0.0019], dtype=torch.float16),
indices=tensor([30261,  9971, 41445,    34, 54203,  3617,   354, 38982,    30,   213])), torch.return_types.topk(
values=tensor([8.7256e-01, 1.5244e-02, 1.1421e-02, 3.8090e-03, 2.8648e-03, 1.2178e-03,
        1.0920e-03, 1.0538e-03, 8.3017e-04, 8.2731e-04], dtype=torch.float16),
indices=tensor([30261,  9971, 41445, 54203,    34,   354, 38982,   449, 64851,   213])), torch.return_types.topk(
values=tensor([0.8237, 0.0153, 0.0147, 0.0036, 0.0032, 0.0017, 0.0016, 0.0015, 0.0015,
        0.0013], dtype=torch.float16),
indices=tensor([30261, 41445,  9971,    34, 54203,  3617, 41565, 38982,   213, 64851])), torch.return_types.topk(
values=tensor([0.6772, 0.0687, 0.0345, 0.0197, 0.0121, 0.0108, 0.0103, 0.0082, 0.0067,
        0.0051], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,  1390,   980,   649,  1872,  3991, 47727])), torch.return_types.topk(
values=tensor([0.7881, 0.0536, 0.0212, 0.0196, 0.0055, 0.0052, 0.0046, 0.0045, 0.0027,
        0.0024], dtype=torch.float16),
indices=tensor([ 5442, 21405,  4569, 45883,   980,  1872,  1390,   649,  3991,  9919])), torch.return_types.topk(
values=tensor([0.8359, 0.0413, 0.0208, 0.0117, 0.0042, 0.0039, 0.0032, 0.0031, 0.0018,
        0.0015], dtype=torch.float16),
indices=tensor([ 5442, 21405, 45883,  4569,   649,   980,  1872,  1390,  3991,  9919])), torch.return_types.topk(
values=tensor([8.7695e-01, 1.8204e-02, 8.7833e-04, 1.1885e-04, 7.4983e-05, 7.0453e-05,
        5.7459e-05, 4.8995e-05, 3.5822e-05, 2.4199e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13,   30,   40,    5, 9182,   22])), torch.return_types.topk(
values=tensor([8.8770e-01, 9.3384e-03, 6.1083e-04, 6.6698e-05, 4.9949e-05, 3.9816e-05,
        3.3259e-05, 3.2723e-05, 3.2544e-05, 1.7643e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   13,   30,    5, 9182,   40,   22])), torch.return_types.topk(
values=tensor([8.9746e-01, 1.4842e-04, 4.7803e-05, 1.2934e-05, 9.9540e-06, 7.2122e-06,
        6.3777e-06, 5.1260e-06, 4.2319e-06, 3.7551e-06], dtype=torch.float16),
indices=tensor([   2,    6,    4,    7,    5, 9182,   13, 2207,   70,   22])), torch.return_types.topk(
values=tensor([0.3037, 0.0804, 0.0774, 0.0267, 0.0232, 0.0168, 0.0155, 0.0128, 0.0117,
        0.0066], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982, 41445,  1111,  9919, 47727,  3617, 30360])), torch.return_types.topk(
values=tensor([8.8330e-01, 1.3832e-02, 6.5231e-04, 8.7261e-05, 5.2094e-05, 5.0962e-05,
        3.9756e-05, 3.5942e-05, 3.3140e-05, 2.1040e-05], dtype=torch.float16),
indices=tensor([   2,    4,    6,    7,   30,   13,   40,    5, 9182,  806])), torch.return_types.topk(
values=tensor([0.6475, 0.0312, 0.0255, 0.0085, 0.0081, 0.0067, 0.0066, 0.0060, 0.0056,
        0.0053], dtype=torch.float16),
indices=tensor([60824,  3991,  9971, 38982,  9919, 41445,  6091,  3617, 30360,  1111])), torch.return_types.topk(
values=tensor([0.5381, 0.2996, 0.0333, 0.0151, 0.0070, 0.0055, 0.0041, 0.0027, 0.0021,
        0.0019], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  1013,  4569,  9919, 47727, 51174, 21058])), torch.return_types.topk(
values=tensor([0.4739, 0.4087, 0.0220, 0.0141, 0.0028, 0.0028, 0.0021, 0.0019, 0.0018,
        0.0018], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  9919,  1013, 60824,  4569, 51174, 21058])), torch.return_types.topk(
values=tensor([0.5566, 0.3325, 0.0182, 0.0127, 0.0028, 0.0022, 0.0019, 0.0017, 0.0016,
        0.0014], dtype=torch.float16),
indices=tensor([ 4300, 30360,   980,  3991,  9919, 60824,  1013,  4569, 51174, 21058])), torch.return_types.topk(
values=tensor([0.3091, 0.2158, 0.0684, 0.0306, 0.0246, 0.0201, 0.0114, 0.0111, 0.0087,
        0.0085], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,  1390,    80, 47727])), torch.return_types.topk(
values=tensor([0.3696, 0.2725, 0.0632, 0.0194, 0.0128, 0.0119, 0.0107, 0.0098, 0.0068,
        0.0062], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  4569,  2398,  3991,    80,  1390,  9919])), torch.return_types.topk(
values=tensor([0.4087, 0.2153, 0.0768, 0.0151, 0.0121, 0.0120, 0.0106, 0.0088, 0.0084,
        0.0052], dtype=torch.float16),
indices=tensor([  980, 30360,  4300, 38982,  3991,  4569,  2398,  9919,    80,  1390]))]

print word_list

[['जेजे ', 'न ', "' ", 'नानी ', 'नाति ', 'दादी ', 'माआ ', 'दिदि ', 'माउ ', 'पिताम '], ['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'पिताम ', "' ", 'द ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'भाइ ', 'खु ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', "' ", 'खु ', 'अ ', 'माङ्क ', 'ब ', 'कुनि ', 'बो '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'शा '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'जणे ', 'बड़ ', 'भ्र ', 'क '], ['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भ्र ', 'भा ', 'सान ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भग ', 'भाइ ', 'बो ', 'जणे '], ['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'नाति ', 'दिदि ', 'माआ ', 'आइ ', 'मात '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'बापा ', 'दादा ', 'खु '], ['माउ ', 'जेजे ', 'माम ', "' ", 'खु ', 'आ ', 'अ ', 'कुनि ', 'माङ्क ', 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'श ', 'भ ', 'शा '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भ्रातृ ', 'जणे ', 'सम्प ', 'भउणी ', 'क ', 'बड़ ', 'काक '], ['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भा ', 'भ्र ', 'सान ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'जणे ', 'भग ', 'भाइ ', 'न '], ['जेजे ', 'न ', 'नानी ', "' ", 'नाति ', 'दादी ', 'दिदि ', 'माउ ', 'आइ ', 'माआ '], ['जेजे ', 'पितामह ', 'दादा ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'खु ', 'चा ', 'बापा '], ['माउ ', 'जेजे ', 'माम ', 'खु ', "' ", 'अ ', 'आ ', 'कुनि ', 'झ ', 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'शा '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', "' ", 'सम्प ', 'जेजे ', 'भाइर ', 'भ्रातृ '], ['पुत ', 'भण ', 'भ ', "' ", 'भाइ ', 'पु ', 'भा ', 'सान ', 'भ्र ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'भग ', 'जणे ', 'न '], ['जेजे ', 'न ', "' ", 'नानी ', 'दादी ', 'नाति ', 'दिदि ', 'आइ ', 'माउ ', 'मात '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', "' ", 'बापा ', 'द ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चाचा ', 'खु ', 'बापा ', 'चा '], ['माउ ', 'जेजे ', 'माम ', "' ", 'खु ', 'कुनि ', 'अ ', 'आ ', 'भउणी ', 'माङ्क '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'श ', 'झ ', 'ज् ', 'शा ', 'भ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'जणे ', 'क ', 'भउणी ', 'भ्र ', 'बड़ '], ['पुत ', 'भण ', 'भ ', "' ", 'भाइ ', 'पु ', 'भ्र ', 'भा ', 'सान ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'जणे ', 'भग ', 'न '], ['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'नाति ', 'माआ ', 'दिदि ', 'माउ ', 'आइ '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'दादा ', 'काक ', 'माउ ', 'खु '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'खु ', 'अ ', 'माङ्क ', 'भउणी ', 'कुनि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'खु ', 'जेजे ', 'सम्प ', 'भाइर ', 'बड़ ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'झि '], ['जेजे ', "' ", 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'माआ ', 'दिदि ', 'आइ '], ['जेजे ', 'दादा ', 'पितामह ', "' ", 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'माउ ', 'चाचा ', 'भाइ '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'खु ', 'अ ', 'माङ्क ', 'कुनि ', 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'खु ', "' ", 'जेजे ', 'भाइर ', 'सम्प ', 'बड़ '], ['पुत ', 'भण ', 'भ ', "' ", 'भाइ ', 'पु ', 'भा ', 'सान ', 'भ्र ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'न ', 'भग ', 'बो '], ['जेजे ', "' ", 'न ', 'नानी ', 'दादी ', 'नाति ', 'माआ ', 'दिदि ', 'माउ ', 'मात '], ['जेजे ', 'पितामह ', 'दादा ', "' ", 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', '" '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'बापा ', 'खु ', 'चा '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'खु ', 'माङ्क ', 'अ ', 'कुनि ', 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'श ', 'ज् ', 'झ ', 'शा ', 'भ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', "' ", 'भउणी ', 'खु ', 'सम्प ', 'भाइर ', 'जेजे ', 'भ्रातृ '], ['पुत ', 'भण ', "' ", 'भ ', 'भाइ ', 'पु ', 'भा ', 'भ्र ', 'सान ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'न ', 'भग ', 'बो '], ['जेजे ', "' ", 'न ', 'नानी ', 'माआ ', 'दादी ', 'माउ ', 'नाति ', 'दिदि ', 'पिताम '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'काक ', 'चाचा ', 'भाइ ', 'माउ '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'अ ', 'कुनि ', 'खु ', 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', "' ", 'खु ', 'जेजे ', 'भाइर ', 'बड़ ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'सान ', 'भा ', 'भ्र ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'न ', 'बो ', 'भग '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माआ ', "' ", 'माउ ', 'दिदि ', 'दादा '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', "' ", 'चाचा ', 'बापा ', 'दादा ', 'भाइ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'अ ', 'खु ', 'माङ्क ', 'कुनि ', "' ", 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '᱾ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', 'जेजे ', 'भाइर ', 'सम्प ', 'बड़ ', 'क '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'भ्र ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'झि '], ['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'माआ ', 'नाति ', 'माउ ', 'दिदि ', 'द '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'माउ ', 'चा ', 'बापा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'कुनि ', 'खु ', 'माङ्क ', 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', 'I ', '۔ ', '᱾ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', 'जेजे ', "' ", 'भाइर ', 'सान ', 'बड़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भा ', 'सान ', 'भ्र ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', "' ", 'झ ', 'भा ', 'बो ', 'भाइ ', 'सान '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'दिदि ', "' ", 'माउ ', 'आइ ', 'नाति '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'नाति ', 'माआ ', 'माउ ', "' ", 'द '], ['जेजे ', 'न ', 'दादी ', "' ", 'नानी ', 'माउ ', 'दिदि ', 'आइ ', 'द ', 'माआ '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'ठाकु ', 'आइ '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'ठाकु ', 'दादा ', 'ब '], ['जेजे ', 'दादी ', 'न ', 'नानी ', 'नाति ', 'माउ ', 'पिताम ', 'दादा ', 'ठाकु ', 'दिदि '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', "' ", 'बापा ', 'पिताम ', 'दाद ', 'बड़ ', 'बापाङ्क '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चाचा ', 'बापा ', 'माउ ', 'खु '], ['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'जेजे ', 'चा ', 'चाचा ', 'माउ ', 'आ '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'बापा ', 'आ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'चाचा ', 'दादा ', 'माउ ', 'सम्पर्कीय़ ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'चा ', 'जेजे ', 'माउ ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माउ ', 'जेजे ', 'चाचा ', 'माङ्क ', 'चा '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'खु ', 'माङ्क ', "' ", 'ब ', 'कुनि ', 'अ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'कुनि ', 'खु ', 'ब ', 'अ ', 'झ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', "' ", 'खु ', 'अ ', 'कुनि ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'खु ', 'अ ', 'झ ', 'पि '], ['माउ ', 'माम ', 'आ ', 'जेजे ', 'माङ्क ', 'अ ', 'ब ', 'पि ', 'झ ', 'खु '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'सम्पर्कीय़ ', 'ब ', 'पि ', 'खु ', 'परिबार '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'भाइ ', 'सा ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सा ', 'शा '], ['</s> ', '| ', '/ ', '। ', '" ', '. ', '? ', '! ', 'Â ', 'â '], ['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'तिआरि ', 'पका ', 'खाउ ', 'रन् ', 'खा ', 'बना '], ['खा ', 'खाउ ', 'खाइ ', 'ख ', 'खाए ', 'खाइबाकु ', 'पिउ ', 'नेउछन्ति ', 'खेळु ', 'करुछन्ति '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'क ', 'भाइर ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'क ', 'भाइर ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'बड़ ', 'क ', 'भउणी ', 'भाइर ', "' "], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'खु ', 'बड़ ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'खु ', 'बड़ ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भ्रातृ ', 'क ', 'सम्प ', 'परिबार ', 'बड़ ', 'भउणी ', 'जेजे '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'सान ', 'भा ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्रातृ ', 'भ्र ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', "' ", 'भाइ ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', "' ", 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'भाइर ', 'बो '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['भ ', 'भण ', 'पुत ', 'भा ', 'सम्पर्कीय़ ', 'भउणी ', 'झ ', 'भाइ ', 'न ', 'ब '], ['जेजे ', 'नानी ', 'न ', 'दादी ', "' ", 'दिदि ', 'माआ ', 'माउ ', 'नाति ', 'आइ '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', "' ", 'नाति ', 'द ', 'माआ ', 'माउ '], ['जेजे ', "' ", 'न ', 'दादी ', 'नानी ', 'माउ ', 'दिदि ', 'द ', 'नाति ', 'आइ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'पितामह ', 'ठाकु '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'ठाकु ', 'दादा ', 'ब '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'पिताम ', 'माउ ', 'दादा ', 'दिदि ', 'ठाकु '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'नाति ', 'पितृ ', 'बापाङ्क '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'बापा ', 'चाचा ', 'खु ', 'माउ '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चा ', 'चाचा ', 'आ ', 'माउ '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'बापा ', 'आ ', '" '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'दादा ', 'माउ ', 'सम्पर्कीय़ ', 'बापा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'चा ', 'जेजे ', 'माउ ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'काक ', 'माउ ', 'जेजे ', 'चाचा ', 'माङ्क ', 'पितृ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'खु ', "' ", 'माङ्क ', 'ब ', 'अ ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'कुनि ', 'ब ', "' ", 'अ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'ब ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'खु ', 'पि ', 'अ ', 'झ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'पि ', 'खु ', 'झ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'परिबार ', 'माङ्क ', 'सम्पर्कीय़ ', 'खु ', 'पि ', 'ब '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'भाइ ', 'सा ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'सा ', 'शा '], ['</s> ', '। ', '- ', '. ', 'र ', 'आ ', 'ि ', 'ी ', 'भोजन ', 'ा '], ['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', "' "], ['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'खाउ ', 'तिआरि ', 'रन् ', 'प ', 'पर '], ['खा ', 'खाउ ', 'खाइ ', 'खाए ', 'पिउ ', 'ख ', 'खाइबाकु ', 'पि ', 'नेउछन्ति ', 'खेळु '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', "' "], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'भाइर ', 'क ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'बड़ ', 'भउणी ', "' ", 'क ', 'भाइर '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'सम्प ', 'क ', 'भ्रातृ ', 'भउणी ', 'खु ', 'सान ', 'बड़ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'सान ', 'खु ', 'बड़ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'परिबार ', 'बड़ ', 'भउणी ', 'बन्धु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सम्पर्कीय़ ', 'सान ', 'भाइर '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'भा ', 'सान ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'सान ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्रातृ ', 'नाति ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', "' ", 'भाइ ', 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'भाइर ', 'बो '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'सान ', 'न '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'बो ', 'ब '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'माआ ', "' ", 'माउ ', 'नाति ', 'द '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'नाति ', 'माउ ', 'माआ ', "' ", 'द '], ['जेजे ', 'न ', "' ", 'दादी ', 'माउ ', 'नानी ', 'दिदि ', 'द ', 'नाति ', 'माआ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'माआ ', 'ठाकु '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकु ', 'ब '], ['जेजे ', 'न ', 'माउ ', 'दादी ', 'नाति ', 'पिताम ', 'दादा ', 'दिदि ', 'द ', 'ब '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'बापा ', 'माउ ', 'खु '], ['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'जेजे ', 'चा ', 'चाचा ', 'आङ्क ', 'आ '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'आ ', 'माङ्क ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'चाचा ', 'दादा ', 'माउ ', 'माङ्क ', 'सम्पर्कीय़ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'चा ', 'माउ ', 'जेजे ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'काक ', 'माउ ', 'जेजे ', 'माङ्क ', 'चाचा ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', "' ", 'अ ', 'ब ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'खु ', 'कुनि ', 'ब ', 'झ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'माङ्क ', 'आ ', 'खु ', 'अ ', 'झ ', 'पि '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'झ ', 'पि ', 'खु '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'खु ', 'परिबार ', 'सम्पर्कीय़ ', 'ब '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सा ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'शा ', 'शाशु '], ['</s> ', '| ', '. ', '। ', '" ', '/ ', '! ', "' ", ' ', ': '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'श ', 'झ ', 'ज् ', 'भ ', 'शाशु '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', "' ", '( '], ['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'तिआरि ', 'खाउ ', 'रन् ', 'बना ', 'प '], ['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'झ ', 'भउणी ', 'श ', 'शा ', 'भ '], ['परिबेषण ', 'पर ', 'खाइ ', 'परिब ', 'प ', 'खाइबाकु ', 'पि ', 'प्रदान ', 'सेबा ', 'देइथिले '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'काका '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'क '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'क ', 'भाइर ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'सान ', 'खु ', 'बड़ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'सान ', 'बड़ ', 'खु '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'बड़ ', 'भउणी ', 'परिबार ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'सम्पर्कीय़ ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'सान ', 'नाति ', 'भा ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'नाति ', 'भ्र ', 'सान ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'सान ', 'भ्रातृ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', "' ", 'बो ', 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', "' ", 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', "' ", 'भाइ ', 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'सान ', 'न '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', 'सम्पर्कीय़ ', 'न ', 'ब '], ['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'माआ ', 'दिदि ', 'माउ ', 'नाति ', 'आइ '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'नाति ', "' ", 'माआ ', 'माउ ', 'द '], ['जेजे ', 'न ', "' ", 'दादी ', 'माउ ', 'नानी ', 'दिदि ', 'द ', 'नाति ', 'माआ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'माआ ', 'ठाकु '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकु ', 'ब '], ['जेजे ', 'न ', 'माउ ', 'दादी ', 'पिताम ', 'नाति ', 'दादा ', 'दिदि ', 'ब ', 'पितामह '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'बापा ', 'चाचा ', 'माउ ', 'खु '], ['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'जेजे ', 'चा ', 'चाचा ', 'आ ', 'आङ्क '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'आ ', 'बापा ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'दादा ', 'चाचा ', 'माउ ', 'माङ्क ', 'बापा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'चा ', 'जेजे ', 'माउ ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माउ ', 'जेजे ', 'माङ्क ', 'चाचा ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', "' ", 'माङ्क ', 'अ ', 'ब ', 'झ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब ', 'झ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'माङ्क ', 'खु ', 'झ ', 'अ ', 'पि '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'झ ', 'पि ', 'खु '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'सम्पर्कीय़ ', 'परिबार ', 'खु ', 'अ ', 'पि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'भाइ ', 'सा ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सा ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'भाइ ', 'शा ', 'बो ', 'शाशु '], ['</s> ', '। ', '- ', '. ', 'र ', 'ी ', 'ा ', 'आ ', 'ि ', 'भ '], ['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', '۔ '], ['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'तिआरि ', 'खाउ ', 'रन् ', 'पर ', 'बना '], ['खा ', 'खाउ ', 'खाइ ', 'ख ', 'खाए ', 'खाइबाकु ', 'पिउ ', 'खेळु ', 'नेउछन्ति ', 'पि '], ['परिबेषण ', 'पर ', 'खाइ ', 'परिब ', 'प ', 'सेबा ', 'खाइबाकु ', 'प्रदान ', 'पि ', 'ब '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', "' "], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'क ', 'भाइर ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'बड़ ', 'भउणी ', 'क ', "' ", 'भाइर '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'खु ', 'सान ', 'बड़ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'खु ', 'सान ', 'बड़ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'बड़ ', 'परिबार ', 'भउणी ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'पुअ ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सम्पर्कीय़ ', 'सान ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'भा ', 'सान ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्रातृ ', 'नाति ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', "' ", 'बो ', 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', "' ", 'भाइ ', 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', "' ", 'भाइ ', 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['भ ', 'भण ', 'पुत ', 'भा ', 'सम्पर्कीय़ ', 'झ ', 'भउणी ', 'भाइ ', 'न ', 'ब '], ['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'माउ ', 'माआ ', 'दिदि ', 'नाति ', 'द '], ['जेजे ', 'नानी ', 'न ', 'दादी ', "' ", 'दिदि ', 'नाति ', 'द ', 'माउ ', 'माआ '], ['जेजे ', "' ", 'न ', 'दादी ', 'माउ ', 'नानी ', 'द ', 'दिदि ', 'नाति ', 'आइ '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'पिताम ', 'माआ '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकु ', 'ब '], ['जेजे ', 'न ', 'दादी ', 'माउ ', 'पिताम ', 'नाति ', 'दादा ', 'दिदि ', 'पितामह ', 'द '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चाचा ', 'माउ ', 'बापा ', 'खु '], ['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'जेजे ', 'चा ', 'चाचा ', 'आङ्क ', 'आ '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'आ ', 'माङ्क ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'माउ ', 'दादा ', 'माङ्क ', 'सम्पर्कीय़ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चा ', 'चाचा ', 'माङ्क ', 'सम्पर्कीय़ ', 'आङ्क ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माउ ', 'चाचा ', 'माङ्क ', 'जेजे ', 'चा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'माङ्क ', "' ", 'अ ', 'ब ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब ', "' "], ['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'ब ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'खु ', 'अ ', 'पि ', 'झ '], ['माउ ', 'आ ', 'माम ', 'जेजे ', 'माङ्क ', 'अ ', 'ब ', 'पि ', 'खु ', 'झ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'ब ', 'पि ', 'सम्पर्कीय़ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'भाइ ', 'सा ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'सा ', 'शा '], ['</s> ', '" ', '. ', '। ', '- ', ', ', '( ', '| ', "' ", '! '], ['</s> ', '। ', ', ', '. ', '| ', 'मुँ ', 'I ', '- ', '! ', '_ '], ['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', 'I ', '( ', "' "], ['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'तिआरि ', 'खाउ ', 'रन् ', 'खा ', 'बना '], ['खा ', 'खाउ ', 'खाइ ', 'ख ', 'खाए ', 'पिउ ', 'खाइबाकु ', 'नेउछन्ति ', 'खेळु ', 'करुछन्ति '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', '۔ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'क ', 'काका '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'क ', 'सान ', 'भाइर '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'खु ', 'भउणी ', 'बड़ ', 'क ', "' ", 'भाइर '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'सान ', 'खु ', 'बड़ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'सान ', 'खु ', 'बड़ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'बड़ ', 'परिबार ', 'जेजे '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'भा ', 'पु ', "' ", 'सान ', 'नाति ', 'भाग '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'सान ', 'भा ', 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'भ्रातृ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', "' ", 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'बो ', 'भाइर '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भा ', 'भउणी ', 'बो ', 'न ', 'ब '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'बो ', 'ब '], ['जेजे ', 'नानी ', 'न ', 'दादी ', "' ", 'माउ ', 'माआ ', 'दिदि ', 'नाति ', 'आइ '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'माउ ', 'नाति ', 'माआ ', "' ", 'द '], ['जेजे ', "' ", 'न ', 'दादी ', 'माउ ', 'नानी ', 'दिदि ', 'द ', 'माआ ', 'नाति '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'माआ ', 'पिताम '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकु ', 'मात '], ['जेजे ', 'न ', 'दादी ', 'माउ ', 'पिताम ', 'नाति ', 'दादा ', 'दिदि ', 'पितामह ', 'ब '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'दाद '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'चाचा ', 'माउ ', 'दादा '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चाचा ', 'चा ', 'माउ ', 'आ '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'आ ', 'बापा ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'चाचा ', 'दादा ', 'माउ ', 'सम्पर्कीय़ ', 'बापा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चा ', 'चाचा ', 'माङ्क ', 'सम्पर्कीय़ ', 'जेजे ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माउ ', 'जेजे ', 'चाचा ', 'माङ्क ', 'चा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', "' ", 'अ ', 'ब ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'कुनि ', 'अ ', 'खु ', 'ब ', "' "], ['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'झ ', 'पि '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'पि ', 'झ ', 'खु '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'ब ', 'पि ', 'खु ', 'अ ', 'सम्पर्कीय़ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'शा ', 'भाइ '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'भाइ ', 'शा ', 'बो ', 'सा '], ['</s> ', '। ', '| ', '! ', '. ', '" ', ', ', '? ', 'I ', '- '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', '۔ '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', "' "], ['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'तिआरि ', 'रन् ', 'खाउ ', 'पर ', 'रान्ना '], ['खा ', 'खाउ ', 'खाइ ', 'खाए ', 'ख ', 'पिउ ', 'नेउछन्ति ', 'खेळु ', 'खाइबाकु ', 'करुछन्ति '], ['परिबेषण ', 'ङ्कु ', 'पर ', 'कु ', '्कु ', 'खाइ ', 'प ', 'परिब ', 'प्रदान ', '्र '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'काका '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'खु ', 'भउणी ', 'बड़ ', 'क ', 'सान ', 'भाइर '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'खु ', 'भउणी ', 'बड़ ', 'क ', "' ", 'भाइर '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'सान ', 'खु ', 'बड़ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'सान ', 'बड़ ', 'खु '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'सम्प ', 'बड़ ', 'भउणी ', 'परिबार ', 'जेजे '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'पुअ ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'सान ', 'भ्र ', 'भा ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'सान ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'सान ', 'भ्रातृ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'भाइ ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', "' ", 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'भाइ ', 'बो ', 'भाइर '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'सान ', 'न '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'बो ', 'न '], ['जेजे ', 'न ', 'नाति ', "' ", 'माउ ', 'दिदि ', 'द ', 'माम ', 'माआ ', 'नानी '], ['जेजे ', 'नाति ', 'न ', 'माउ ', 'दादा ', 'दिदि ', 'दादी ', 'पितामह ', 'नानी ', 'द '], ['जेजे ', 'न ', "' ", 'नाति ', 'माआ ', 'नानी ', 'माउ ', 'दिदि ', 'बड़ ', 'माम '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'ब ', 'द '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'पिता ', 'दाद ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'बापा ', 'भाइ ', 'माउ ', 'बो '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'काक ', 'चाचा ', 'बाप ', 'सम्पर्कीय़ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'दादा ', 'जेजे ', 'बाप ', 'माउ ', 'भाइ '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'खु ', 'अ ', 'माङ्क ', 'आ ', 'झ ', "' "], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'माङ्क ', 'झ ', 'खु ', 'आ ', 'अ ', 'काका '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'खु ', 'माङ्क ', 'बो ', 'भउणी '], ['माउ ', 'जेजे ', 'ब ', 'माम ', 'आ ', 'खु ', 'माङ्क ', 'पि ', 'अ ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'झ ', 'भाइ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'दे '], ['भा ', 'भि ', 'बो ', 'श् ', 'झ ', 'भउणी ', 'ज् ', 'श ', 'भ ', 'शाशु '], ['गाँरे ', 'ग्रामरे ', 'सेइ ', 'सेहि ', 'गाँ ', 'एइ ', 'एहि ', 'टि ', 'त ', 'उक्त '], ['भा ', 'भि ', 'बो ', 'श् ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'बो ', 'नाति ', 'भ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'भ्रातृ ', 'जेजे ', 'बड़ ', 'भण ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'बो ', 'भाइर ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'भउणी ', 'सम्प ', 'सान ', 'बड़ ', 'भण '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', 'पुअ ', 'बो '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'नाति ', 'सम्पर्कीय़ ', 'भ्र ', 'सान ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'भ्र ', 'जणे ', 'नाति ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'बो ', 'झ ', 'भाइ ', 'सान ', 'झि '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'नाति ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'जणे ', 'ब '], ['जेजे ', 'न ', 'नाति ', "' ", 'नानी ', 'माउ ', 'दिदि ', 'माम ', 'माआ ', 'द '], ['जेजे ', 'न ', 'नाति ', 'माउ ', 'दादी ', 'दिदि ', 'नानी ', 'दादा ', 'पिताम ', 'पितामह '], ['जेजे ', 'न ', "' ", 'नाति ', 'नानी ', 'माआ ', 'माउ ', 'दिदि ', 'दादी ', 'माम '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकुर ', 'ब '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'नाति ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'बापा ', 'भाइ ', 'माउ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'दादा ', 'चाचा ', 'सम्पर्कीय़ ', 'माउ ', 'बाप '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'दादा ', 'बापा ', 'माउ ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'पितृ ', 'माङ्क ', 'दादा ', 'जेजे ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'खु ', 'आ ', 'अ ', "' ", 'माङ्क ', 'बो ', 'झ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'झ ', 'खु ', 'काकी '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'खु ', 'माङ्क ', 'भउणी ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'अ ', 'माङ्क ', 'खु ', 'पि ', 'काकी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'शा '], ['भा ', 'भि ', 'बो ', 'श् ', 'ज् ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शाशु '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शाशु '], ['भा ', 'भि ', 'बो ', 'श् ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'सा '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'बो ', 'नाति ', 'भ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सान ', 'सम्प ', 'बड़ ', 'क ', 'जेजे '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'खु ', 'भाइर ', 'बो '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'क ', 'सान ', 'बड़ ', 'बन्धु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'नाति ', 'भ्र ', 'सम्पर्कीय़ ', 'भा ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भ्र ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'भाग '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'भाइ ', 'सान ', "' "], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'जणे ', 'सान '], ['जेजे ', 'न ', 'नाति ', "' ", 'माम ', 'माउ ', 'नानी ', 'द ', 'माआ ', 'दिदि '], ['जेजे ', 'न ', 'नाति ', 'माउ ', 'दादी ', 'दादा ', 'दिदि ', 'नानी ', 'पिताम ', 'पितामह '], ['जेजे ', 'न ', "' ", 'नाति ', 'माआ ', 'नानी ', 'माउ ', 'माम ', 'बड़ ', 'दिदि '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'मात ', 'दादा ', 'ठाकुर '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'नाति ', 'दाद ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'भाइ ', 'बापा ', 'माउ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'दादा ', 'चाचा ', 'सम्पर्कीय़ ', 'माउ ', 'बाप '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'भाइ ', 'बापा ', 'माउ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'माङ्क ', 'जेजे ', 'दादा ', 'चा ', 'पितृ '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'खु ', 'अ ', "' ", 'आ ', 'माङ्क ', 'झ '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'माङ्क ', 'झ ', 'खु ', 'आ ', 'अ ', 'काका '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'खु ', 'माङ्क ', 'भउणी ', 'बो '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'अ ', 'माङ्क ', 'खु ', 'पि ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भा ', 'भि ', 'बो ', 'श् ', 'भउणी ', 'ज् ', 'झ ', 'श ', 'भ ', 'शाशु '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शाशु '], ['भा ', 'भि ', 'बो ', 'श् ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'सा '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा '], ['भाइ ', 'सम्पर्कीय़ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'बो ', 'नाति ', 'भ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सान ', 'बड़ ', 'जेजे ', 'सम्प ', 'भण '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'भाइर ', 'बो ', 'खु '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'क ', 'सान ', 'बड़ ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'नाति ', 'भ्र ', 'सम्पर्कीय़ ', 'सान ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सान ', 'भा ', "' ", 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भ्र ', 'भा ', 'नाति ', 'सम्पर्कीय़ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'भाइ ', 'सान ', "' "], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'सान ', 'कन्य़ा '], ['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', "' ", 'माआ ', 'दादी ', 'माउ ', 'द '], ['जेजे ', 'न ', 'नाति ', 'दादी ', 'नानी ', 'दिदि ', 'माउ ', 'पिताम ', 'पितामह ', 'दादा '], ['जेजे ', 'न ', "' ", 'नानी ', 'माआ ', 'नाति ', 'दादी ', 'दिदि ', 'माउ ', 'दादा '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'ब ', 'पिताम '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'पितृ ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'पितृ ', 'बापाङ्क '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'दादा ', 'चाचा ', 'बापा ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'दादा ', 'चाचा ', 'सम्पर्कीय़ ', 'माउ ', 'बाप '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'दादा ', 'भाइ ', 'चाचा ', 'काक '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'माङ्क ', 'दादा ', 'सम्पर्कीय़ ', 'जेजे ', 'चा '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'खु ', 'आ ', 'अ ', "' ", 'कुनि ', 'झ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'अ ', 'ब ', 'झ ', 'खु ', 'काकी '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'अ ', 'खु ', 'भउणी ', 'कुनि '], ['माउ ', 'जेजे ', 'ब ', 'माम ', 'माङ्क ', 'आ ', 'खु ', 'अ ', 'झ ', 'पि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'सा ', 'दे '], ['</s> ', '" ', '. ', '। ', '- ', ', ', '( ', '| ', "' ", '! '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'सा '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'खु ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'सान ', 'भण ', 'बड़ ', 'क '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'भाइर ', 'खु ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'क ', 'बड़ ', 'सान ', 'बन्धु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', "' ", 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'ज् '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'भ्र ', 'सम्पर्कीय़ ', 'भाग ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', "' ", 'भाइ ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'सम्पर्कीय़ ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'झि ', 'भाइ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'ब ', 'जणे '], ['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'नाति ', 'दिदि ', 'माआ ', 'माउ ', 'द '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'पिताम ', 'मात ', 'माउ ', 'दिदि ', 'पितामह '], ['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'नाति ', 'माआ ', 'दिदि ', 'माउ ', 'ठाकु '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'दिदि ', 'माउ ', 'पिताम ', 'मात ', 'ठाकु '], ['जेजे ', 'पितामह ', 'दादा ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पितृ ', 'पिता ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', "' ", 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'दाद ', 'नाति ', 'पिता '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'आङ्क ', 'चा ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'चा ', 'सम्पर्कीय़ ', 'दादा ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'माउ ', 'चा ', 'बापा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'माङ्क ', 'चा ', 'सम्पर्कीय़ ', 'दादा ', 'पितृ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'कुनि ', 'अ ', "' ", 'माङ्क ', 'खु ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'अ ', 'आ ', 'ब ', 'काकी ', 'कुनि ', 'झ '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'कुनि ', 'माङ्क ', 'खु ', 'भउणी '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'ब ', 'माङ्क ', 'अ ', 'काकी ', 'खु ', 'पि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'श ', 'झ ', 'भ ', 'सा '], ['रे ', '्रे ', 'र ', 'रे ', 'टिरे ', 'कु ', 'मध्य़रे ', 'ेरे ', 'टि ', 'ठारे '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'श ', 'झ ', 'सा ', 'भ '], ['भा ', 'भि ', 'श् ', 'भउणी ', 'ज् ', 'बो ', 'झ ', 'श ', 'शा ', 'भ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'खु ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'क ', 'भ्र ', 'खु ', 'सान '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'खु ', 'जेजे ', 'सान ', 'भाइर ', 'बड़ ', "' "], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'भउणी ', 'सान ', 'बन्धु ', 'बड़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'भ्र ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'भ्र ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'भ्रातृ ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भा ', 'सान ', 'भ्र ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भ्र ', 'सम्पर्कीय़ ', 'नाति ', 'भाग ', 'भा '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'भाइ ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भा ', 'भउणी ', 'बो ', 'न ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', "' ", 'भा ', 'भाइ ', 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'कन्य़ा ', 'सान '], ['जेजे ', 'न ', 'नानी ', 'नाति ', 'दिदि ', 'दादी ', "' ", 'माउ ', 'माआ ', 'द '], ['जेजे ', 'न ', 'नानी ', 'नाति ', 'दादी ', 'मात ', 'माउ ', 'पिताम ', 'दिदि ', 'आइ '], ['जेजे ', 'न ', 'नानी ', "' ", 'नाति ', 'दादी ', 'दिदि ', 'माउ ', 'आइ ', 'माआ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'ब ', 'ठाकुर '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'नाति ', 'पिता ', 'पितृ '], ['जेजे ', 'पितामह ', 'दादा ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'बड़ ', 'दाद ', 'पिता ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'चाचा ', 'खु ', 'आङ्क ', 'बापा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'जेजे ', 'दादा ', 'चाचा ', 'माउ ', 'भाइ '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'चा ', 'खु ', 'दादा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'दादा ', 'जेजे ', 'बाप ', 'भाइ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'अ ', 'माङ्क ', "' ", 'कुनि ', 'झ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'खु ', 'ब ', 'झ ', 'काकी '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'खु ', 'अ ', 'माङ्क ', 'कुनि ', 'झ '], ['माउ ', 'जेजे ', 'ब ', 'माम ', 'खु ', 'आ ', 'माङ्क ', 'झ ', 'अ ', 'पि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शा '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'श ', 'भ ', 'शा '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'शा ', 'भ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'भउणी ', 'खु ', 'सान ', 'भण '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'सम्प ', 'बड़ ', 'भाइर ', 'सान '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'सम्प ', 'भउणी ', 'सान ', 'बड़ ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'ज् '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भ्र ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'भाग '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', "' ", 'बो ', 'भाइ ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', "' ", 'बो ', 'भाइ ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['जेजे ', 'न ', 'नानी ', 'नाति ', 'दिदि ', 'दादी ', "' ", 'माउ ', 'माआ ', 'आइ '], ['जेजे ', 'न ', 'नाति ', 'दादी ', 'नानी ', 'माउ ', 'पिताम ', 'पितामह ', 'दिदि ', 'मात '], ['जेजे ', 'न ', 'नानी ', 'नाति ', "' ", 'दादी ', 'दिदि ', 'माउ ', 'आइ ', 'माआ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'पितामह ', 'पिताम '], ['जेजे ', 'पितामह ', 'दादा ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'नाति ', 'पिता ', 'पितृ '], ['जेजे ', 'पितामह ', 'दादा ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'दाद ', 'नाति ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'चाचा ', 'दादा ', 'बापा ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'चाचा ', 'माउ ', 'भाइ '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'दादा ', 'बापा ', 'भाइ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'दादा ', 'सम्पर्कीय़ ', 'जेजे ', 'माउ ', 'बाप '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'माङ्क ', 'अ ', "' ", 'कुनि ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'माङ्क ', 'खु ', 'आ ', 'झ ', 'अ ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'खु ', 'अ ', 'माङ्क ', 'कुनि ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'खु ', 'आ ', 'माङ्क ', 'अ ', 'झ ', 'पि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भा ', 'भि ', 'बो ', 'श् ', 'ज् ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शा '], ['परे ', 'प्रे ', 'पर ', 'प् ', 'बरे ', 'प्र ', 'पुररे ', 'ापरे ', 'प ', 'परु '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'श ', 'भ ', 'शा '], ['पारादीप ', 'पार ', 'प्रदीप ', 'जणक ', 'माने ', 'पारा ', 'पार्ब ', ', ', 'टि ', 'आ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'भउणी ', 'भण ', 'खु ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', 'जेजे ', 'सम्प ', 'भाइर ', 'बड़ ', 'सान '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'सम्प ', 'भउणी ', 'सान ', 'बड़ ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'भ्रातृ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सम्पर्कीय़ ', 'सान ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'भ्र ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'बो ', 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'न ', 'भग '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'भाब '], ['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', 'माउ ', 'दादी ', "' ", 'माआ ', 'दादा '], ['जेजे ', 'न ', 'नाति ', 'दादी ', 'पिताम ', 'दादा ', 'पितामह ', 'माउ ', 'नानी ', 'दिदि '], ['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'दादी ', 'माउ ', 'दिदि ', 'माआ ', 'बड़ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'ठाकुर ', 'द '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'पिता ', 'दाद ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'बापा ', 'जेजे ', 'चाचा ', 'सम्पर्कीय़ ', 'बाप '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', "' ", 'माङ्क ', 'अ ', 'कुनि ', 'काका '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'खु ', 'काका ', 'ब ', 'सम्पर्कीय़ ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'खु ', 'माङ्क ', 'भउणी ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'खु ', 'माङ्क ', 'अ ', 'काकी ', 'काका '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'शा '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "], ['ररे ', 'र ', 'रर ', 'ररु ', 'रे ', 'रम ', 'रः ', 'रकु ', 'ालरे ', 'रन '], ['। ', '| ', '</s> ', '. ', ', ', '" ', 'I ', 'बोलि ', '! ', 'ि '], ['र ', 'रकु ', 'ररु ', 'र् ', 'ररे ', 'रर ', 'र्कु ', 'रक ', 'ार ', 'रम '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'भउणी ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'भ्रातृ ', 'बड़ ', 'सान ', 'जेजे ', 'भण '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'भ्रातृ ', 'क ', 'बड़ ', 'सान ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'सम्पर्कीय़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'सान ', 'नाति ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भाइ ', 'भउणी ', 'भा ', 'झ ', 'सम्पर्कीय़ ', 'बो ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', "' ", 'झ ', 'बो ', 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'माआ ', 'माउ ', 'दिदि ', 'बड़ ', 'दादा '], ['जेजे ', 'नाति ', 'न ', 'दादी ', 'दादा ', 'पिताम ', 'पितामह ', 'माउ ', 'दिदि ', 'नानी '], ['जेजे ', 'न ', 'नाति ', "' ", 'माआ ', 'नानी ', 'माउ ', 'बड़ ', 'दादा ', 'दिदि '], ['जेजे ', 'न ', 'दादी ', 'नाति ', 'नानी ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'ठाकुर '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'पिता ', 'नाति ', 'दाद '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'काक ', 'भाइ ', 'बापा ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'बड़ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'बाप ', 'चाचा ', 'बापा ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', "' ", 'खु ', 'आ ', 'अ ', 'बो ', 'माङ्क ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'ब ', 'खु ', 'भउणी ', 'अ ', 'बड़ ', 'काका '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'भउणी ', 'खु ', 'बो ', 'माङ्क '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'खु ', 'आ ', 'माङ्क ', 'अ ', 'झ ', 'काकी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'बो ', 'श ', 'भाइ ', 'शा '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', "' "], ['ओड़िशारे ', 'ओड़िशा ', 'ओड़िश ', 'ओड़ि ', 'ओड़िशार ', 'ओडिश ', 'ओडिशार ', 'ओडिशा ', 'दिल्लीरे ', 'ओड़िआ '], ['। ', '| ', '. ', '</s> ', ', ', '" ', 'I ', 'बोलि ', 'ि ', '! '], ['ओड़िशा ', 'ओडिशा ', 'ओड़िश ', 'उड़ि ', 'ओड़ि ', 'माने ', 'ओड़िशार ', 'पुणि ', 'ओडिसा ', 'चाल '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'खु ', 'भाइर ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'सान ', 'बड़ ', 'जेजे ', 'क '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'खु ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'भ्रातृ ', 'बड़ ', 'सान ', 'पुत ', 'भण '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'नाति ', 'सान ', 'भ्र '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'नाति ', 'सान ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भउणी ', 'भा ', 'बो ', 'नाति ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', "' ", 'भा ', 'बो ', 'झ ', 'भाइ ', 'झि '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', 'बो ', 'न ', 'सान '], ['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', 'माआ ', 'दादी ', "' ", 'माउ ', 'दादा '], ['जेजे ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'पितामह ', 'नानी ', 'दादा ', 'दिदि ', 'माउ '], ['जेजे ', 'न ', 'नाति ', 'माआ ', 'नानी ', "' ", 'दादी ', 'दिदि ', 'दादा ', 'माउ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'पितामह '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'द ', 'पितृ ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'बापा ', 'भाइ ', 'काक ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'चाचा ', 'भाइ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'चाचा ', 'काक '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'चाचा ', 'बापा ', 'सम्पर्कीय़ ', 'बाप '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'भउणी ', "' ", 'काका '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'अ ', 'ब ', 'भउणी ', 'खु ', 'काकी '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'माङ्क ', 'अ ', 'भउणी ', 'खु ', 'बो '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'काकी ', 'झ '], ['भि ', 'भा ', 'श् ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'सा ', 'भाइर '], ['भि ', 'भा ', 'श् ', 'ज् ', 'भ ', 'बो ', 'सा ', 'श ', 'भाइ ', 'भाइर '], ['भि ', 'भा ', 'श् ', 'ज् ', 'भ ', 'सा ', 'भाइ ', 'श ', 'बो ', 'भाइर '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'भ ', 'श ', 'सा '], ['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'भ ', 'श ', 'सा '], ['भा ', 'भि ', 'श् ', 'ज् ', 'भउणी ', 'बो ', 'झ ', 'श ', 'भ ', 'शा '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'खु ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'बड़ ', 'सान ', 'भण ', 'जेजे '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'खु ', 'बो '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'क ', 'सान ', 'भण ', 'बड़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'भा ', 'पु ', 'नाति ', 'सान ', "' ", 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'भ्र ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'भा ', 'ज् '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', 'भाइ ', "' ", 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', 'बो ', 'नाति ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'न ', 'भग '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'झिअ '], ['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', 'दादी ', 'माउ ', "' ", 'द ', 'माआ '], ['जेजे ', 'न ', 'नाति ', 'नानी ', 'दादी ', 'पिताम ', 'माउ ', 'दादा ', 'मात ', 'पितामह '], ['जेजे ', 'न ', 'नानी ', 'नाति ', "' ", 'दादी ', 'दिदि ', 'माउ ', 'माआ ', 'दादा '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'ठाकुर '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'पिता ', 'बापाङ्क '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'सम्पर्कीय़ ', 'दादा ', 'बापा ', 'चाचा ', 'भाइ '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'बापा ', 'चाचा ', 'सम्पर्कीय़ ', 'बाप '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'माङ्क ', 'अ ', "' ", 'कुनि ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'खु ', 'ब ', 'काकी ', 'झ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'खु ', 'माङ्क ', 'भउणी ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'खु ', 'माङ्क ', 'अ ', 'काकी ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'सा ', 'श ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शा '], ['रे ', '्रे ', 'रे ', 'र ', 'ठारे ', 'ठारे ', '्र ', '् ', 'अछन्ति ', 'ेरे '], ['</s> ', '। ', '. ', '" ', '| ', '- ', ', ', 'I ', '۔ ', '᱾ '], ['ाबाद ', 'ाबाद् ', 'बाद ', 'ाब ', 'ाबादे ', 'ाबादी ', 'ावाद ', 'बाद् ', 'ꯕꯥ ', 'آباد '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'भउणी ', 'खु ', 'बड़ ', 'सान ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'क ', 'सान ', 'जेजे ', 'खु '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'सान ', 'भाइर ', 'सम्प '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'खु ', 'सान ', 'बड़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'भ्र ', 'पु ', 'नाति ', 'भा ', 'ज् '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'सम्पर्कीय़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', "' ", 'भाइ ', 'न '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'बो ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['जेजे ', 'न ', 'नाति ', 'नानी ', 'दादी ', 'दिदि ', "' ", 'माउ ', 'माआ ', 'दादा '], ['जेजे ', 'न ', 'नाति ', 'दादी ', 'पिताम ', 'पितामह ', 'दादा ', 'नानी ', 'माउ ', 'दिदि '], ['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'दादी ', 'दिदि ', 'माआ ', 'माउ ', 'दादा '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'पितामह ', 'ठाकुर '], ['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'बड़ ', 'द ', 'पिता ', 'नाति ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'दाद ', 'बापाङ्क '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'काक ', 'बापा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'बापा ', 'सम्पर्कीय़ ', 'चाचा ', 'बाप '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'माङ्क ', "' ", 'अ ', 'काका ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'अ ', 'खु ', 'ब ', 'काकी ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'खु ', 'माङ्क ', 'अ ', 'भउणी ', 'काका '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'काकी ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'सा ', 'बो ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'सा ', 'श ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'भाइ ', 'बो ', 'शा '], ['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'भउणी ', 'झ ', 'भ ', 'श ', 'शा '], ['रे ', '्रे ', 'रे ', 'ठारे ', 'अछन्ति ', '्र ', 'ठारे ', 'रु ', 'ारे ', 'िरे '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'भ ', 'श ', 'शा '], ['गुजराट ', 'गुजुर ', 'गुजरा ', 'गुज ', 'गुजरात ', 'गुजरात् ', ', ', 'गुजर ', 'गोआ ', 'माने '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'सान ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'क ', 'सान ', 'जेजे ', 'बड़ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'भाइर ', 'सान ', 'सम्प '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'भउणी ', 'बड़ ', 'सान ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', 'सम्पर्कीय़ ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'भ्र ', 'ज् ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'नाति ', 'सम्पर्कीय़ ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', 'भाइ ', "' ", 'न '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'न '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['जेजे ', 'न ', 'नाति ', "' ", 'माआ ', 'नानी ', 'माउ ', 'दिदि ', 'दादा ', 'बड़ '], ['जेजे ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'पितामह ', 'नानी ', 'दादा ', 'माउ ', 'दिदि '], ['जेजे ', "' ", 'न ', 'माआ ', 'नाति ', 'नानी ', 'माउ ', 'बड़ ', 'दादा ', 'दादी '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'पिताम ', 'द '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'द ', 'बड़ ', 'पितृ ', 'नाति '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'पिता ', 'नाति ', 'दाद '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'काक ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'काक ', 'सम्पर्कीय़ ', 'बापा ', 'चाचा ', 'भाइ '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'भाइ ', 'दादा ', 'काक ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'दादा ', 'जेजे ', 'बापा ', 'बाप ', 'भाइ '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'खु ', 'काका ', 'भउणी ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'ब ', 'आ ', 'भउणी ', 'खु ', 'काका ', 'अ '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'भउणी ', 'अ ', 'काका ', 'खु '], ['माउ ', 'जेजे ', 'ब ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'काकी ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सा ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'भाइर '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', "' ", '۔ '], ['ारे ', 'रे ', 'ाकु ', 'ास्थित ', 'ारु ', 'ाते ', 'िआरे ', 'ाय़ ', 'ीय़ ', 'िरे '], ['</s> ', '। ', '. ', '" ', '| ', '- ', ', ', 'I ', '۔ ', '᱾ '], ['भा ', 'भि ', 'श् ', 'ज् ', 'भउणी ', 'बो ', 'झ ', 'श ', 'शा ', 'भ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'नाति ', 'खु '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'सान ', 'क ', 'बड़ ', 'भण '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'बड़ ', 'सान ', 'नाति ', 'जेजे ', 'भ्रातृ ', 'भाइर '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'भउणी ', 'सम्प ', 'बड़ ', 'सान ', 'भण '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'भ्र ', 'नाति ', 'सम्पर्कीय़ ', 'पु ', 'ज् ', 'सान '], ['पुत ', 'भण ', 'भाइ ', 'भ ', "' ", 'पु ', 'सान ', 'नाति ', 'भा ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'भ्र ', 'नाति ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भउणी ', 'भा ', 'बो ', 'नाति ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', "' ", 'भा ', 'झ ', 'भाइ ', 'बो ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['जेजे ', 'माआ ', 'न ', 'नाति ', "' ", 'नानी ', 'दादा ', 'माम ', 'माउ ', 'बड़ '], ['जेजे ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'दादा ', 'नानी ', 'पितामह ', 'माउ ', 'माआ '], ['जेजे ', 'माआ ', "' ", 'न ', 'नाति ', 'दादा ', 'बड़ ', 'नानी ', 'माउ ', 'माम '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'पिताम ', 'पितामह '], ['जेजे ', 'बापा ', 'दादा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'बाप '], ['जेजे ', 'बापा ', 'दादा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'चाचा ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'काक ', 'बापा ', 'चाचा ', 'सम्पर्कीय़ ', 'भाइ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'चाचा ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'दादा ', 'जेजे ', 'बापा ', 'भाइ ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', "' ", 'भउणी ', 'बो ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'अ ', 'काकी ', 'भउणी ', 'ब ', 'काका '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'काका ', 'भउणी ', 'अ ', 'बो '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'अ ', 'खु ', 'काकी ', 'पि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'भाइ ', 'भाइर ', 'श ', 'सा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'बो ', 'भाइ ', 'श ', 'भाइर ', 'सा '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'भाइ ', 'भाइर ', 'सा ', 'श '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'भाइ ', 'बो ', 'सा ', 'श ', 'भाब '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', "' ", '۔ '], ['रे ', '्रे ', 'रे ', 'ठारे ', 'कु ', '्र ', 'मसिहारे ', 'ेरे ', 'ठारे ', 'अछन्ति '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "], ['य़ुरोप ', 'य़ुरो ', 'इउरोप ', ', ', 'य़ ', 'युरोप ', 'इउरो ', '- ', 'मध्य़ ', 'आ '], ['भाइ ', 'सम्पर्कीय़ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'बो ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'बड़ ', 'सान ', 'जेजे ', 'क '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'बड़ ', 'जेजे ', 'सान ', 'नाति ', 'भाइर ', 'भ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'क ', 'भ्रातृ ', 'सम्प ', 'बड़ ', 'सान ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सान ', 'भा ', 'नाति ', "' ", 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'भ्र ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'सान ', 'ज् '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'सान ', "' ", 'भा ', 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'भ्र ', 'नाति ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'बो ', 'झ ', "' ", 'सान '], ['भ ', 'भण ', 'पुत ', 'भाइ ', 'भउणी ', 'झ ', 'भा ', 'बो ', 'न ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'झ ', 'भा ', 'बो ', 'न ', 'बड़ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['जेजे ', 'न ', 'नाति ', 'नानी ', 'द ', 'माआ ', 'बड़ ', 'दादा ', 'माउ ', "' "], ['जेजे ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'दादा ', 'नानी ', 'पितामह ', 'माउ ', 'द '], ['जेजे ', 'न ', 'नाति ', 'माआ ', "' ", 'नानी ', 'बड़ ', 'द ', 'दादा ', 'माउ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'द ', 'माउ ', 'दादा ', 'पिताम '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'बड़ ', 'द ', 'पिता ', 'नाति ', 'पितृ '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'बड़ ', 'दाद ', 'नाति ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'माउ ', 'काक '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'काक ', 'सम्पर्कीय़ ', 'चाचा ', 'भाइ ', 'बापा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'भाइ ', 'बापा ', 'दादा ', 'माउ ', 'बड़ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'बापा ', 'माउ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'भउणी ', 'खु ', 'काका ', 'बो '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'काकी ', 'ब ', 'भउणी ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'भउणी ', "' ", 'अ ', 'माङ्क ', 'बो ', 'काका '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'अ ', 'खु ', 'काकी ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'सा ', 'बो ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'सा ', 'भ ', 'श ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'सा ', 'श ', 'भाइ ', 'बो ', 'शा '], ['</s> ', '। ', '. ', '" ', '- ', ', ', '| ', "' ", 'I ', '( '], ['आमेरिकारे ', 'आमेरिक ', 'आमेरिका ', 'आमेरिकीय़ ', 'आमेरिकार ', '- ', 'रे ', 'य़ुरोप ', 'आफ्रिक ', 'युक्तराष्ट्र '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "], ['आमेरिका ', 'आमेरिक ', 'आमेरिकीय़ ', '- ', 'आमेरिकारे ', 'आ ', 'अमेरिका ', 'आमेरिकार ', 'आफ्रिका ', 'युक्तराष्ट्र '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'नाति ', 'खु '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'क ', 'सम्प ', 'बड़ ', 'सान ', 'जेजे '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'नाति ', 'बो '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'बड़ ', 'खु ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'नाति ', 'भ्र ', 'पु ', 'ज् ', 'सान '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'सान ', 'नाति ', 'भा ', "' ", 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सान ', "' "], ['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भउणी ', 'भा ', 'न ', 'बो ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'बो ', "' ", 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'बो ', 'ब '], ['जेजे ', 'न ', 'नाति ', 'माआ ', "' ", 'नानी ', 'माउ ', 'दादा ', 'बड़ ', 'माम '], ['जेजे ', 'न ', 'नाति ', 'दादा ', 'पिताम ', 'दादी ', 'माउ ', 'पितामह ', 'नानी ', 'बड़ '], ['जेजे ', 'न ', "' ", 'नाति ', 'माआ ', 'दादा ', 'माउ ', 'बड़ ', 'नानी ', 'दादी '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'पितामह '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'काक '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'बड़ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'चाचा ', 'जेजे ', 'बापा ', 'माउ ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', "' ", 'अ ', 'काका ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'ब ', 'खु ', 'काका ', 'अ ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'अ ', 'भउणी ', 'खु ', 'काका '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'खु ', 'अ ', 'काकी ', 'पि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर '], ['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'बो ', 'भाइ ', 'श ', 'सा ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'भाइ ', 'सा ', 'श ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'श ', 'भाइर '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "], ['रे ', 'रे ', 'अछन्ति ', '्रे ', 'ठारे ', 'ठारे ', 'रहिछन्ति ', 'ते ', 'मसिहारे ', 'रु '], ['</s> ', '। ', '. ', '" ', '| ', '- ', ', ', 'I ', '۔ ', '᱾ '], ['अष्ट्रेलिआ ', 'अष्ट्रेल ', 'अष्ट्र ', 'अस्ट्रेलिय़ा ', 'अस्ट्रेलिया ', 'आ ', 'आस्ट्रेलिया ', 'जणक ', '- ', 'ऑस्ट्रेलिया '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'खु ', 'भाइर ', 'बो '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सान ', 'बड़ ', 'सम्प ', 'क ', 'जेजे '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'खु ', 'बो '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'बड़ ', 'क ', 'भ्रातृ ', 'सान ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', "' ", 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'नाति ', 'भ्र ', 'सम्पर्कीय़ ', 'पु ', 'ज् ', 'सान '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', "' ", 'नाति ', 'सान ', 'भा ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'भ्र ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'भाइ ', "' ", 'सान '], ['भ ', 'भण ', 'पुत ', 'भाइ ', 'झ ', 'भउणी ', 'भा ', 'बो ', 'न ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', "' ", 'बो ', 'भाइ ', 'झ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', "' ", 'माउ ', 'दादी ', 'द ', 'माआ '], ['जेजे ', 'न ', 'नाति ', 'दादी ', 'दादा ', 'पिताम ', 'माउ ', 'नानी ', 'पितामह ', 'दिदि '], ['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'दादी ', 'माउ ', 'दिदि ', 'माआ ', 'द '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'ठाकुर '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'काक ', 'दादा ', 'माउ ', 'भाइ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'काक ', 'बापा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'काक ', 'दादा ', 'माउ ', 'भाइ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'सम्पर्कीय़ ', 'जेजे ', 'बापा ', 'चाचा ', 'बाप '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', "' ", 'माङ्क ', 'अ ', 'बो ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'ब ', 'अ ', 'काका ', 'खु ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'माङ्क ', 'खु ', 'भउणी ', 'बो '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'अ ', 'खु ', 'काकी ', 'काका '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'सा ', 'श ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'शा '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "], ['रे ', 'रे ', 'र ', '्रे ', 'ठारे ', 'ठारे ', 'अछन्ति ', 'स्थित ', 'मसिहारे ', 'ते '], ['</s> ', '। ', '. ', '" ', '| ', '- ', ', ', 'I ', '۔ ', '᱾ '], ['बेङ्गालुरु ', 'बाङ्ग ', 'बेङ्ग ', 'बे ', 'बेङ्गल ', 'जणक ', 'टि ', 'बेंग ', 'बे ', ', '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'बो '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'क ', 'सम्प ', 'सान ', 'बड़ ', 'जेजे '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'बो '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'क ', 'बड़ ', 'भ्रातृ ', 'खु ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', "' ", 'भ्र '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'सम्पर्कीय़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', 'भाइ ', "' ", 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'दिदि ', 'माउ ', 'माआ ', 'दादी ', 'द '], ['जेजे ', 'न ', 'नाति ', 'दादी ', 'दादा ', 'पिताम ', 'माउ ', 'नानी ', 'पितामह ', 'दिदि '], ['जेजे ', 'न ', "' ", 'नाति ', 'नानी ', 'दादी ', 'दिदि ', 'माआ ', 'माउ ', 'बड़ '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'ठाकुर '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'नाति ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'दादा ', 'सम्पर्कीय़ ', 'चाचा ', 'बापा ', 'भाइ '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'चाचा ', 'जेजे ', 'बापा ', 'बाप ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', "' ", 'अ ', 'माङ्क ', 'काका ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'ब ', 'अ ', 'काका ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'खु ', 'माङ्क ', 'काका ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'खु ', 'माङ्क ', 'अ ', 'पि ', 'झ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'शा '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', "' ", '۔ '], ['ारे ', 'रे ', 'ाकु ', 'ार ', 'ाय़ ', 'ारु ', 'ास्थित ', 'ामे ', 'िरे ', 'ाले '], ['</s> ', '। ', '. ', '" ', '- ', '| ', ', ', 'I ', '۔ ', '᱾ '], ['कोलकाता ', 'कोलकात ', 'कलिकता ', 'कोलक ', 'कलकाता ', 'कोल्क ', 'जणक ', 'कलकत्ता ', ', ', 'कलिक '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'काका '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'क ', 'सम्प ', 'सान ', 'बड़ ', 'जेजे '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', "' "], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'बड़ ', 'सान ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'नाति ', 'सान ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भ्र ', 'नाति ', 'भा ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'सम्पर्कीय़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', "' ", 'झ ', 'बो ', 'भाइ ', 'झि '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब '], ['जेजे ', 'नानी ', 'न ', "' ", 'माआ ', 'नाति ', 'दिदि ', 'माउ ', 'दादी ', 'द '], ['जेजे ', 'स् ', 'पिताम ', 'माआ ', 'दादी ', 'द ', 'नानी ', 'मा ', 'अ ', 'मात '], ['जेजे ', 'न ', 'माआ ', 'द ', 'नानी ', "' ", 'दिदि ', 'माम ', 'नाति ', 'माउ '], ['जेजे ', 'न ', 'दादी ', 'नाति ', 'दादा ', 'द ', 'दिदि ', 'माउ ', 'नानी ', 'माआ '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'माआ ', 'दिदि ', 'दादा ', 'आइ ', 'माउ ', 'द '], ['जेजे ', 'पाइँ ', 'दादी ', 'दादा ', 'न ', 'नाति ', 'माआ ', 'दिदि ', 'पिताम ', 'नानी '], ['जेजे ', 'नानी ', 'दादी ', 'न ', 'दिदि ', 'नाति ', 'आइ ', 'दादा ', 'द ', 'माउ '], ['जेजे ', 'दादा ', 'द ', 'बापा ', 'पितामह ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'स् ', 'पिताम ', 'दादा ', 'बापा ', 'पितामह ', 'पिता ', 'द ', 'बापाङ्क ', 'बड़ '], ['जेजे ', 'दादा ', 'बापा ', 'द ', 'पितामह ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'द ', 'बापा ', 'पितामह ', 'बापाङ्क ', 'पिताम ', 'दाद ', 'बड़ ', "' "], ['जेजे ', 'पाइँ ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'दाद ', 'बड़ ', 'ठाकुर ', 'पिता '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'चा ', 'माउ ', 'दादा '], ['माम ', 'स् ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'श् ', 'जेजे ', 'बाप ', 'पिता ', 'बापा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'चाचा ', 'बाप '], ['माम ', 'काका ', 'मामा ', 'काक ', 'माङ्क ', 'माउ ', 'जेजे ', "' ", 'चाचा ', 'चा '], ['माम ', 'काका ', 'पाइँ ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'बापा ', 'बाप ', 'दादा ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'चा ', 'आङ्क ', 'जेजे ', 'दादा ', 'माउ '], ['माउ ', 'जेजे ', 'माम ', 'अ ', "' ", 'माङ्क ', 'आ ', 'बो ', 'कुनि ', 'झ '], ['माउ ', 'जेजे ', 'अ ', 'स् ', 'माम ', 'आ ', 'माङ्क ', 'ब ', 'सम्पर्कीय़ ', 'माआ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'ब ', 'बो ', 'माङ्क ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'अ ', 'माङ्क ', 'काका ', 'खु ', 'बो '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'मा ', 'पि ', 'खु ', "' ", 'कुनि '], ['माउ ', 'पाइँ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', 'ब ', 'मा ', 'बाप '], ['माउ ', 'आ ', 'जेजे ', 'माम ', 'अ ', 'माङ्क ', 'आन् ', 'ब ', 'खु ', 'मह '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'स् ', 'सा ', 'शा ', 'भ ', 'भाइ ', 'श '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'सा ', 'भ ', 'श ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'सा ', 'श ', 'भाइ ', 'शा '], ['भि ', 'ज् ', 'श् ', 'सा ', 'भा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'शाशु '], ['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'भाब '], ['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'श ', 'झ ', 'भ ', 'शाशु '], ['समस्य़ा ', 'एक ', 'असुबिधा ', 'किछि ', 'कौणसि ', 'समस्य़ ', 'प्रश्न ', 'समस्या ', 'गोटिए ', 'सेमानङ्क '], ['। ', 'ब ', '. ', 'ि ', '</s> ', 'द ', '| ', 'ँ ', 'छि ', 'ए '], ['पाखकु ', 'निकटकु ', 'पाखरे ', 'निकटरे ', 'घरकु ', 'आड़कु ', 'सह ', 'निकटरु ', 'पाख ', 'साङ्गरे '], ['</s> ', '. ', '। ', '" ', "' ", 'मुँ ', '- ', 'मो ', '! ', 'I '], ['िबाकु ', 'िबारे ', 'िबार ', 'िकि ', 'ाइबाकु ', 'िबे ', 'िले ', 'िय ', 'िला ', 'िबारु '], ['</s> ', '। ', '" ', '. ', '| ', "' ", '- ', ', ', 'I ', '۔ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'बो ', 'भाइर ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'स् ', 'माम ', 'भाइर ', 'जेजे ', 'क ', 'भ्रातृ ', 'सान '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'बड़ ', 'भउणी ', 'सान ', 'भाइर ', 'खु ', 'बो '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'बड़ ', 'भउणी ', 'सान ', 'जेजे ', 'सम्प ', 'भ्रातृ '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'क ', 'खु ', 'सान ', 'भाइर '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'पाइँ ', 'बड़ ', 'जेजे ', 'सान ', 'क ', 'सम्प ', 'भउणी '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'क ', 'सम्प ', 'खु ', 'जेजे ', 'सान ', 'भ्रातृ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'पुअ '], ['पुत ', 'भण ', 'भ ', 'स् ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भ्र ', 'ज् ', 'भाग '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', 'पुअ ', "' "], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'सान ', 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', 'पुअ ', 'सम्पर्कीय़ '], ['पुत ', 'भण ', 'पाइँ ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'पुअ ', 'नाति ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'सान ', "' ", 'भाइ '], ['भ ', 'भण ', 'पुत ', 'भाइ ', 'भा ', 'स् ', 'भउणी ', 'सम्पर्कीय़ ', 'झ ', 'भाब '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', 'भाइ ', 'झि ', "' "], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'ब ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', 'भाइ ', 'न ', 'ब '], ['भ ', 'भण ', 'पाइँ ', 'पुत ', 'भाइ ', 'झ ', 'भउणी ', 'बो ', 'सम्पर्कीय़ ', 'भा '], ['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'भाइ ', 'झ ', 'बो ', 'भाब ', 'न '], ['जेजे ', 'न ', 'नाति ', 'दादी ', 'दिदि ', 'माआ ', 'नानी ', 'माउ ', "' ", 'दादा '], ['जेजे ', 'माआ ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'माउ ', 'दादा ', 'दिदि ', 'पितामह '], ['जेजे ', 'पिताम ', 'नाति ', 'माआ ', 'न ', 'दादा ', 'पितामह ', 'दादी ', 'माउ ', 'बापा '], ['जेजे ', 'माआ ', 'पिताम ', 'न ', 'नाति ', 'दादी ', 'माउ ', 'दादा ', 'पितामह ', 'नानी '], ['जेजे ', 'नाति ', 'माआ ', 'पिताम ', 'दादा ', 'न ', 'माउ ', 'दादी ', 'पितामह ', 'बापा '], ['जेजे ', 'माआ ', 'नाति ', 'पिताम ', 'न ', 'दादी ', 'दादा ', 'माउ ', 'पितामह ', 'नानी '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', '" '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बापाङ्क ', 'बड़ ', 'नाति ', 'द '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'द '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'द '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'द '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'बापा ', 'काक ', 'भाइ ', 'बाप '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'बापा ', 'दादा ', 'भाइ ', 'सम्पर्कीय़ ', 'बाप ', 'माउ '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'सम्पर्कीय़ ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'काक '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'बापा ', 'भाइ ', 'दादा ', 'सम्पर्कीय़ ', 'बाप ', 'माउ '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'सम्पर्कीय़ ', 'बापा ', 'भाइ ', 'दादा ', 'माउ ', 'बाप '], ['माउ ', 'जेजे ', 'माम ', 'काका ', 'बो ', 'भउणी ', 'माङ्क ', "' ", 'आ ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'काका ', 'सम्पर्कीय़ ', 'भउणी ', 'माङ्क ', 'बो ', 'अ ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'काका ', 'भउणी ', 'माङ्क ', 'बापा ', 'अ ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'भउणी ', 'बो ', 'माङ्क ', 'काका ', 'अ ', 'माआ ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'काका ', 'भउणी ', 'माङ्क ', 'अ ', 'बापा ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'भउणी ', 'माङ्क ', 'अ ', 'काका ', 'माआ ', 'सम्पर्कीय़ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'सा ', 'श ', 'भाइ ', 'शा '], ['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'सा ', 'श ', 'भाइ ', 'बो ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सान '], ['</s> ', '। ', '" ', '. ', ', ', '- ', '| ', "' ", 'I ', '( '], ['जणे ', 'सदस्य़ ', 'सदस्या ', 'सांसद ', 'कर्मी ', 'सद ', 'महिळा ', 'सभ्य़ ', 'बिधाय़क ', '। '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( '], ['</s> ', '। ', '| ', '" ', '. ', '- ', 'से ', '_ ', 'I ', "' "], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'जेजे ', 'भउणी ', 'बड़ ', 'सान ', 'पुत ', 'काका ', 'खु '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'सम्प ', 'जणे ', 'सान ', 'जेजे ', 'माम ', 'बड़ ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'जेजे ', 'माम ', 'सान ', 'भउणी ', 'बड़ ', 'सम्प ', 'पुत ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'जेजे ', 'माम ', 'सान ', 'बड़ ', 'सम्प ', 'पुत ', 'साबत '], ['सम्पर्कीय़ ', 'भाइ ', 'जेजे ', 'सान ', 'माम ', 'भउणी ', 'बड़ ', 'सम्प ', 'पुत ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'जेजे ', 'माम ', 'सान ', 'बड़ ', 'सम्प ', 'साबत ', 'नाति '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'भा ', 'नाति ', 'सम्पर्कीय़ ', 'पुअ ', 'सान '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'जणे ', 'पु ', 'नाति ', 'सान ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'सान ', 'पुअ ', 'भा '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'सान ', 'पुअ ', 'भा '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'सान ', 'नाति ', 'पु ', 'पुअ ', 'ज् '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पु ', 'पुअ ', 'भा '], ['भ ', 'पुत ', 'भण ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'भाइ ', 'झिअ ', 'सान '], ['भ ', 'जणे ', 'पुत ', 'भण ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ '], ['भ ', 'पुत ', 'भण ', 'भउणी ', 'बो ', 'भा ', 'भाइ ', 'सान ', 'सम्पर्कीय़ ', 'नाति '], ['भ ', 'पुत ', 'भण ', 'भउणी ', 'भा ', 'बो ', 'भाइ ', 'सान ', 'झ ', 'झिअ '], ['भ ', 'पुत ', 'भण ', 'भउणी ', 'बो ', 'भाइ ', 'भा ', 'सान ', 'नाति ', 'सम्पर्कीय़ '], ['भ ', 'पुत ', 'भण ', 'भउणी ', 'बो ', 'भा ', 'भाइ ', 'सान ', 'झिअ ', 'सम्पर्कीय़ '], ['जेजे ', 'न ', 'दादी ', 'नाति ', 'नानी ', 'दिदि ', 'माआ ', "' ", 'माउ ', 'ठाकु '], ['जेजे ', 'नाति ', 'न ', 'दादी ', 'पितामह ', 'पिताम ', 'दादा ', 'नानी ', 'दिदि ', 'मात '], ['जेजे ', 'पिताम ', 'न ', 'नाति ', 'पितामह ', 'दादी ', 'माआ ', 'नानी ', 'दादा ', 'माउ '], ['जेजे ', 'न ', 'पिताम ', 'दादी ', 'नाति ', 'माआ ', 'नानी ', 'पितामह ', 'माउ ', 'मात '], ['जेजे ', 'पिताम ', 'नाति ', 'न ', 'माआ ', 'दादी ', 'पितामह ', 'दादा ', 'माउ ', 'नानी '], ['जेजे ', 'न ', 'नाति ', 'पिताम ', 'माआ ', 'दादी ', 'नानी ', 'माउ ', 'पितामह ', 'दादा '], ['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'बड़ ', 'द ', 'पिता ', 'नाति ', 'बापाङ्क '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'दादा ', 'बापा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'सम्पर्कीय़ ', 'दादा ', 'भाइ ', 'काक ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'सम्पर्कीय़ ', 'भाइ ', 'दादा ', 'काक ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'भाइ ', 'दादा ', 'माउ '], ['माउ ', 'जेजे ', 'माम ', 'काका ', 'माङ्क ', 'भउणी ', 'आ ', "' ", 'अ ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'खु ', 'सम्पर्कीय़ ', 'अ ', 'आ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'बो ', 'सम्पर्कीय़ ', 'आ ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'काका ', 'अ ', 'माआ ', 'आ ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'बो ', 'आ ', 'अ ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'अ ', 'काका ', 'माआ ', 'आ ', 'बो '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'भाब '], ['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'भाब '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['</s> ', '। ', '" ', '. ', ', ', '- ', "' ", '| ', 'I ', '( '], ['जणे ', 'सदस्य़ ', 'सदस्या ', 'सभ्य़ ', 'सांसद ', 'महिळा ', 'सद ', 'जण ', 'सदस्य ', 'एक '], ['। ', '| ', '</s> ', '. ', ', ', 'I ', '" ', 'बोलि ', '۔ ', '_ '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', '۔ ', 'I ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'खु ', 'काका ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'सम्प ', 'भउणी ', 'माम ', 'भ्रातृ ', 'सान ', 'बड़ ', 'पुत ', 'जणे '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'जेजे ', 'भउणी ', 'सम्प ', 'सान ', 'पुत ', 'बड़ ', 'भण '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सम्प ', 'सान ', 'भण ', 'खु ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'जेजे ', 'भउणी ', 'सान ', 'सम्प ', 'बड़ ', 'पुत ', 'भण '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'माम ', 'जेजे ', 'सान ', 'सम्प ', 'बड़ ', 'पुत ', 'भण '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'पुअ ', 'सान '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'जणे ', 'सान ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'पुअ ', 'भ्र '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'पुअ ', 'भ्र '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'सान ', 'पुअ ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', 'भाइ ', "' ", 'झिअ '], ['भ ', 'भण ', 'पुत ', 'जणे ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ '], ['भ ', 'पुत ', 'भण ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'बो ', 'सम्पर्कीय़ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न '], ['भ ', 'पुत ', 'भण ', 'भउणी ', 'भाइ ', 'भा ', 'बो ', 'सान ', 'झ ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सान ', 'सम्पर्कीय़ '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'दिदि ', 'नाति ', 'माउ ', 'माआ ', "' ", 'दादा '], ['जेजे ', 'न ', 'दादी ', 'नाति ', 'पिताम ', 'दादा ', 'पितामह ', 'नानी ', 'दिदि ', 'माउ '], ['जेजे ', 'न ', 'पिताम ', 'नाति ', 'दादी ', 'माआ ', 'नानी ', 'पितामह ', 'माउ ', 'दादा '], ['जेजे ', 'न ', 'दादी ', 'पिताम ', 'नाति ', 'नानी ', 'माआ ', 'माउ ', 'पितामह ', 'मात '], ['जेजे ', 'न ', 'नाति ', 'पिताम ', 'माआ ', 'दादी ', 'माउ ', 'नानी ', 'दादा ', 'पितामह '], ['जेजे ', 'न ', 'दादी ', 'नाति ', 'माआ ', 'पिताम ', 'नानी ', 'माउ ', 'दादा ', 'पितामह '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'चाचा ', 'भाइ '], ['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'जेजे ', 'काक ', 'दादा ', 'बापा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'दादा ', 'काक ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'माउ ', 'बापा ', 'दादा ', 'माङ्क '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', "' ", 'काका ', 'भउणी ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'काका ', 'आ ', 'अ ', 'खु ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'आ ', 'भउणी ', 'खु ', 'अ ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'काका ', 'खु ', 'माआ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'काका ', 'अ ', 'भउणी ', 'खु ', 'बो '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'भउणी ', 'अ ', 'काका ', 'खु ', 'माआ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'दे '], ['</s> ', '। ', '" ', '. ', ', ', "' ", '| ', '- ', 'I ', '( '], ['. ', 'सदस्य़ ', 'र ', "' ", '- ', '" ', 'सदस्य ', 'कर्मी ', 'सभ्य़ ', '्र '], ['। ', '</s> ', '| ', '. ', '- ', 'अ ', ' ', 'े ', 'ँ ', '_ '], ['। ', '</s> ', '| ', '. ', '- ', 'अ ', ' ', 'े ', 'ँ ', '_ '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'जेजे ', 'भउणी ', 'बड़ ', 'खु ', 'सान ', 'पुत ', 'भाइर '], ['सम्पर्कीय़ ', 'भाइ ', 'सम्प ', 'माम ', 'भउणी ', 'सान ', 'भ्रातृ ', 'जणे ', 'पुत ', 'बड़ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'जेजे ', 'भउणी ', 'सान ', 'खु ', 'पुत ', 'भण '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'जेजे ', 'सान ', 'भउणी ', 'पुत ', 'खु ', 'भण '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'सान ', 'खु ', 'भण ', 'पुत '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'जणे ', 'सान ', 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'भा ', 'भ्र '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'भा ', 'पुअ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'सान '], ['भ ', 'भण ', 'पुत ', 'जणे ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सान ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'न ', 'सम्पर्कीय़ '], ['जेजे ', 'दादी ', 'न ', 'नानी ', 'दिदि ', 'नाति ', 'माआ ', 'माउ ', 'दादा ', 'ठाकु '], ['जेजे ', 'दादी ', 'न ', 'नाति ', 'पिताम ', 'दादा ', 'पितामह ', 'नानी ', 'दिदि ', 'माउ '], ['जेजे ', 'न ', 'पिताम ', 'दादी ', 'नाति ', 'नानी ', 'पितामह ', 'माआ ', 'दादा ', 'माउ '], ['जेजे ', 'न ', 'दादी ', 'पिताम ', 'नाति ', 'नानी ', 'माआ ', 'पितामह ', 'माउ ', 'दादा '], ['जेजे ', 'न ', 'नाति ', 'दादी ', 'पिताम ', 'नानी ', 'माआ ', 'दादा ', 'माउ ', 'पितामह '], ['जेजे ', 'न ', 'दादी ', 'नाति ', 'पिताम ', 'नानी ', 'माआ ', 'माउ ', 'दादा ', 'पितामह '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'काक ', 'जेजे ', 'दादा ', 'बापा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'भाइ ', 'दादा ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', 'भउणी ', 'अ ', 'खु ', "' "], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'सम्पर्कीय़ ', 'काका ', 'आ ', 'खु ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'आ ', 'सम्पर्कीय़ ', 'खु ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'काका ', 'सम्पर्कीय़ ', 'माआ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'काका ', 'भउणी ', 'अ ', 'सम्पर्कीय़ ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'काका ', 'सम्पर्कीय़ ', 'खु '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'दे '], ['</s> ', '। ', '" ', '. ', ', ', '- ', '| ', "' ", 'I ', '( '], ['जणे ', 'सदस्य़ ', 'सदस्या ', 'जण ', 'अन्य़तम ', 'सदस्य ', 'सभ्य़ ', 'एक ', 'महिळा ', 'सद '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '᱾ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'काका ', 'भाइर '], ['सम्पर्कीय़ ', 'भाइ ', 'सम्प ', 'माम ', 'भउणी ', 'भ्रातृ ', 'जणे ', 'सान ', 'बड़ ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'जेजे ', 'सान ', 'खु ', 'पुत ', 'भण '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'क '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'जेजे ', 'सान ', 'खु ', 'पुत ', 'भण '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'जणे ', 'नाति ', 'सान ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भा ', 'भ्र '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'भा ', 'पुअ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'सान '], ['भ ', 'भण ', 'पुत ', 'जणे ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'बो ', 'सम्पर्कीय़ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न '], ['जेजे ', 'दादी ', 'न ', 'नानी ', 'दिदि ', 'नाति ', 'माआ ', 'माउ ', "' ", 'दादा '], ['जेजे ', 'दादी ', 'न ', 'नाति ', 'पिताम ', 'पितामह ', 'दादा ', 'नानी ', 'दिदि ', 'मात '], ['जेजे ', 'पिताम ', 'न ', 'नाति ', 'दादी ', 'पितामह ', 'नानी ', 'माआ ', 'दादा ', 'माउ '], ['जेजे ', 'पिताम ', 'न ', 'दादी ', 'नाति ', 'नानी ', 'माआ ', 'पितामह ', 'माउ ', 'मात '], ['जेजे ', 'न ', 'पिताम ', 'नाति ', 'दादी ', 'माआ ', 'नानी ', 'पितामह ', 'दादा ', 'माउ '], ['जेजे ', 'न ', 'पिताम ', 'दादी ', 'नाति ', 'नानी ', 'माआ ', 'माउ ', 'पितामह ', 'दादा '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'जेजे ', 'काक ', 'दादा ', 'बापा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'काका ', "' ", 'भउणी ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'काका ', 'सम्पर्कीय़ ', 'आ ', 'अ ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'आ ', 'सम्पर्कीय़ ', 'खु ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'काका ', 'अ ', 'माआ ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'काका ', 'भउणी ', 'अ ', 'खु ', 'सम्पर्कीय़ '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'माआ ', 'काका ', 'सम्पर्कीय़ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा '], ['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'सा ', 'भ ', 'बो ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे '], ['</s> ', '। ', '" ', '| ', '. ', "' ", '- ', 'I ', '! ', '_ '], ['के ', 'केर ', '. ', 'क ', 'के ', 'केक ', 'केइ ', 'किर ', 'कॆ ', '्के '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['। ', '| ', '</s> ', '. ', 'I ', ', ', '_ ', '" ', 'बोलि ', '۔ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'सान ', 'पुत ', 'भाइर '], ['सम्पर्कीय़ ', 'जणे ', 'भाइ ', 'माम ', 'सम्प ', 'भ्रातृ ', 'क ', 'भउणी ', 'खु ', 'सान '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'जेजे ', 'सान ', 'खु ', 'भण ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'जणे ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भ्र ', 'नाति ', 'सान '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पु ', 'भ्र ', 'भा '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'सान '], ['भ ', 'भण ', 'पुत ', 'जणे ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'सम्पर्कीय़ ', 'बो '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'सम्पर्कीय़ ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'सम्पर्कीय़ ', 'बो ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'बो ', 'सान ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न '], ['जेजे ', 'माआ ', "' ", 'बापा ', 'न ', 'दादा ', 'बड़ ', 'नाति ', 'मा ', 'नानी '], ['जेजे ', 'पिताम ', 'माआ ', 'दादा ', 'बापा ', 'पितामह ', 'नाति ', 'दादी ', 'बड़ ', 'मा '], ['जेजे ', 'माआ ', 'पिताम ', 'दादा ', 'नाति ', 'बापा ', 'दादी ', 'पितामह ', 'मा ', 'न '], ['जेजे ', 'नानी ', 'दादी ', 'पिताम ', 'न ', 'दादा ', 'नाति ', 'पितामह ', 'मात ', 'आइ '], ['जेजे ', 'बापा ', 'दादा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'बापा ', 'दादा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'दाद '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', "' ", 'भाइ ', 'दादा ', 'चाचा ', 'बड़ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'दादा ', 'भाइ ', 'सम्पर्कीय़ ', 'चाचा ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'दादा ', 'भाइ ', 'सम्पर्कीय़ ', 'माउ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'माङ्क ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'माउ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'काका ', 'बो ', 'भउणी ', "' ", 'माङ्क ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'काका ', 'माङ्क ', 'बापा ', 'भउणी ', 'माआ ', 'बो ', 'आ '], ['माउ ', 'जेजे ', 'माम ', 'माआ ', 'माङ्क ', 'भउणी ', 'काका ', 'बो ', 'बापा ', 'आ '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'काकी ', 'ब ', 'खु ', 'कुनि '], ['भि ', 'श् ', 'ज् ', 'भा ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'सा ', 'भ ', 'बो ', 'सान ', 'भाइ '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['</s> ', 'भाइ ', 'पुअ ', '| ', 'जणे ', 'िआ ', 'ाइ ', ', ', 'ए ', ' '], ['</s> ', 'भउणी ', 'जणे ', ', ', 'िआ ', 'पुअ ', '| ', 'ए ', 'कि ', 'ाइ '], ['</s> ', 'भउणी ', 'जणे ', ', ', 'िआ ', 'पुअ ', '| ', 'ए ', 'कि ', 'ाइ '], ['</s> ', '। ', '| ', '. ', '" ', '_ ', '- ', 'I ', ', ', '[ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'खु ', 'बो ', 'भाइर '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सान ', 'भउणी ', 'जेजे ', 'बड़ ', 'सम्प ', 'भण ', 'खु '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'माम ', 'सान ', 'जेजे ', 'बड़ ', 'सम्प ', 'साबत ', 'खु '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'जेजे ', 'काक ', 'खु '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'भा ', "' ", 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ', 'पुअ ', 'भ्र ', 'पु '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ', 'पुअ ', 'भ्र ', 'पु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'भ्र ', 'भा ', 'पु ', 'भाग ', 'नाति '], ['भ ', 'भउणी ', 'भण ', 'पुत ', 'भा ', 'बो ', 'सान ', 'भाइ ', "' ", 'झ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'भाइ ', 'बो ', 'भा ', 'न ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'भाइ ', 'बो ', 'भा ', 'न ', 'झ '], ['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'ब ', 'न '], ['जेजे ', 'माआ ', "' ", 'न ', 'नाति ', 'दादा ', 'माउ ', 'माम ', 'बड़ ', 'नानी '], ['जेजे ', 'माआ ', 'नाति ', 'न ', 'दादा ', 'माउ ', 'पिताम ', 'बड़ ', 'माम ', 'मा '], ['जेजे ', 'माआ ', 'न ', 'नाति ', 'माउ ', 'दादा ', 'पिताम ', 'मा ', 'दादी ', 'नानी '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'पिताम ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द '], ['जेजे ', 'बापा ', 'दादा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'दाद ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'बड़ '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'दादा ', 'बापा ', 'भाइ ', 'सम्पर्कीय़ ', 'माउ ', 'चाचा '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'दादा ', 'बापा ', 'सम्पर्कीय़ ', 'माउ ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माङ्क ', 'चाचा ', 'माउ ', 'जेजे ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'आ ', "' ", 'अ ', 'भउणी ', 'खु ', 'माङ्क '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'माङ्क ', 'भउणी ', 'अ ', 'आ ', 'काका ', 'बड़ '], ['माउ ', 'जेजे ', 'माम ', 'भउणी ', 'माङ्क ', 'अ ', 'बो ', 'आ ', 'काका ', 'माआ '], ['माउ ', 'आ ', 'माम ', 'जेजे ', 'माङ्क ', 'ब ', 'अ ', 'कुनि ', 'खु ', 'काकी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'सान ', 'भाइ '], ['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'भ ', 'श ', 'बो ', 'सान ', 'भाइ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'शा ', 'शाशु '], ['</s> ', '| ', '. ', '। ', '/ ', ' ', 'एहि ', 'l ', ', ', 'अन्य़ '], [', ', '</s> ', '। ', '. ', '| ', 'एबं ', '; ', 'ओ ', '? ', '! '], [', ', '</s> ', '। ', '. ', '| ', 'एबं ', '; ', '? ', 'ओ ', '! '], ['भल ', 'उत्तम ', 'श्रेष्ठ ', 'सुन्दर ', 'उन्नत ', 'सर्बो ', 'अधिक ', 'उपयुक्त ', 'बड़ ', 'उत्कृष्ट '], ['</s> ', '. ', '। ', '- ', 'जणे ', 'मा ', 'ः ', 'र ', 'ा ', ', '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'साबत ', 'सम्प ', 'नाति '], ['भाइ ', 'पुअ ', 'भउणी ', 'जणे ', 'झिअ ', ', ', 'ाम ', '. ', 'बा ', 'ाइ '], ['सम्पर्कीय़ ', 'माम ', 'क ', 'भाइ ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'जेजे ', 'खु ', 'काक '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'पु ', 'नाति ', 'भा ', "' ", 'बो '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'सम्पर्कीय़ ', 'पु ', 'पुअ ', 'भ्र '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'सम्पर्कीय़ ', 'पु ', 'पुअ ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्र ', 'भाग ', 'नाति '], ['भ ', 'भउणी ', 'भण ', 'पुत ', 'बो ', 'भा ', 'झ ', 'सान ', "' ", 'भाइ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'बो ', 'भाइ ', 'न ', 'भा ', 'झ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'बो ', 'भाइ ', 'भा ', 'न ', 'झ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'ब ', 'बो '], ['जेजे ', 'माआ ', "' ", 'नाति ', 'न ', 'माउ ', 'दादा ', 'बड़ ', 'माम ', 'बापा '], ['जेजे ', 'माआ ', 'पिताम ', 'नाति ', 'दादा ', 'माउ ', 'बापा ', 'पितामह ', 'न ', 'बड़ '], ['जेजे ', 'माआ ', 'नाति ', 'पिताम ', 'माउ ', 'न ', 'दादा ', 'मा ', 'बड़ ', 'बापा '], ['जेजे ', 'दादी ', 'नानी ', 'न ', 'पिताम ', 'नाति ', 'पितामह ', 'मात ', 'दिदि ', 'दादा '], ['जेजे ', 'बापा ', 'दादा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'दाद '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'बड़ ', 'माउ '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'चाचा ', 'बाप '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'दादा ', 'बापा ', 'माउ ', 'भाइ ', 'सम्पर्कीय़ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'माङ्क ', 'सम्पर्कीय़ ', 'माउ ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', "' ", 'बो ', 'भउणी ', 'अ ', 'आ ', 'काका ', 'माङ्क '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'भउणी ', 'माङ्क ', 'काका ', 'अ ', 'बड़ ', 'माआ '], ['माउ ', 'जेजे ', 'माम ', 'भउणी ', 'बो ', 'माङ्क ', 'अ ', 'माआ ', 'काका ', 'आ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'ब ', 'अ ', 'खु ', 'कुनि ', 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'बो ', 'भ ', 'सा ', 'श ', 'सान ', 'भाइ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'शा ', 'भाइ '], ['</s> ', '| ', 'ङ्क ', '" ', ' ', '/ ', ': ', '. ', 'by ', "' "], ['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', '! ', 'I ', '? '], ['</s> ', '। ', '. ', '| ', '" ', ', ', '- ', '! ', 'I ', '? '], ['भल ', 'उत्तम ', 'श्रेष्ठ ', 'सर्बो ', 'सुन्दर ', 'उन्नत ', 'बड़ ', 'अधिक ', 'उत्कृष्ट ', 'उपयुक्त '], ['मो ', 'मोर ', 'भाइ ', 'ताङ्क ', 'बो ', 'भउणी ', 'ताङ्कर ', 'माम ', 'बन्धु ', 'मुँ '], ['सम्पर्कीय़ ', 'भाइ ', 'सान ', 'जेजे ', 'भउणी ', 'माम ', 'बड़ ', 'नाति ', 'भण ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'सान ', 'माम ', 'जेजे ', 'बड़ ', 'नाति ', 'साबत ', 'भण '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'जेजे ', 'काक ', 'बड़ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'भा ', 'बो ', 'बड़ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'सम्पर्कीय़ ', 'पुअ ', 'बड़ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'सम्पर्कीय़ ', 'पुअ ', 'भउणी '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्र ', 'नाति ', 'भाग '], ['भ ', 'भउणी ', 'भण ', 'पुत ', 'बो ', 'भा ', 'सान ', 'झ ', "' ", 'भाइ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'बो ', 'सान ', 'भाइ ', 'भा ', 'नाति ', 'न '], ['भ ', 'भण ', 'भउणी ', 'पुत ', 'बो ', 'सान ', 'भाइ ', 'भा ', 'न ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'ब ', 'सम्पर्कीय़ '], ['जेजे ', 'न ', "' ", 'माआ ', 'नाति ', 'माउ ', 'नानी ', 'माम ', 'बड़ ', 'दिदि '], ['जेजे ', 'माआ ', 'न ', 'नाति ', 'माउ ', 'पिताम ', 'दादा ', 'माम ', 'पितामह ', 'बड़ '], ['जेजे ', 'माआ ', 'न ', 'नाति ', 'माउ ', 'पिताम ', 'मा ', 'दादी ', 'नानी ', 'दादा '], ['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'पिताम ', 'माउ ', 'दिदि ', 'मात ', 'आइ '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'दाद ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'बो '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'दादा ', 'बापा ', 'भाइ ', 'माउ ', 'सम्पर्कीय़ ', 'बाप '], ['माम ', 'काका ', 'जेजे ', 'मामा ', 'माउ ', 'दादा ', 'सम्पर्कीय़ ', 'भाइ ', 'बापा ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माङ्क ', 'माउ ', 'चाचा ', 'जेजे ', 'आङ्क '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'अ ', 'भउणी ', "' ", 'आ ', 'खु ', 'माङ्क '], ['माउ ', 'जेजे ', 'माम ', 'बो ', 'माङ्क ', 'भउणी ', 'अ ', 'काका ', 'बड़ ', 'ब '], ['माउ ', 'जेजे ', 'माम ', 'भउणी ', 'माङ्क ', 'बो ', 'अ ', 'माआ ', 'आ ', 'काका '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'ब ', 'अ ', 'कुनि ', 'खु ', 'भउणी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'बो ', 'श ', 'सा ', 'सान ', 'भाइ '], ['भि ', 'श् ', 'ज् ', 'भा ', 'बो ', 'सा ', 'श ', 'भ ', 'सान ', 'शाशु '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'शा ', 'शाशु '], ['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा '], ['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', '! ', '? ', 'I '], ['</s> ', '। ', '| ', '. ', '" ', '_ ', '- ', '! ', 'I ', ', '], ['भल ', 'उत्तम ', 'श्रेष्ठ ', 'सुन्दर ', 'सर्बो ', 'अधिक ', 'उन्नत ', 'उपयुक्त ', 'उत्कृष्ट ', 'बड़ '], ['</s> ', '. ', '- ', 'जणे ', 'मा ', '। ', 'ङ्क ', 'र ', 'घर ', 'ः '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'माम ', 'सान ', 'जेजे ', 'बड़ ', 'साबत ', 'पुत ', 'नाति '], ['ळित ', 'ळक ', 'ळी ', 'ळिक ', 'ळन ', 'ध्य़ ', 'षी ', 'ठि ', 'क्षिक ', 'चार '], ['भल ', 'उत्तम ', 'सुन्दर ', 'श्रेष्ठ ', 'सर्बो ', 'उन्नत ', 'अधिक ', 'उपयुक्त ', 'उत्कृष्ट ', 'बड़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सान ', 'भा ', 'नाति ', "' ", 'बो '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'नाति ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'भउणी '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'भाग ', 'भ्र '], ['भ ', 'भण ', 'भउणी ', 'पुत ', 'भा ', 'बो ', 'झ ', "' ", 'सान ', 'भाइ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'भा ', 'बो ', 'झ ', 'भाइ ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'सान ', 'बो ', 'झ ', 'न ', 'भाइ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'ब ', 'बो '], ['जेजे ', "' ", 'माआ ', 'न ', 'नानी ', 'नाति ', 'माउ ', 'दादी ', 'दिदि ', 'माम '], ['जेजे ', 'माआ ', 'न ', 'पिताम ', 'नाति ', 'दादी ', 'माउ ', 'नानी ', 'दादा ', 'पितामह '], ['जेजे ', 'माआ ', 'न ', 'दादी ', 'पिताम ', 'माउ ', 'नानी ', 'नाति ', 'मात ', 'मा '], ['जेजे ', 'न ', 'दादी ', 'नानी ', 'पिताम ', 'माउ ', 'दिदि ', 'नाति ', 'ठाकु ', 'मात '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'पिताम ', 'बापाङ्क ', 'बड़ ', 'पिता '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बापाङ्क ', 'बड़ ', 'दाद ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'दादा ', 'सम्पर्कीय़ ', 'भाइ ', 'चाचा ', 'काक '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'माउ ', 'बापा ', 'दादा ', 'माङ्क ', 'काक '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माङ्क ', 'माउ ', 'चाचा ', 'जेजे ', 'बापा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'अ ', "' ", 'माङ्क ', 'भउणी ', 'खु ', 'बो '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'अ ', 'आ ', 'भउणी ', 'काका ', 'बो ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'अ ', 'आ ', 'भउणी ', 'माआ ', 'खु ', 'बो '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'ब ', 'अ ', 'कुनि ', 'काकी ', 'खु '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'सा ', 'भ ', 'बो ', 'सान ', 'भाइ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'शा ', 'दे '], ['</s> ', '| ', '. ', 'ात ', '। ', 'भाइ ', 'ाज ', 'ा ', 'े ', '्ब '], ['</s> ', ', ', '। ', '. ', '| ', 'एबं ', '; ', 'याहा ', '- ', '? '], ['</s> ', '। ', '. ', '| ', '" ', '- ', ', ', '! ', 'I ', '( '], ['अग्निशम ', 'अग्नि ', 'अग्निश ', 'दमक ', 'अग्निशमन ', 'फाय़ार ', 'निआँ ', 'अग्निकाण्ड ', 'दमकल ', 'अग्निक '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'खु ', 'बड़ ', 'भाइर ', "' "], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सान ', 'सम्प ', 'भउणी ', 'जेजे ', 'भण ', 'खु ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'सम्प ', 'जेजे ', 'खु ', 'भण ', 'पुत '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'बन्धु ', 'खु ', 'काक '], ['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'सान ', 'भा ', 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'सान ', 'नाति ', 'पु ', 'पुअ ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'नाति ', 'पु ', 'भ्र ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'भाग ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', "' ", 'भा ', 'झ ', 'बो ', 'सान ', 'भाइ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'सान ', 'न ', 'बो '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'न ', 'भाइ ', 'सान ', 'बो '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'सम्पर्कीय़ ', 'ब '], ['जेजे ', 'न ', "' ", 'नाति ', 'नानी ', 'दादी ', 'माआ ', 'माउ ', 'दिदि ', 'माम '], ['जेजे ', 'न ', 'पिताम ', 'नाति ', 'पितामह ', 'माउ ', 'दादी ', 'नानी ', 'मात ', 'माआ '], ['जेजे ', 'न ', 'नाति ', 'पिताम ', 'नानी ', 'दादी ', 'माउ ', 'माआ ', 'मात ', 'पितामह '], ['जेजे ', 'नानी ', 'दादी ', 'न ', 'पिताम ', 'नाति ', 'पितामह ', 'मात ', 'दिदि ', 'माउ '], ['जेजे ', 'पितामह ', 'दादा ', 'बापा ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'दाद ', 'बड़ ', 'बापाङ्क ', 'तात '], ['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'काक ', 'दादा ', 'आ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'बापा ', 'काक ', 'चाचा ', 'भाइ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'माउ ', 'काक ', 'दादा ', 'चाचा ', 'माङ्क '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'चाचा ', 'माङ्क ', 'माउ ', 'जेजे ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'खु ', 'भउणी ', 'माङ्क ', 'काका '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'काका ', 'बो ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'खु ', 'बो ', 'माआ '], ['माउ ', 'माम ', 'आ ', 'जेजे ', 'माङ्क ', 'अ ', 'काकी ', 'खु ', 'ब ', 'कुनि '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाब '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'शाशु ', 'भाइ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'शा ', 'झ '], [', ', '</s> ', '। ', '. ', '| ', '; ', 'एबं ', '? ', '! ', '" '], ['</s> ', '| ', '. ', '। ', ', ', 'ताङ्क ', 'जणे ', 'भउणी ', 'अ ', 'ँ '], ['</s> ', '| ', '. ', '। ', ', ', 'ताङ्क ', 'जणे ', 'भउणी ', 'अ ', 'ँ '], ['सन ', 'सन् ', 'ण्ण ', 'सननि ', 'स् ', 'स्न ', 'सेन ', 'सिआ ', 'सन ', 'सनगी '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'सान ', 'पुत ', 'नाति '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'सान ', 'जेजे ', 'भण ', 'पुत ', 'बड़ '], ['बा ', 'ाता ', 'ाम ', "' ", 'ाइ ', '<unk> ', 'नेता ', 'म ', '. ', 'पुअ '], ['सम्पर्कीय़ ', 'माम ', 'क ', 'भाइ ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'काक ', 'खु ', 'जेजे '], ['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भा ', 'नाति ', 'सान ', 'सम्पर्कीय़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्र ', 'भाग ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', "' ", 'भा ', 'बो ', 'न ', '" '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'बो ', 'भाइ ', 'न ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', 'बो ', 'न ', 'भाइ ', 'सान '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'न ', 'बो '], ['जेजे ', 'माआ ', 'न ', "' ", 'नानी ', 'माउ ', 'नाति ', 'माम ', 'दिदि ', 'दादा '], ['जेजे ', 'माआ ', 'पिताम ', 'न ', 'नाति ', 'माउ ', 'पितामह ', 'दादा ', 'दादी ', 'नानी '], ['जेजे ', 'माआ ', 'न ', 'पिताम ', 'माउ ', 'नाति ', 'दादी ', 'नानी ', 'दादा ', 'पितामह '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'पिताम ', 'नाति ', 'दिदि ', 'माउ ', 'पितामह ', 'मात '], ['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता '], ['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'पिताम ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'दाद ', 'बापाङ्क ', 'पिता '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'चाचा ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'दादा ', 'भाइ ', 'सम्पर्कीय़ ', 'चाचा ', 'माउ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'बापा ', 'माउ ', 'भाइ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'चाचा ', 'माङ्क ', 'जेजे ', 'माउ ', 'दादा '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'अ ', 'खु ', "' ", 'माङ्क ', 'बो ', 'भउणी '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'बो ', 'काका ', 'अ ', 'आ ', 'खु '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'अ ', 'आ ', 'बो ', 'माआ ', 'काका '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'ब ', 'कुनि ', 'खु ', 'भउणी ', 'अ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'सान ', 'भाइ '], ['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'शा ', 'शाशु '], ['</s> ', '। ', '. ', '| ', '" ', '! ', '- ', ', ', 'I ', '? '], ['</s> ', '। ', '. ', '" ', '- ', ', ', '| ', '( ', 'I ', "' "], ['</s> ', '| ', '। ', 'से ', '. ', 'ताङ्क ', '" ', '_ ', '! ', 'एहि '], ['कारि ', 'शिळ ', 'कळाकार ', 'कळ ', 'कार ', 'शिळ्प ', 'कारीगर ', 'कुश ', 'ब ', 'चित्र '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'खु ', 'भाइर ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सान ', 'भउणी ', 'जेजे ', 'सम्प ', 'बड़ ', 'भण ', 'पुत '], ['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'माम ', 'सान ', 'जेजे ', 'सम्प ', 'बड़ ', 'भण ', 'पुत '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'जेजे ', 'काक ', 'खु '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'सान ', 'भा ', 'नाति ', 'पुअ '], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'पुअ ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'भ्र ', 'पुअ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्र ', 'नाति ', 'भाग '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'सान ', 'भाइ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'सान ', 'न ', 'बो ', 'भाइ '], ['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'न ', 'ब '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'माउ ', 'दिदि ', 'नाति ', 'माम ', 'दादा '], ['जेजे ', 'नानी ', 'दादी ', 'पिताम ', 'माआ ', 'न ', 'मात ', 'माउ ', 'नाति ', 'पितामह '], ['जेजे ', 'न ', 'पिताम ', 'नानी ', 'माआ ', 'दादी ', 'नाति ', 'माउ ', 'पितामह ', 'मात '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बापाङ्क ', "' ", 'बड़ ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'माङ्क ', 'जेजे ', 'माउ ', 'आङ्क ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'माङ्क ', 'काक ', 'जेजे ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ', 'दादा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'बापा ', 'सम्पर्कीय़ ', 'माउ ', 'माङ्क ', 'चाचा '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'खु ', "' ", 'भउणी ', 'मा ', 'कुनि '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'पि ', 'काकी ', 'माआ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', 'भउणी ', 'अ ', 'खु ', 'माआ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', '! ', 'I ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', '! ', 'I ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'भाइर ', 'सान ', 'क '], ['</s> ', '। ', '. ', '| ', '" ', '! ', '- ', ', ', '( ', '? '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'खु ', 'जेजे ', 'सान ', 'क ', 'भण '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'भा ', 'पु ', 'भाइर ', 'भ्र ', 'सान ', "' "], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'भ्र ', 'पु ', 'भा ', 'नाति ', 'सान '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'भा ', 'पु ', 'भ्र ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'भाइर ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'न ', 'बो ', 'सम्पर्कीय़ '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'सान ', 'बो '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'माउ ', 'माम ', 'नाति ', 'दिदि ', 'दादा '], ['जेजे ', 'पिताम ', 'नानी ', 'माआ ', 'दादी ', 'न ', 'मात ', 'माउ ', 'नाति ', 'पितामह '], ['जेजे ', 'पिताम ', 'न ', 'माआ ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'पितामह ', 'दादा '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'बापाङ्क ', 'पिताम ', "' ", 'बड़ ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'बापाङ्क ', 'द ', 'पिता ', 'बड़ ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माङ्क ', 'माउ ', 'आङ्क ', 'आ '], ['माम ', 'काका ', 'मामा ', 'माङ्क ', 'जेजे ', 'काक ', 'माउ ', 'सम्पर्कीय़ ', 'दादा ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'काक ', 'सम्पर्कीय़ ', 'भाइ ', 'माङ्क ', 'माउ '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', "' ", 'खु ', 'मा ', 'भउणी ', 'काका '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'माआ ', 'पि ', 'काकी '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', 'माआ ', 'भउणी ', 'मा ', 'अ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शाशु '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'सान '], ['</s> ', '। ', '" ', '| ', '. ', "' ", 'I ', '- ', '_ ', '! '], ['। ', '| ', '</s> ', '. ', ', ', 'I ', '۔ ', '_ ', '! ', '; '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'भाइर ', 'सान ', 'काका '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'भण ', 'सम्प ', 'सान ', 'बड़ ', 'खु '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सम्प ', 'सान ', 'बड़ ', 'खु ', 'भण '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'भाइर ', 'भ्र ', "' "], ['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'भ्र ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'पु ', 'नाति ', 'भा ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', 'भाइ ', 'झि ', 'न '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'भा ', 'झ ', 'सान ', 'न ', 'बो '], ['जेजे ', 'नानी ', 'न ', 'माआ ', 'दादी ', 'माउ ', 'माम ', "' ", 'नाति ', 'दादा '], ['जेजे ', 'नानी ', 'माआ ', 'पिताम ', 'दादी ', 'न ', 'माउ ', 'मात ', 'नाति ', 'दादा '], ['जेजे ', 'न ', 'पिताम ', 'माआ ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'पितामह ', 'दादा '], ['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'बापाङ्क ', "' ", 'पिताम ', 'बड़ ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माङ्क ', 'माउ ', 'आ ', 'आङ्क '], ['माम ', 'काका ', 'मामा ', 'माङ्क ', 'जेजे ', 'काक ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ', 'दादा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'बापा ', 'माउ ', 'चाचा ', 'माङ्क ', 'सम्पर्कीय़ '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', "' ", 'भउणी ', 'खु ', 'मा ', 'अ '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'माआ ', 'पि ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'भउणी ', 'काका ', 'माआ ', 'अ ', 'खु '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', '! ', 'I ', '? '], ['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', '! ', 'I ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['</s> ', '। ', '. ', '" ', '| ', '! ', ', ', '- ', '? ', '( '], ['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '[ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'सम्प ', 'जेजे ', 'खु ', 'बड़ ', 'भण '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'भाइर ', "' ", 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'पु ', 'भ्र ', 'नाति ', 'भा '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'भा ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'भाइर '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'भा ', 'झ ', 'सान ', 'न ', 'बो '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'माउ ', 'दिदि ', 'माम ', 'नाति ', "' "], ['जेजे ', 'नानी ', 'दादी ', 'माआ ', 'पिताम ', 'मात ', 'न ', 'माउ ', 'नाति ', 'पितामह '], ['जेजे ', 'न ', 'पिताम ', 'नानी ', 'माआ ', 'दादी ', 'माउ ', 'नाति ', 'मात ', 'पितामह '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'बापाङ्क ', 'पिताम ', "' ", 'बड़ ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'माङ्क ', 'जेजे ', 'माउ ', 'आङ्क ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'माङ्क ', 'काक ', 'जेजे ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ', 'भाइ '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'माङ्क ', 'बापा ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'खु ', "' ", 'भउणी ', 'मा ', 'कुनि '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'पि ', 'माआ ', 'काकी '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'भउणी ', 'अ ', 'माआ ', 'खु ', 'काका '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'बो ', 'श ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'दे '], ['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( '], ['</s> ', '. ', '। ', '" ', '- ', '| ', "' ", '! ', ', ', '[ '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'भाइर ', 'सान ', 'क '], ['</s> ', '। ', '. ', '" ', '| ', '! ', ', ', '- ', '( ', '? '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'खु ', 'सान ', 'जेजे ', 'भण ', 'क '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'भाइर ', 'सान ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भ्र ', 'भा ', 'सान ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'पु ', 'भा ', 'भ्र ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'भाइर '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'न ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'सान ', 'बो '], ['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'माउ ', 'दिदि ', 'नाति ', "' ", 'मात '], ['जेजे ', 'नानी ', 'दादी ', 'पिताम ', 'न ', 'मात ', 'माआ ', 'माउ ', 'नाति ', 'पितामह '], ['जेजे ', 'न ', 'पिताम ', 'नानी ', 'दादी ', 'माआ ', 'नाति ', 'माउ ', 'पितामह ', 'मात '], ['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बापाङ्क ', "' ", 'बड़ ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद '], ['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'माङ्क ', 'जेजे ', 'माउ ', 'आङ्क ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'माङ्क ', 'काक ', 'जेजे ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ', 'दादा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'बापा ', 'माङ्क ', 'सम्पर्कीय़ ', 'माउ ', 'चाचा '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', "' ", 'खु ', 'भउणी ', 'कुनि ', 'मा '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'भउणी ', 'मा ', 'पि ', 'काकी ', 'कुनि '], ['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'भउणी ', 'काका ', 'माआ ', 'खु ', 'अ '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['</s> ', '। ', '. ', '| ', '" ', ', ', '- ', '! ', 'I ', '? '], ['</s> ', '. ', '। ', '" ', '- ', "' ", '| ', '! ', ', ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'भाइर ', 'सान ', 'सम्प '], ['</s> ', '। ', '. ', '| ', '" ', '! ', '- ', ', ', '( ', '? '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'खु ', 'सान ', 'जेजे ', 'भण ', 'बड़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'भा ', 'पु ', "' ", 'सान ', 'भ्र ', 'भाइर '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'भ्र ', 'पु ', 'भा ', 'सान ', 'नाति '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'भा ', 'भ्र ', 'पु ', 'नाति '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'भाइर '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'भा ', 'झ ', 'न ', 'सान ', 'बो '], ['जेजे ', 'नानी ', 'न ', 'माउ ', 'माआ ', 'माम ', 'दादी ', 'नाति ', 'दादा ', "' "], ['जेजे ', 'नानी ', 'पिताम ', 'न ', 'माआ ', 'दादी ', 'माउ ', 'मात ', 'नाति ', 'दादा '], ['जेजे ', 'न ', 'पिताम ', 'नानी ', 'माआ ', 'नाति ', 'दादी ', 'माउ ', 'दादा ', 'मात '], ['जेजे ', 'दादा ', 'द ', 'बापा ', 'पितामह ', 'बापाङ्क ', 'पिताम ', "' ", 'बड़ ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद '], ['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति '], ['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'माउ ', 'माङ्क ', 'आ ', 'चाचा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'माउ ', 'माङ्क ', 'काक ', 'सम्पर्कीय़ ', 'चाचा ', 'दादा '], ['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'काक ', 'माउ ', 'भाइ ', 'चाचा ', 'दादा '], ['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'खु ', 'मा ', 'भउणी ', "' ", 'अ '], ['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'पि ', 'काकी ', 'अ '], ['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'काका ', 'भउणी ', 'अ ', 'काकी '], ['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर '], ['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'बो ', 'श ', 'भाइ ', 'सान '], ['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान '], ['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( '], ['</s> ', '. ', '। ', '" ', '- ', "' ", ', ', '| ', '! ', '( '], ['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'खु ', 'भण '], ['</s> ', '. ', '। ', '" ', "' ", '- ', '! ', ', ', '| ', '[ '], ['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'सम्प ', 'खु ', 'भण ', 'बड़ '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'भाइर ', 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'भ्र '], ['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'भ्र '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'न ', 'भाइर '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'न ', 'बो ', 'सान '], ['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'भा ', 'झ ', 'सान ', 'न ', 'बो ']]

print(_)

['जेजे ', 'न ', "' ", 'नानी ', 'नाति ', 'दादी ', 'माआ ', 'दिदि ', 'माउ ', 'पिताम ']
['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'पिताम ', "' ", 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'भाइ ', 'खु ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', "' ", 'खु ', 'अ ', 'माङ्क ', 'ब ', 'कुनि ', 'बो ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'शा ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'जणे ', 'बड़ ', 'भ्र ', 'क ']
['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भ्र ', 'भा ', 'सान ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भग ', 'भाइ ', 'बो ', 'जणे ']
['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'नाति ', 'दिदि ', 'माआ ', 'आइ ', 'मात ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'बापा ', 'दादा ', 'खु ']
['माउ ', 'जेजे ', 'माम ', "' ", 'खु ', 'आ ', 'अ ', 'कुनि ', 'माङ्क ', 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'श ', 'भ ', 'शा ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भ्रातृ ', 'जणे ', 'सम्प ', 'भउणी ', 'क ', 'बड़ ', 'काक ']
['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भा ', 'भ्र ', 'सान ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'जणे ', 'भग ', 'भाइ ', 'न ']
['जेजे ', 'न ', 'नानी ', "' ", 'नाति ', 'दादी ', 'दिदि ', 'माउ ', 'आइ ', 'माआ ']
['जेजे ', 'पितामह ', 'दादा ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'खु ', 'चा ', 'बापा ']
['माउ ', 'जेजे ', 'माम ', 'खु ', "' ", 'अ ', 'आ ', 'कुनि ', 'झ ', 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'शा ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', "' ", 'सम्प ', 'जेजे ', 'भाइर ', 'भ्रातृ ']
['पुत ', 'भण ', 'भ ', "' ", 'भाइ ', 'पु ', 'भा ', 'सान ', 'भ्र ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'भग ', 'जणे ', 'न ']
['जेजे ', 'न ', "' ", 'नानी ', 'दादी ', 'नाति ', 'दिदि ', 'आइ ', 'माउ ', 'मात ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', "' ", 'बापा ', 'द ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चाचा ', 'खु ', 'बापा ', 'चा ']
['माउ ', 'जेजे ', 'माम ', "' ", 'खु ', 'कुनि ', 'अ ', 'आ ', 'भउणी ', 'माङ्क ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'श ', 'झ ', 'ज् ', 'शा ', 'भ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'जणे ', 'क ', 'भउणी ', 'भ्र ', 'बड़ ']
['पुत ', 'भण ', 'भ ', "' ", 'भाइ ', 'पु ', 'भ्र ', 'भा ', 'सान ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'जणे ', 'भग ', 'न ']
['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'नाति ', 'माआ ', 'दिदि ', 'माउ ', 'आइ ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'दादा ', 'काक ', 'माउ ', 'खु ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'खु ', 'अ ', 'माङ्क ', 'भउणी ', 'कुनि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'खु ', 'जेजे ', 'सम्प ', 'भाइर ', 'बड़ ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'झि ']
['जेजे ', "' ", 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'माआ ', 'दिदि ', 'आइ ']
['जेजे ', 'दादा ', 'पितामह ', "' ", 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'माउ ', 'चाचा ', 'भाइ ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'खु ', 'अ ', 'माङ्क ', 'कुनि ', 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'खु ', "' ", 'जेजे ', 'भाइर ', 'सम्प ', 'बड़ ']
['पुत ', 'भण ', 'भ ', "' ", 'भाइ ', 'पु ', 'भा ', 'सान ', 'भ्र ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'न ', 'भग ', 'बो ']
['जेजे ', "' ", 'न ', 'नानी ', 'दादी ', 'नाति ', 'माआ ', 'दिदि ', 'माउ ', 'मात ']
['जेजे ', 'पितामह ', 'दादा ', "' ", 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', '" ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'बापा ', 'खु ', 'चा ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'खु ', 'माङ्क ', 'अ ', 'कुनि ', 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'श ', 'ज् ', 'झ ', 'शा ', 'भ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', "' ", 'भउणी ', 'खु ', 'सम्प ', 'भाइर ', 'जेजे ', 'भ्रातृ ']
['पुत ', 'भण ', "' ", 'भ ', 'भाइ ', 'पु ', 'भा ', 'भ्र ', 'सान ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'न ', 'भग ', 'बो ']
['जेजे ', "' ", 'न ', 'नानी ', 'माआ ', 'दादी ', 'माउ ', 'नाति ', 'दिदि ', 'पिताम ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'काक ', 'चाचा ', 'भाइ ', 'माउ ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'अ ', 'कुनि ', 'खु ', 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', "' ", 'खु ', 'जेजे ', 'भाइर ', 'बड़ ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'सान ', 'भा ', 'भ्र ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'न ', 'बो ', 'भग ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माआ ', "' ", 'माउ ', 'दिदि ', 'दादा ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', "' ", 'चाचा ', 'बापा ', 'दादा ', 'भाइ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'अ ', 'खु ', 'माङ्क ', 'कुनि ', "' ", 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '᱾ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', 'जेजे ', 'भाइर ', 'सम्प ', 'बड़ ', 'क ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'भ्र ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'झि ']
['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'माआ ', 'नाति ', 'माउ ', 'दिदि ', 'द ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'माउ ', 'चा ', 'बापा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'कुनि ', 'खु ', 'माङ्क ', 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', 'I ', '۔ ', '᱾ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', 'जेजे ', "' ", 'भाइर ', 'सान ', 'बड़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भा ', 'सान ', 'भ्र ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', "' ", 'झ ', 'भा ', 'बो ', 'भाइ ', 'सान ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'दिदि ', "' ", 'माउ ', 'आइ ', 'नाति ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'नाति ', 'माआ ', 'माउ ', "' ", 'द ']
['जेजे ', 'न ', 'दादी ', "' ", 'नानी ', 'माउ ', 'दिदि ', 'आइ ', 'द ', 'माआ ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'ठाकु ', 'आइ ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'ठाकु ', 'दादा ', 'ब ']
['जेजे ', 'दादी ', 'न ', 'नानी ', 'नाति ', 'माउ ', 'पिताम ', 'दादा ', 'ठाकु ', 'दिदि ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', "' ", 'बापा ', 'पिताम ', 'दाद ', 'बड़ ', 'बापाङ्क ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चाचा ', 'बापा ', 'माउ ', 'खु ']
['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'जेजे ', 'चा ', 'चाचा ', 'माउ ', 'आ ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'बापा ', 'आ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'चाचा ', 'दादा ', 'माउ ', 'सम्पर्कीय़ ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'चा ', 'जेजे ', 'माउ ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माउ ', 'जेजे ', 'चाचा ', 'माङ्क ', 'चा ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'खु ', 'माङ्क ', "' ", 'ब ', 'कुनि ', 'अ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'कुनि ', 'खु ', 'ब ', 'अ ', 'झ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', "' ", 'खु ', 'अ ', 'कुनि ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'खु ', 'अ ', 'झ ', 'पि ']
['माउ ', 'माम ', 'आ ', 'जेजे ', 'माङ्क ', 'अ ', 'ब ', 'पि ', 'झ ', 'खु ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'सम्पर्कीय़ ', 'ब ', 'पि ', 'खु ', 'परिबार ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'भाइ ', 'सा ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सा ', 'शा ']
['</s> ', '| ', '/ ', '। ', '" ', '. ', '? ', '! ', 'Â ', 'â ']
['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'तिआरि ', 'पका ', 'खाउ ', 'रन् ', 'खा ', 'बना ']
['खा ', 'खाउ ', 'खाइ ', 'ख ', 'खाए ', 'खाइबाकु ', 'पिउ ', 'नेउछन्ति ', 'खेळु ', 'करुछन्ति ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'क ', 'भाइर ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'क ', 'भाइर ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'बड़ ', 'क ', 'भउणी ', 'भाइर ', "' "]
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'खु ', 'बड़ ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'खु ', 'बड़ ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भ्रातृ ', 'क ', 'सम्प ', 'परिबार ', 'बड़ ', 'भउणी ', 'जेजे ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'सान ', 'भा ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्रातृ ', 'भ्र ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', "' ", 'भाइ ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', "' ", 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'भाइर ', 'बो ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['भ ', 'भण ', 'पुत ', 'भा ', 'सम्पर्कीय़ ', 'भउणी ', 'झ ', 'भाइ ', 'न ', 'ब ']
['जेजे ', 'नानी ', 'न ', 'दादी ', "' ", 'दिदि ', 'माआ ', 'माउ ', 'नाति ', 'आइ ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', "' ", 'नाति ', 'द ', 'माआ ', 'माउ ']
['जेजे ', "' ", 'न ', 'दादी ', 'नानी ', 'माउ ', 'दिदि ', 'द ', 'नाति ', 'आइ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'पितामह ', 'ठाकु ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'ठाकु ', 'दादा ', 'ब ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'पिताम ', 'माउ ', 'दादा ', 'दिदि ', 'ठाकु ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'नाति ', 'पितृ ', 'बापाङ्क ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'बापा ', 'चाचा ', 'खु ', 'माउ ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चा ', 'चाचा ', 'आ ', 'माउ ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'बापा ', 'आ ', '" ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'दादा ', 'माउ ', 'सम्पर्कीय़ ', 'बापा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'चा ', 'जेजे ', 'माउ ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'काक ', 'माउ ', 'जेजे ', 'चाचा ', 'माङ्क ', 'पितृ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'खु ', "' ", 'माङ्क ', 'ब ', 'अ ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'कुनि ', 'ब ', "' ", 'अ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'ब ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'खु ', 'पि ', 'अ ', 'झ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'पि ', 'खु ', 'झ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'परिबार ', 'माङ्क ', 'सम्पर्कीय़ ', 'खु ', 'पि ', 'ब ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'भाइ ', 'सा ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'सा ', 'शा ']
['</s> ', '। ', '- ', '. ', 'र ', 'आ ', 'ि ', 'ी ', 'भोजन ', 'ा ']
['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', "' "]
['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'खाउ ', 'तिआरि ', 'रन् ', 'प ', 'पर ']
['खा ', 'खाउ ', 'खाइ ', 'खाए ', 'पिउ ', 'ख ', 'खाइबाकु ', 'पि ', 'नेउछन्ति ', 'खेळु ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', "' "]
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'भाइर ', 'क ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'बड़ ', 'भउणी ', "' ", 'क ', 'भाइर ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'सम्प ', 'क ', 'भ्रातृ ', 'भउणी ', 'खु ', 'सान ', 'बड़ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'सान ', 'खु ', 'बड़ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'परिबार ', 'बड़ ', 'भउणी ', 'बन्धु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सम्पर्कीय़ ', 'सान ', 'भाइर ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'भा ', 'सान ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'सान ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्रातृ ', 'नाति ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', "' ", 'भाइ ', 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'भाइर ', 'बो ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'सान ', 'न ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'बो ', 'ब ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'माआ ', "' ", 'माउ ', 'नाति ', 'द ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'नाति ', 'माउ ', 'माआ ', "' ", 'द ']
['जेजे ', 'न ', "' ", 'दादी ', 'माउ ', 'नानी ', 'दिदि ', 'द ', 'नाति ', 'माआ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'माआ ', 'ठाकु ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकु ', 'ब ']
['जेजे ', 'न ', 'माउ ', 'दादी ', 'नाति ', 'पिताम ', 'दादा ', 'दिदि ', 'द ', 'ब ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'बापा ', 'माउ ', 'खु ']
['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'जेजे ', 'चा ', 'चाचा ', 'आङ्क ', 'आ ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'आ ', 'माङ्क ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'चाचा ', 'दादा ', 'माउ ', 'माङ्क ', 'सम्पर्कीय़ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'चा ', 'माउ ', 'जेजे ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'काक ', 'माउ ', 'जेजे ', 'माङ्क ', 'चाचा ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', "' ", 'अ ', 'ब ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'खु ', 'कुनि ', 'ब ', 'झ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'माङ्क ', 'आ ', 'खु ', 'अ ', 'झ ', 'पि ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'झ ', 'पि ', 'खु ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'खु ', 'परिबार ', 'सम्पर्कीय़ ', 'ब ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सा ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'शा ', 'शाशु ']
['</s> ', '| ', '. ', '। ', '" ', '/ ', '! ', "' ", ' ', ': ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'श ', 'झ ', 'ज् ', 'भ ', 'शाशु ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', "' ", '( ']
['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'तिआरि ', 'खाउ ', 'रन् ', 'बना ', 'प ']
['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'झ ', 'भउणी ', 'श ', 'शा ', 'भ ']
['परिबेषण ', 'पर ', 'खाइ ', 'परिब ', 'प ', 'खाइबाकु ', 'पि ', 'प्रदान ', 'सेबा ', 'देइथिले ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'काका ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'क ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'क ', 'भाइर ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'सान ', 'खु ', 'बड़ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'सान ', 'बड़ ', 'खु ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'बड़ ', 'भउणी ', 'परिबार ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'सम्पर्कीय़ ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'सान ', 'नाति ', 'भा ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'नाति ', 'भ्र ', 'सान ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'सान ', 'भ्रातृ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', "' ", 'बो ', 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', "' ", 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', "' ", 'भाइ ', 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'सान ', 'न ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', 'सम्पर्कीय़ ', 'न ', 'ब ']
['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'माआ ', 'दिदि ', 'माउ ', 'नाति ', 'आइ ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'नाति ', "' ", 'माआ ', 'माउ ', 'द ']
['जेजे ', 'न ', "' ", 'दादी ', 'माउ ', 'नानी ', 'दिदि ', 'द ', 'नाति ', 'माआ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'माआ ', 'ठाकु ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकु ', 'ब ']
['जेजे ', 'न ', 'माउ ', 'दादी ', 'पिताम ', 'नाति ', 'दादा ', 'दिदि ', 'ब ', 'पितामह ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'बापा ', 'चाचा ', 'माउ ', 'खु ']
['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'जेजे ', 'चा ', 'चाचा ', 'आ ', 'आङ्क ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'आ ', 'बापा ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'दादा ', 'चाचा ', 'माउ ', 'माङ्क ', 'बापा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'चा ', 'जेजे ', 'माउ ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माउ ', 'जेजे ', 'माङ्क ', 'चाचा ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', "' ", 'माङ्क ', 'अ ', 'ब ', 'झ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब ', 'झ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'माङ्क ', 'खु ', 'झ ', 'अ ', 'पि ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'झ ', 'पि ', 'खु ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'सम्पर्कीय़ ', 'परिबार ', 'खु ', 'अ ', 'पि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'भाइ ', 'सा ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सा ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'भाइ ', 'शा ', 'बो ', 'शाशु ']
['</s> ', '। ', '- ', '. ', 'र ', 'ी ', 'ा ', 'आ ', 'ि ', 'भ ']
['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', '۔ ']
['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'तिआरि ', 'खाउ ', 'रन् ', 'पर ', 'बना ']
['खा ', 'खाउ ', 'खाइ ', 'ख ', 'खाए ', 'खाइबाकु ', 'पिउ ', 'खेळु ', 'नेउछन्ति ', 'पि ']
['परिबेषण ', 'पर ', 'खाइ ', 'परिब ', 'प ', 'सेबा ', 'खाइबाकु ', 'प्रदान ', 'पि ', 'ब ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', "' "]
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'क ', 'भाइर ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'बड़ ', 'भउणी ', 'क ', "' ", 'भाइर ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'खु ', 'सान ', 'बड़ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'खु ', 'सान ', 'बड़ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'बड़ ', 'परिबार ', 'भउणी ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'पुअ ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सम्पर्कीय़ ', 'सान ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'भा ', 'सान ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्रातृ ', 'नाति ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', "' ", 'बो ', 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', "' ", 'भाइ ', 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', "' ", 'भाइ ', 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['भ ', 'भण ', 'पुत ', 'भा ', 'सम्पर्कीय़ ', 'झ ', 'भउणी ', 'भाइ ', 'न ', 'ब ']
['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'माउ ', 'माआ ', 'दिदि ', 'नाति ', 'द ']
['जेजे ', 'नानी ', 'न ', 'दादी ', "' ", 'दिदि ', 'नाति ', 'द ', 'माउ ', 'माआ ']
['जेजे ', "' ", 'न ', 'दादी ', 'माउ ', 'नानी ', 'द ', 'दिदि ', 'नाति ', 'आइ ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'पिताम ', 'माआ ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकु ', 'ब ']
['जेजे ', 'न ', 'दादी ', 'माउ ', 'पिताम ', 'नाति ', 'दादा ', 'दिदि ', 'पितामह ', 'द ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चाचा ', 'माउ ', 'बापा ', 'खु ']
['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'जेजे ', 'चा ', 'चाचा ', 'आङ्क ', 'आ ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'आ ', 'माङ्क ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'माउ ', 'दादा ', 'माङ्क ', 'सम्पर्कीय़ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चा ', 'चाचा ', 'माङ्क ', 'सम्पर्कीय़ ', 'आङ्क ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माउ ', 'चाचा ', 'माङ्क ', 'जेजे ', 'चा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'माङ्क ', "' ", 'अ ', 'ब ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब ', "' "]
['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'ब ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'खु ', 'अ ', 'पि ', 'झ ']
['माउ ', 'आ ', 'माम ', 'जेजे ', 'माङ्क ', 'अ ', 'ब ', 'पि ', 'खु ', 'झ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'ब ', 'पि ', 'सम्पर्कीय़ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'भाइ ', 'सा ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'सा ', 'शा ']
['</s> ', '" ', '. ', '। ', '- ', ', ', '( ', '| ', "' ", '! ']
['</s> ', '। ', ', ', '. ', '| ', 'मुँ ', 'I ', '- ', '! ', '_ ']
['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', 'I ', '( ', "' "]
['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'तिआरि ', 'खाउ ', 'रन् ', 'खा ', 'बना ']
['खा ', 'खाउ ', 'खाइ ', 'ख ', 'खाए ', 'पिउ ', 'खाइबाकु ', 'नेउछन्ति ', 'खेळु ', 'करुछन्ति ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', '۔ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'क ', 'काका ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'जेजे ', 'भउणी ', 'बड़ ', 'क ', 'सान ', 'भाइर ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'खु ', 'भउणी ', 'बड़ ', 'क ', "' ", 'भाइर ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'सान ', 'खु ', 'बड़ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'सान ', 'खु ', 'बड़ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'बड़ ', 'परिबार ', 'जेजे ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'भा ', 'पु ', "' ", 'सान ', 'नाति ', 'भाग ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'सान ', 'भा ', 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'भ्रातृ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', "' ", 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'भाइ ', 'बो ', 'भाइर ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भा ', 'भउणी ', 'बो ', 'न ', 'ब ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'बो ', 'ब ']
['जेजे ', 'नानी ', 'न ', 'दादी ', "' ", 'माउ ', 'माआ ', 'दिदि ', 'नाति ', 'आइ ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'दिदि ', 'माउ ', 'नाति ', 'माआ ', "' ", 'द ']
['जेजे ', "' ", 'न ', 'दादी ', 'माउ ', 'नानी ', 'दिदि ', 'द ', 'माआ ', 'नाति ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'माउ ', 'नाति ', 'दिदि ', 'दादा ', 'माआ ', 'पिताम ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकु ', 'मात ']
['जेजे ', 'न ', 'दादी ', 'माउ ', 'पिताम ', 'नाति ', 'दादा ', 'दिदि ', 'पितामह ', 'ब ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'द ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'बड़ ', 'नाति ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'दाद ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'चाचा ', 'माउ ', 'दादा ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'चाचा ', 'चा ', 'माउ ', 'आ ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माउ ', 'आ ', 'बापा ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'चाचा ', 'दादा ', 'माउ ', 'सम्पर्कीय़ ', 'बापा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चा ', 'चाचा ', 'माङ्क ', 'सम्पर्कीय़ ', 'जेजे ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माउ ', 'जेजे ', 'चाचा ', 'माङ्क ', 'चा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', "' ", 'अ ', 'ब ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'कुनि ', 'अ ', 'खु ', 'ब ', "' "]
['माउ ', 'माम ', 'जेजे ', 'आ ', "' ", 'माङ्क ', 'खु ', 'अ ', 'कुनि ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'झ ', 'पि ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'पि ', 'झ ', 'खु ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'ब ', 'पि ', 'खु ', 'अ ', 'सम्पर्कीय़ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'बो ', 'भ ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'शा ', 'भाइ ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'भाइ ', 'शा ', 'बो ', 'सा ']
['</s> ', '। ', '| ', '! ', '. ', '" ', ', ', '? ', 'I ', '- ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', '۔ ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '( ', "' "]
['रोषेइ ', 'र ', 'रान् ', 'प्रस्तुत ', 'पका ', 'तिआरि ', 'रन् ', 'खाउ ', 'पर ', 'रान्ना ']
['खा ', 'खाउ ', 'खाइ ', 'खाए ', 'ख ', 'पिउ ', 'नेउछन्ति ', 'खेळु ', 'खाइबाकु ', 'करुछन्ति ']
['परिबेषण ', 'ङ्कु ', 'पर ', 'कु ', '्कु ', 'खाइ ', 'प ', 'परिब ', 'प्रदान ', '्र ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'काका ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'खु ', 'भउणी ', 'बड़ ', 'क ', 'सान ', 'भाइर ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'खु ', 'भउणी ', 'बड़ ', 'क ', "' ", 'भाइर ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'सान ', 'खु ', 'बड़ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'सान ', 'बड़ ', 'खु ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'सम्प ', 'बड़ ', 'भउणी ', 'परिबार ', 'जेजे ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'पुअ ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'सान ', 'भ्र ', 'भा ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'सान ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'सान ', 'भ्रातृ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'भाइ ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', "' ", 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'भाइ ', 'बो ', 'भाइर ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'सान ', 'न ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'बो ', 'न ']
['जेजे ', 'न ', 'नाति ', "' ", 'माउ ', 'दिदि ', 'द ', 'माम ', 'माआ ', 'नानी ']
['जेजे ', 'नाति ', 'न ', 'माउ ', 'दादा ', 'दिदि ', 'दादी ', 'पितामह ', 'नानी ', 'द ']
['जेजे ', 'न ', "' ", 'नाति ', 'माआ ', 'नानी ', 'माउ ', 'दिदि ', 'बड़ ', 'माम ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'ब ', 'द ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'पिता ', 'दाद ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'बापा ', 'भाइ ', 'माउ ', 'बो ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'काक ', 'चाचा ', 'बाप ', 'सम्पर्कीय़ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'दादा ', 'जेजे ', 'बाप ', 'माउ ', 'भाइ ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'खु ', 'अ ', 'माङ्क ', 'आ ', 'झ ', "' "]
['माउ ', 'जेजे ', 'माम ', 'ब ', 'माङ्क ', 'झ ', 'खु ', 'आ ', 'अ ', 'काका ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'खु ', 'माङ्क ', 'बो ', 'भउणी ']
['माउ ', 'जेजे ', 'ब ', 'माम ', 'आ ', 'खु ', 'माङ्क ', 'पि ', 'अ ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'झ ', 'भाइ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'दे ']
['भा ', 'भि ', 'बो ', 'श् ', 'झ ', 'भउणी ', 'ज् ', 'श ', 'भ ', 'शाशु ']
['गाँरे ', 'ग्रामरे ', 'सेइ ', 'सेहि ', 'गाँ ', 'एइ ', 'एहि ', 'टि ', 'त ', 'उक्त ']
['भा ', 'भि ', 'बो ', 'श् ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'बो ', 'नाति ', 'भ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'भ्रातृ ', 'जेजे ', 'बड़ ', 'भण ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'बो ', 'भाइर ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'भउणी ', 'सम्प ', 'सान ', 'बड़ ', 'भण ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', 'पुअ ', 'बो ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'नाति ', 'सम्पर्कीय़ ', 'भ्र ', 'सान ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'भ्र ', 'जणे ', 'नाति ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'बो ', 'झ ', 'भाइ ', 'सान ', 'झि ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'नाति ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'जणे ', 'ब ']
['जेजे ', 'न ', 'नाति ', "' ", 'नानी ', 'माउ ', 'दिदि ', 'माम ', 'माआ ', 'द ']
['जेजे ', 'न ', 'नाति ', 'माउ ', 'दादी ', 'दिदि ', 'नानी ', 'दादा ', 'पिताम ', 'पितामह ']
['जेजे ', 'न ', "' ", 'नाति ', 'नानी ', 'माआ ', 'माउ ', 'दिदि ', 'दादी ', 'माम ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'ठाकुर ', 'ब ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'नाति ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'बापा ', 'भाइ ', 'माउ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'दादा ', 'चाचा ', 'सम्पर्कीय़ ', 'माउ ', 'बाप ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'दादा ', 'बापा ', 'माउ ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'पितृ ', 'माङ्क ', 'दादा ', 'जेजे ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'खु ', 'आ ', 'अ ', "' ", 'माङ्क ', 'बो ', 'झ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'ब ', 'झ ', 'खु ', 'काकी ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'खु ', 'माङ्क ', 'भउणी ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'अ ', 'माङ्क ', 'खु ', 'पि ', 'काकी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'शा ']
['भा ', 'भि ', 'बो ', 'श् ', 'ज् ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शाशु ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शाशु ']
['भा ', 'भि ', 'बो ', 'श् ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'सा ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'बो ', 'नाति ', 'भ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सान ', 'सम्प ', 'बड़ ', 'क ', 'जेजे ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'खु ', 'भाइर ', 'बो ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'क ', 'सान ', 'बड़ ', 'बन्धु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'नाति ', 'भ्र ', 'सम्पर्कीय़ ', 'भा ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भ्र ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'भाग ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'भाइ ', 'सान ', "' "]
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'जणे ', 'सान ']
['जेजे ', 'न ', 'नाति ', "' ", 'माम ', 'माउ ', 'नानी ', 'द ', 'माआ ', 'दिदि ']
['जेजे ', 'न ', 'नाति ', 'माउ ', 'दादी ', 'दादा ', 'दिदि ', 'नानी ', 'पिताम ', 'पितामह ']
['जेजे ', 'न ', "' ", 'नाति ', 'माआ ', 'नानी ', 'माउ ', 'माम ', 'बड़ ', 'दिदि ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'दिदि ', 'मात ', 'दादा ', 'ठाकुर ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'नाति ', 'दाद ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'भाइ ', 'बापा ', 'माउ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'दादा ', 'चाचा ', 'सम्पर्कीय़ ', 'माउ ', 'बाप ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'भाइ ', 'बापा ', 'माउ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'माङ्क ', 'जेजे ', 'दादा ', 'चा ', 'पितृ ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'खु ', 'अ ', "' ", 'आ ', 'माङ्क ', 'झ ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'माङ्क ', 'झ ', 'खु ', 'आ ', 'अ ', 'काका ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'खु ', 'माङ्क ', 'भउणी ', 'बो ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'अ ', 'माङ्क ', 'खु ', 'पि ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भा ', 'भि ', 'बो ', 'श् ', 'भउणी ', 'ज् ', 'झ ', 'श ', 'भ ', 'शाशु ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शाशु ']
['भा ', 'भि ', 'बो ', 'श् ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'सा ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा ']
['भाइ ', 'सम्पर्कीय़ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'बो ', 'नाति ', 'भ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सान ', 'बड़ ', 'जेजे ', 'सम्प ', 'भण ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'भाइर ', 'बो ', 'खु ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'क ', 'सान ', 'बड़ ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'नाति ', 'भ्र ', 'सम्पर्कीय़ ', 'सान ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सान ', 'भा ', "' ", 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भ्र ', 'भा ', 'नाति ', 'सम्पर्कीय़ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'भाइ ', 'सान ', "' "]
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'सान ', 'कन्य़ा ']
['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', "' ", 'माआ ', 'दादी ', 'माउ ', 'द ']
['जेजे ', 'न ', 'नाति ', 'दादी ', 'नानी ', 'दिदि ', 'माउ ', 'पिताम ', 'पितामह ', 'दादा ']
['जेजे ', 'न ', "' ", 'नानी ', 'माआ ', 'नाति ', 'दादी ', 'दिदि ', 'माउ ', 'दादा ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'ब ', 'पिताम ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'पितृ ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'पितृ ', 'बापाङ्क ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'दादा ', 'चाचा ', 'बापा ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'दादा ', 'चाचा ', 'सम्पर्कीय़ ', 'माउ ', 'बाप ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'दादा ', 'भाइ ', 'चाचा ', 'काक ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'माङ्क ', 'दादा ', 'सम्पर्कीय़ ', 'जेजे ', 'चा ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'खु ', 'आ ', 'अ ', "' ", 'कुनि ', 'झ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'अ ', 'ब ', 'झ ', 'खु ', 'काकी ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'अ ', 'खु ', 'भउणी ', 'कुनि ']
['माउ ', 'जेजे ', 'ब ', 'माम ', 'माङ्क ', 'आ ', 'खु ', 'अ ', 'झ ', 'पि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'सा ', 'दे ']
['</s> ', '" ', '. ', '। ', '- ', ', ', '( ', '| ', "' ", '! ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'झ ', 'ज् ', 'श ', 'भ ', 'सा ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'खु ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'सान ', 'भण ', 'बड़ ', 'क ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'भाइर ', 'खु ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'क ', 'बड़ ', 'सान ', 'बन्धु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', "' ", 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'ज् ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'भ्र ', 'सम्पर्कीय़ ', 'भाग ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', "' ", 'भाइ ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'सम्पर्कीय़ ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'झि ', 'भाइ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'ब ', 'जणे ']
['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'नाति ', 'दिदि ', 'माआ ', 'माउ ', 'द ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'पिताम ', 'मात ', 'माउ ', 'दिदि ', 'पितामह ']
['जेजे ', 'न ', 'नानी ', "' ", 'दादी ', 'नाति ', 'माआ ', 'दिदि ', 'माउ ', 'ठाकु ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'नाति ', 'दिदि ', 'माउ ', 'पिताम ', 'मात ', 'ठाकु ']
['जेजे ', 'पितामह ', 'दादा ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पितृ ', 'पिता ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', "' ", 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'दाद ', 'नाति ', 'पिता ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'आङ्क ', 'चा ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'चा ', 'सम्पर्कीय़ ', 'दादा ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'माउ ', 'चा ', 'बापा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'माङ्क ', 'चा ', 'सम्पर्कीय़ ', 'दादा ', 'पितृ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'कुनि ', 'अ ', "' ", 'माङ्क ', 'खु ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'अ ', 'आ ', 'ब ', 'काकी ', 'कुनि ', 'झ ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'कुनि ', 'माङ्क ', 'खु ', 'भउणी ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'ब ', 'माङ्क ', 'अ ', 'काकी ', 'खु ', 'पि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'श ', 'भ ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'श ', 'झ ', 'भ ', 'सा ']
['रे ', '्रे ', 'र ', 'रे ', 'टिरे ', 'कु ', 'मध्य़रे ', 'ेरे ', 'टि ', 'ठारे ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'श ', 'झ ', 'सा ', 'भ ']
['भा ', 'भि ', 'श् ', 'भउणी ', 'ज् ', 'बो ', 'झ ', 'श ', 'शा ', 'भ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'खु ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'क ', 'भ्र ', 'खु ', 'सान ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'खु ', 'जेजे ', 'सान ', 'भाइर ', 'बड़ ', "' "]
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'भउणी ', 'सान ', 'बन्धु ', 'बड़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'भ्र ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'भ्र ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'भ्रातृ ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भा ', 'सान ', 'भ्र ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भ्र ', 'सम्पर्कीय़ ', 'नाति ', 'भाग ', 'भा ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'भाइ ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भा ', 'भउणी ', 'बो ', 'न ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', "' ", 'भा ', 'भाइ ', 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'कन्य़ा ', 'सान ']
['जेजे ', 'न ', 'नानी ', 'नाति ', 'दिदि ', 'दादी ', "' ", 'माउ ', 'माआ ', 'द ']
['जेजे ', 'न ', 'नानी ', 'नाति ', 'दादी ', 'मात ', 'माउ ', 'पिताम ', 'दिदि ', 'आइ ']
['जेजे ', 'न ', 'नानी ', "' ", 'नाति ', 'दादी ', 'दिदि ', 'माउ ', 'आइ ', 'माआ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'ब ', 'ठाकुर ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'नाति ', 'पिता ', 'पितृ ']
['जेजे ', 'पितामह ', 'दादा ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'बड़ ', 'दाद ', 'पिता ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'चाचा ', 'खु ', 'आङ्क ', 'बापा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'जेजे ', 'दादा ', 'चाचा ', 'माउ ', 'भाइ ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'चा ', 'खु ', 'दादा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'सम्पर्कीय़ ', 'दादा ', 'जेजे ', 'बाप ', 'भाइ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'अ ', 'माङ्क ', "' ", 'कुनि ', 'झ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'खु ', 'ब ', 'झ ', 'काकी ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'खु ', 'अ ', 'माङ्क ', 'कुनि ', 'झ ']
['माउ ', 'जेजे ', 'ब ', 'माम ', 'खु ', 'आ ', 'माङ्क ', 'झ ', 'अ ', 'पि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शा ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'श ', 'भ ', 'शा ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'झ ', 'भउणी ', 'श ', 'शा ', 'भ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'भउणी ', 'खु ', 'सान ', 'भण ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'खु ', 'भउणी ', 'जेजे ', 'सम्प ', 'बड़ ', 'भाइर ', 'सान ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'सम्प ', 'भउणी ', 'सान ', 'बड़ ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'ज् ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'सम्पर्कीय़ ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भ्र ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'भाग ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', "' ", 'बो ', 'भाइ ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', "' ", 'बो ', 'भाइ ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['जेजे ', 'न ', 'नानी ', 'नाति ', 'दिदि ', 'दादी ', "' ", 'माउ ', 'माआ ', 'आइ ']
['जेजे ', 'न ', 'नाति ', 'दादी ', 'नानी ', 'माउ ', 'पिताम ', 'पितामह ', 'दिदि ', 'मात ']
['जेजे ', 'न ', 'नानी ', 'नाति ', "' ", 'दादी ', 'दिदि ', 'माउ ', 'आइ ', 'माआ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'माउ ', 'दिदि ', 'दादा ', 'पितामह ', 'पिताम ']
['जेजे ', 'पितामह ', 'दादा ', 'द ', 'बापा ', "' ", 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'नाति ', 'पिता ', 'पितृ ']
['जेजे ', 'पितामह ', 'दादा ', 'द ', "' ", 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'दाद ', 'नाति ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'चाचा ', 'दादा ', 'बापा ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'चाचा ', 'माउ ', 'भाइ ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'दादा ', 'बापा ', 'भाइ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'दादा ', 'सम्पर्कीय़ ', 'जेजे ', 'माउ ', 'बाप ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'माङ्क ', 'अ ', "' ", 'कुनि ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'माङ्क ', 'खु ', 'आ ', 'झ ', 'अ ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'खु ', 'अ ', 'माङ्क ', 'कुनि ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'खु ', 'आ ', 'माङ्क ', 'अ ', 'झ ', 'पि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भा ', 'भि ', 'बो ', 'श् ', 'ज् ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शा ']
['परे ', 'प्रे ', 'पर ', 'प् ', 'बरे ', 'प्र ', 'पुररे ', 'ापरे ', 'प ', 'परु ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'श ', 'भ ', 'शा ']
['पारादीप ', 'पार ', 'प्रदीप ', 'जणक ', 'माने ', 'पारा ', 'पार्ब ', ', ', 'टि ', 'आ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'भउणी ', 'भण ', 'खु ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'खु ', 'जेजे ', 'सम्प ', 'भाइर ', 'बड़ ', 'सान ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'सम्प ', 'भउणी ', 'सान ', 'बड़ ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भ्र ', 'नाति ', 'भा ', 'भ्रातृ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सम्पर्कीय़ ', 'सान ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'भ्र ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', "' ", 'बो ', 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भउणी ', 'भाइ ', 'बो ', 'न ', 'भग ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'भाब ']
['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', 'माउ ', 'दादी ', "' ", 'माआ ', 'दादा ']
['जेजे ', 'न ', 'नाति ', 'दादी ', 'पिताम ', 'दादा ', 'पितामह ', 'माउ ', 'नानी ', 'दिदि ']
['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'दादी ', 'माउ ', 'दिदि ', 'माआ ', 'बड़ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'ठाकुर ', 'द ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'पिता ', 'दाद ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'बापा ', 'जेजे ', 'चाचा ', 'सम्पर्कीय़ ', 'बाप ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', "' ", 'माङ्क ', 'अ ', 'कुनि ', 'काका ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'खु ', 'काका ', 'ब ', 'सम्पर्कीय़ ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'खु ', 'माङ्क ', 'भउणी ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'खु ', 'माङ्क ', 'अ ', 'काकी ', 'काका ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'शा ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "]
['ररे ', 'र ', 'रर ', 'ररु ', 'रे ', 'रम ', 'रः ', 'रकु ', 'ालरे ', 'रन ']
['। ', '| ', '</s> ', '. ', ', ', '" ', 'I ', 'बोलि ', '! ', 'ि ']
['र ', 'रकु ', 'ररु ', 'र् ', 'ररे ', 'रर ', 'र्कु ', 'रक ', 'ार ', 'रम ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'भउणी ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'भ्रातृ ', 'बड़ ', 'सान ', 'जेजे ', 'भण ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'भ्रातृ ', 'क ', 'बड़ ', 'सान ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', "' ", 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'सम्पर्कीय़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'सान ', 'नाति ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भाइ ', 'भउणी ', 'भा ', 'झ ', 'सम्पर्कीय़ ', 'बो ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', "' ", 'झ ', 'बो ', 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'माआ ', 'माउ ', 'दिदि ', 'बड़ ', 'दादा ']
['जेजे ', 'नाति ', 'न ', 'दादी ', 'दादा ', 'पिताम ', 'पितामह ', 'माउ ', 'दिदि ', 'नानी ']
['जेजे ', 'न ', 'नाति ', "' ", 'माआ ', 'नानी ', 'माउ ', 'बड़ ', 'दादा ', 'दिदि ']
['जेजे ', 'न ', 'दादी ', 'नाति ', 'नानी ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'ठाकुर ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'पिता ', 'नाति ', 'दाद ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'काक ', 'भाइ ', 'बापा ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'बड़ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'बाप ', 'चाचा ', 'बापा ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', "' ", 'खु ', 'आ ', 'अ ', 'बो ', 'माङ्क ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'ब ', 'खु ', 'भउणी ', 'अ ', 'बड़ ', 'काका ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'अ ', 'भउणी ', 'खु ', 'बो ', 'माङ्क ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'खु ', 'आ ', 'माङ्क ', 'अ ', 'झ ', 'काकी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'बो ', 'श ', 'भाइ ', 'शा ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', "' "]
['ओड़िशारे ', 'ओड़िशा ', 'ओड़िश ', 'ओड़ि ', 'ओड़िशार ', 'ओडिश ', 'ओडिशार ', 'ओडिशा ', 'दिल्लीरे ', 'ओड़िआ ']
['। ', '| ', '. ', '</s> ', ', ', '" ', 'I ', 'बोलि ', 'ि ', '! ']
['ओड़िशा ', 'ओडिशा ', 'ओड़िश ', 'उड़ि ', 'ओड़ि ', 'माने ', 'ओड़िशार ', 'पुणि ', 'ओडिसा ', 'चाल ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'खु ', 'भाइर ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'सान ', 'बड़ ', 'जेजे ', 'क ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'खु ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'भ्रातृ ', 'बड़ ', 'सान ', 'पुत ', 'भण ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'नाति ', 'सान ', 'भ्र ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'नाति ', 'सान ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भउणी ', 'भा ', 'बो ', 'नाति ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', "' ", 'भा ', 'बो ', 'झ ', 'भाइ ', 'झि ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', 'बो ', 'न ', 'सान ']
['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', 'माआ ', 'दादी ', "' ", 'माउ ', 'दादा ']
['जेजे ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'पितामह ', 'नानी ', 'दादा ', 'दिदि ', 'माउ ']
['जेजे ', 'न ', 'नाति ', 'माआ ', 'नानी ', "' ", 'दादी ', 'दिदि ', 'दादा ', 'माउ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'पितामह ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'द ', 'पितृ ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'दादा ', 'बापा ', 'भाइ ', 'काक ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'चाचा ', 'भाइ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'चाचा ', 'काक ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'चाचा ', 'बापा ', 'सम्पर्कीय़ ', 'बाप ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'भउणी ', "' ", 'काका ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'अ ', 'ब ', 'भउणी ', 'खु ', 'काकी ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'माङ्क ', 'अ ', 'भउणी ', 'खु ', 'बो ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'काकी ', 'झ ']
['भि ', 'भा ', 'श् ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'बो ', 'सा ', 'भाइर ']
['भि ', 'भा ', 'श् ', 'ज् ', 'भ ', 'बो ', 'सा ', 'श ', 'भाइ ', 'भाइर ']
['भि ', 'भा ', 'श् ', 'ज् ', 'भ ', 'सा ', 'भाइ ', 'श ', 'बो ', 'भाइर ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'भ ', 'श ', 'सा ']
['भा ', 'भि ', 'श् ', 'ज् ', 'बो ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'भ ', 'श ', 'सा ']
['भा ', 'भि ', 'श् ', 'ज् ', 'भउणी ', 'बो ', 'झ ', 'श ', 'भ ', 'शा ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'खु ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'बड़ ', 'सान ', 'भण ', 'जेजे ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'खु ', 'बो ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'क ', 'सान ', 'भण ', 'बड़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'भा ', 'पु ', 'नाति ', 'सान ', "' ", 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'भ्र ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'भा ', 'ज् ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', 'भाइ ', "' ", 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भउणी ', 'भाइ ', 'बो ', 'नाति ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'न ', 'भग ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'झिअ ']
['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', 'दादी ', 'माउ ', "' ", 'द ', 'माआ ']
['जेजे ', 'न ', 'नाति ', 'नानी ', 'दादी ', 'पिताम ', 'माउ ', 'दादा ', 'मात ', 'पितामह ']
['जेजे ', 'न ', 'नानी ', 'नाति ', "' ", 'दादी ', 'दिदि ', 'माउ ', 'माआ ', 'दादा ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'ठाकुर ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'पिता ', 'बापाङ्क ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'सम्पर्कीय़ ', 'दादा ', 'बापा ', 'चाचा ', 'भाइ ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'बापा ', 'चाचा ', 'सम्पर्कीय़ ', 'बाप ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'माङ्क ', 'अ ', "' ", 'कुनि ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'खु ', 'ब ', 'काकी ', 'झ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'खु ', 'माङ्क ', 'भउणी ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'खु ', 'माङ्क ', 'अ ', 'काकी ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'सा ', 'श ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'भउणी ', 'झ ', 'श ', 'भ ', 'शा ']
['रे ', '्रे ', 'रे ', 'र ', 'ठारे ', 'ठारे ', '्र ', '् ', 'अछन्ति ', 'ेरे ']
['</s> ', '। ', '. ', '" ', '| ', '- ', ', ', 'I ', '۔ ', '᱾ ']
['ाबाद ', 'ाबाद् ', 'बाद ', 'ाब ', 'ाबादे ', 'ाबादी ', 'ावाद ', 'बाद् ', 'ꯕꯥ ', 'آباد ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'भउणी ', 'खु ', 'बड़ ', 'सान ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'क ', 'सान ', 'जेजे ', 'खु ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'सान ', 'भाइर ', 'सम्प ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'खु ', 'सान ', 'बड़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'भ्र ', 'पु ', 'नाति ', 'भा ', 'ज् ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'सम्पर्कीय़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', "' ", 'भाइ ', 'न ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'बो ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['जेजे ', 'न ', 'नाति ', 'नानी ', 'दादी ', 'दिदि ', "' ", 'माउ ', 'माआ ', 'दादा ']
['जेजे ', 'न ', 'नाति ', 'दादी ', 'पिताम ', 'पितामह ', 'दादा ', 'नानी ', 'माउ ', 'दिदि ']
['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'दादी ', 'दिदि ', 'माआ ', 'माउ ', 'दादा ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'पितामह ', 'ठाकुर ']
['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'बड़ ', 'द ', 'पिता ', 'नाति ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'दाद ', 'बापाङ्क ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'काक ', 'बापा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'बापा ', 'सम्पर्कीय़ ', 'चाचा ', 'बाप ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', 'माङ्क ', "' ", 'अ ', 'काका ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'अ ', 'खु ', 'ब ', 'काकी ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'खु ', 'माङ्क ', 'अ ', 'भउणी ', 'काका ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'काकी ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'सा ', 'बो ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'सा ', 'श ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'भाइ ', 'बो ', 'शा ']
['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'भउणी ', 'झ ', 'भ ', 'श ', 'शा ']
['रे ', '्रे ', 'रे ', 'ठारे ', 'अछन्ति ', '्र ', 'ठारे ', 'रु ', 'ारे ', 'िरे ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'झ ', 'भ ', 'श ', 'शा ']
['गुजराट ', 'गुजुर ', 'गुजरा ', 'गुज ', 'गुजरात ', 'गुजरात् ', ', ', 'गुजर ', 'गोआ ', 'माने ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'सान ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'क ', 'सान ', 'जेजे ', 'बड़ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'भाइर ', 'सान ', 'सम्प ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'सम्प ', 'क ', 'भउणी ', 'बड़ ', 'सान ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', 'सम्पर्कीय़ ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'भ्र ', 'ज् ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'नाति ', 'सम्पर्कीय़ ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', 'भाइ ', "' ", 'न ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'न ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['जेजे ', 'न ', 'नाति ', "' ", 'माआ ', 'नानी ', 'माउ ', 'दिदि ', 'दादा ', 'बड़ ']
['जेजे ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'पितामह ', 'नानी ', 'दादा ', 'माउ ', 'दिदि ']
['जेजे ', "' ", 'न ', 'माआ ', 'नाति ', 'नानी ', 'माउ ', 'बड़ ', 'दादा ', 'दादी ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'पिताम ', 'द ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'द ', 'बड़ ', 'पितृ ', 'नाति ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'पिता ', 'नाति ', 'दाद ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'काक ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'काक ', 'सम्पर्कीय़ ', 'बापा ', 'चाचा ', 'भाइ ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'भाइ ', 'दादा ', 'काक ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'दादा ', 'जेजे ', 'बापा ', 'बाप ', 'भाइ ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'खु ', 'काका ', 'भउणी ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'ब ', 'आ ', 'भउणी ', 'खु ', 'काका ', 'अ ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'भउणी ', 'अ ', 'काका ', 'खु ']
['माउ ', 'जेजे ', 'ब ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'अ ', 'काकी ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सा ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'भाइर ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', "' ", '۔ ']
['ारे ', 'रे ', 'ाकु ', 'ास्थित ', 'ारु ', 'ाते ', 'िआरे ', 'ाय़ ', 'ीय़ ', 'िरे ']
['</s> ', '। ', '. ', '" ', '| ', '- ', ', ', 'I ', '۔ ', '᱾ ']
['भा ', 'भि ', 'श् ', 'ज् ', 'भउणी ', 'बो ', 'झ ', 'श ', 'शा ', 'भ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'नाति ', 'खु ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'सान ', 'क ', 'बड़ ', 'भण ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'बड़ ', 'सान ', 'नाति ', 'जेजे ', 'भ्रातृ ', 'भाइर ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'क ', 'भउणी ', 'सम्प ', 'बड़ ', 'सान ', 'भण ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'भ्र ', 'नाति ', 'सम्पर्कीय़ ', 'पु ', 'ज् ', 'सान ']
['पुत ', 'भण ', 'भाइ ', 'भ ', "' ", 'पु ', 'सान ', 'नाति ', 'भा ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'भ्र ', 'नाति ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भउणी ', 'भा ', 'बो ', 'नाति ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', "' ", 'भा ', 'झ ', 'भाइ ', 'बो ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['जेजे ', 'माआ ', 'न ', 'नाति ', "' ", 'नानी ', 'दादा ', 'माम ', 'माउ ', 'बड़ ']
['जेजे ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'दादा ', 'नानी ', 'पितामह ', 'माउ ', 'माआ ']
['जेजे ', 'माआ ', "' ", 'न ', 'नाति ', 'दादा ', 'बड़ ', 'नानी ', 'माउ ', 'माम ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'पिताम ', 'पितामह ']
['जेजे ', 'बापा ', 'दादा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'बाप ']
['जेजे ', 'बापा ', 'दादा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'चाचा ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'काक ', 'बापा ', 'चाचा ', 'सम्पर्कीय़ ', 'भाइ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'चाचा ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'दादा ', 'जेजे ', 'बापा ', 'भाइ ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', "' ", 'भउणी ', 'बो ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'अ ', 'काकी ', 'भउणी ', 'ब ', 'काका ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'काका ', 'भउणी ', 'अ ', 'बो ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'अ ', 'खु ', 'काकी ', 'पि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'भाइ ', 'भाइर ', 'श ', 'सा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'बो ', 'भाइ ', 'श ', 'भाइर ', 'सा ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'भाइ ', 'भाइर ', 'सा ', 'श ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'भाइ ', 'बो ', 'सा ', 'श ', 'भाब ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', "' ", '۔ ']
['रे ', '्रे ', 'रे ', 'ठारे ', 'कु ', '्र ', 'मसिहारे ', 'ेरे ', 'ठारे ', 'अछन्ति ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "]
['य़ुरोप ', 'य़ुरो ', 'इउरोप ', ', ', 'य़ ', 'युरोप ', 'इउरो ', '- ', 'मध्य़ ', 'आ ']
['भाइ ', 'सम्पर्कीय़ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'भाइर ', 'बो ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'बड़ ', 'सान ', 'जेजे ', 'क ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'बड़ ', 'जेजे ', 'सान ', 'नाति ', 'भाइर ', 'भ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'क ', 'भ्रातृ ', 'सम्प ', 'बड़ ', 'सान ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सान ', 'भा ', 'नाति ', "' ", 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'भ्र ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'सान ', 'ज् ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'सान ', "' ", 'भा ', 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'भ्र ', 'नाति ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'बो ', 'झ ', "' ", 'सान ']
['भ ', 'भण ', 'पुत ', 'भाइ ', 'भउणी ', 'झ ', 'भा ', 'बो ', 'न ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'झ ', 'भा ', 'बो ', 'न ', 'बड़ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['जेजे ', 'न ', 'नाति ', 'नानी ', 'द ', 'माआ ', 'बड़ ', 'दादा ', 'माउ ', "' "]
['जेजे ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'दादा ', 'नानी ', 'पितामह ', 'माउ ', 'द ']
['जेजे ', 'न ', 'नाति ', 'माआ ', "' ", 'नानी ', 'बड़ ', 'द ', 'दादा ', 'माउ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'द ', 'माउ ', 'दादा ', 'पिताम ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'बड़ ', 'द ', 'पिता ', 'नाति ', 'पितृ ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'बड़ ', 'दाद ', 'नाति ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'भाइ ', 'दादा ', 'माउ ', 'काक ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'काक ', 'सम्पर्कीय़ ', 'चाचा ', 'भाइ ', 'बापा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'भाइ ', 'बापा ', 'दादा ', 'माउ ', 'बड़ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'बापा ', 'माउ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'भउणी ', 'खु ', 'काका ', 'बो ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'काकी ', 'ब ', 'भउणी ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'भउणी ', "' ", 'अ ', 'माङ्क ', 'बो ', 'काका ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'अ ', 'खु ', 'काकी ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'भाइ ', 'सा ', 'बो ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'सा ', 'भ ', 'श ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'सा ', 'श ', 'भाइ ', 'बो ', 'शा ']
['</s> ', '। ', '. ', '" ', '- ', ', ', '| ', "' ", 'I ', '( ']
['आमेरिकारे ', 'आमेरिक ', 'आमेरिका ', 'आमेरिकीय़ ', 'आमेरिकार ', '- ', 'रे ', 'य़ुरोप ', 'आफ्रिक ', 'युक्तराष्ट्र ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "]
['आमेरिका ', 'आमेरिक ', 'आमेरिकीय़ ', '- ', 'आमेरिकारे ', 'आ ', 'अमेरिका ', 'आमेरिकार ', 'आफ्रिका ', 'युक्तराष्ट्र ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'नाति ', 'खु ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'क ', 'सम्प ', 'बड़ ', 'सान ', 'जेजे ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'नाति ', 'बो ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'भ्रातृ ', 'भउणी ', 'सम्प ', 'बड़ ', 'खु ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'नाति ', 'भ्र ', 'पु ', 'ज् ', 'सान ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'सान ', 'नाति ', 'भा ', "' ", 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सान ', "' "]
['भ ', 'भण ', 'पुत ', 'झ ', 'भाइ ', 'भउणी ', 'भा ', 'न ', 'बो ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'बो ', "' ", 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'बो ', 'ब ']
['जेजे ', 'न ', 'नाति ', 'माआ ', "' ", 'नानी ', 'माउ ', 'दादा ', 'बड़ ', 'माम ']
['जेजे ', 'न ', 'नाति ', 'दादा ', 'पिताम ', 'दादी ', 'माउ ', 'पितामह ', 'नानी ', 'बड़ ']
['जेजे ', 'न ', "' ", 'नाति ', 'माआ ', 'दादा ', 'माउ ', 'बड़ ', 'नानी ', 'दादी ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'पितामह ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'काक ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'बड़ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'चाचा ', 'जेजे ', 'बापा ', 'माउ ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', "' ", 'अ ', 'काका ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'ब ', 'खु ', 'काका ', 'अ ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', "' ", 'आ ', 'माङ्क ', 'अ ', 'भउणी ', 'खु ', 'काका ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'खु ', 'अ ', 'काकी ', 'पि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर ']
['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'बो ', 'भाइ ', 'श ', 'सा ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'भाइ ', 'सा ', 'श ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'श ', 'भाइर ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "]
['रे ', 'रे ', 'अछन्ति ', '्रे ', 'ठारे ', 'ठारे ', 'रहिछन्ति ', 'ते ', 'मसिहारे ', 'रु ']
['</s> ', '। ', '. ', '" ', '| ', '- ', ', ', 'I ', '۔ ', '᱾ ']
['अष्ट्रेलिआ ', 'अष्ट्रेल ', 'अष्ट्र ', 'अस्ट्रेलिय़ा ', 'अस्ट्रेलिया ', 'आ ', 'आस्ट्रेलिया ', 'जणक ', '- ', 'ऑस्ट्रेलिया ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'खु ', 'भाइर ', 'बो ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'सान ', 'बड़ ', 'सम्प ', 'क ', 'जेजे ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'खु ', 'बो ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'बड़ ', 'क ', 'भ्रातृ ', 'सान ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', "' ", 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'नाति ', 'भ्र ', 'सम्पर्कीय़ ', 'पु ', 'ज् ', 'सान ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', "' ", 'नाति ', 'सान ', 'भा ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'भ्र ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'भाइ ', "' ", 'सान ']
['भ ', 'भण ', 'पुत ', 'भाइ ', 'झ ', 'भउणी ', 'भा ', 'बो ', 'न ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', "' ", 'बो ', 'भाइ ', 'झ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['जेजे ', 'न ', 'नाति ', 'नानी ', 'दिदि ', "' ", 'माउ ', 'दादी ', 'द ', 'माआ ']
['जेजे ', 'न ', 'नाति ', 'दादी ', 'दादा ', 'पिताम ', 'माउ ', 'नानी ', 'पितामह ', 'दिदि ']
['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'दादी ', 'माउ ', 'दिदि ', 'माआ ', 'द ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'ठाकुर ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'दाद ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'काक ', 'दादा ', 'माउ ', 'भाइ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'काक ', 'बापा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'काक ', 'दादा ', 'माउ ', 'भाइ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'सम्पर्कीय़ ', 'जेजे ', 'बापा ', 'चाचा ', 'बाप ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', "' ", 'माङ्क ', 'अ ', 'बो ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'ब ', 'अ ', 'काका ', 'खु ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'माङ्क ', 'खु ', 'भउणी ', 'बो ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'ब ', 'माङ्क ', 'अ ', 'खु ', 'काकी ', 'काका ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'सा ', 'श ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'शा ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "]
['रे ', 'रे ', 'र ', '्रे ', 'ठारे ', 'ठारे ', 'अछन्ति ', 'स्थित ', 'मसिहारे ', 'ते ']
['</s> ', '। ', '. ', '" ', '| ', '- ', ', ', 'I ', '۔ ', '᱾ ']
['बेङ्गालुरु ', 'बाङ्ग ', 'बेङ्ग ', 'बे ', 'बेङ्गल ', 'जणक ', 'टि ', 'बेंग ', 'बे ', ', ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'बो ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'भ्रातृ ', 'क ', 'सम्प ', 'सान ', 'बड़ ', 'जेजे ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'बो ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'क ', 'बड़ ', 'भ्रातृ ', 'खु ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', "' ", 'भ्र ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'सान ', 'नाति ', 'सम्पर्कीय़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', 'भाइ ', "' ", 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', "' ", 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['जेजे ', 'न ', 'नाति ', 'नानी ', "' ", 'दिदि ', 'माउ ', 'माआ ', 'दादी ', 'द ']
['जेजे ', 'न ', 'नाति ', 'दादी ', 'दादा ', 'पिताम ', 'माउ ', 'नानी ', 'पितामह ', 'दिदि ']
['जेजे ', 'न ', "' ", 'नाति ', 'नानी ', 'दादी ', 'दिदि ', 'माआ ', 'माउ ', 'बड़ ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ', 'ठाकुर ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'पितृ ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बड़ ', 'दाद ', 'नाति ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'दादा ', 'सम्पर्कीय़ ', 'चाचा ', 'बापा ', 'भाइ ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'चाचा ', 'जेजे ', 'बापा ', 'बाप ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'खु ', "' ", 'अ ', 'माङ्क ', 'काका ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'ब ', 'अ ', 'काका ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'खु ', 'माङ्क ', 'काका ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'खु ', 'माङ्क ', 'अ ', 'पि ', 'झ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'शा ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', "' ", '۔ ']
['ारे ', 'रे ', 'ाकु ', 'ार ', 'ाय़ ', 'ारु ', 'ास्थित ', 'ामे ', 'िरे ', 'ाले ']
['</s> ', '। ', '. ', '" ', '- ', '| ', ', ', 'I ', '۔ ', '᱾ ']
['कोलकाता ', 'कोलकात ', 'कलिकता ', 'कोलक ', 'कलकाता ', 'कोल्क ', 'जणक ', 'कलकत्ता ', ', ', 'कलिक ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', 'काका ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भ्रातृ ', 'भउणी ', 'क ', 'सम्प ', 'सान ', 'बड़ ', 'जेजे ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'भाइर ', "' "]
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'बड़ ', 'सान ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'नाति ', 'सान ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भ्र ', 'नाति ', 'भा ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'भा ', 'सान ', 'नाति ', 'सम्पर्कीय़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', "' ", 'झ ', 'बो ', 'भाइ ', 'झि ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'बो ', 'न ', 'ब ']
['जेजे ', 'नानी ', 'न ', "' ", 'माआ ', 'नाति ', 'दिदि ', 'माउ ', 'दादी ', 'द ']
['जेजे ', 'स् ', 'पिताम ', 'माआ ', 'दादी ', 'द ', 'नानी ', 'मा ', 'अ ', 'मात ']
['जेजे ', 'न ', 'माआ ', 'द ', 'नानी ', "' ", 'दिदि ', 'माम ', 'नाति ', 'माउ ']
['जेजे ', 'न ', 'दादी ', 'नाति ', 'दादा ', 'द ', 'दिदि ', 'माउ ', 'नानी ', 'माआ ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'माआ ', 'दिदि ', 'दादा ', 'आइ ', 'माउ ', 'द ']
['जेजे ', 'पाइँ ', 'दादी ', 'दादा ', 'न ', 'नाति ', 'माआ ', 'दिदि ', 'पिताम ', 'नानी ']
['जेजे ', 'नानी ', 'दादी ', 'न ', 'दिदि ', 'नाति ', 'आइ ', 'दादा ', 'द ', 'माउ ']
['जेजे ', 'दादा ', 'द ', 'बापा ', 'पितामह ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'स् ', 'पिताम ', 'दादा ', 'बापा ', 'पितामह ', 'पिता ', 'द ', 'बापाङ्क ', 'बड़ ']
['जेजे ', 'दादा ', 'बापा ', 'द ', 'पितामह ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'द ', 'बापा ', 'पितामह ', 'बापाङ्क ', 'पिताम ', 'दाद ', 'बड़ ', "' "]
['जेजे ', 'पाइँ ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'पिताम ', 'बापा ', 'दाद ', 'बड़ ', 'ठाकुर ', 'पिता ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'काक ', 'चाचा ', 'चा ', 'माउ ', 'दादा ']
['माम ', 'स् ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'श् ', 'जेजे ', 'बाप ', 'पिता ', 'बापा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'दादा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'चाचा ', 'बाप ']
['माम ', 'काका ', 'मामा ', 'काक ', 'माङ्क ', 'माउ ', 'जेजे ', "' ", 'चाचा ', 'चा ']
['माम ', 'काका ', 'पाइँ ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'बापा ', 'बाप ', 'दादा ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'चा ', 'आङ्क ', 'जेजे ', 'दादा ', 'माउ ']
['माउ ', 'जेजे ', 'माम ', 'अ ', "' ", 'माङ्क ', 'आ ', 'बो ', 'कुनि ', 'झ ']
['माउ ', 'जेजे ', 'अ ', 'स् ', 'माम ', 'आ ', 'माङ्क ', 'ब ', 'सम्पर्कीय़ ', 'माआ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'ब ', 'बो ', 'माङ्क ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'ब ', 'आ ', 'अ ', 'माङ्क ', 'काका ', 'खु ', 'बो ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'मा ', 'पि ', 'खु ', "' ", 'कुनि ']
['माउ ', 'पाइँ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', 'ब ', 'मा ', 'बाप ']
['माउ ', 'आ ', 'जेजे ', 'माम ', 'अ ', 'माङ्क ', 'आन् ', 'ब ', 'खु ', 'मह ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'स् ', 'सा ', 'शा ', 'भ ', 'भाइ ', 'श ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'सा ', 'भ ', 'श ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'सा ', 'श ', 'भाइ ', 'शा ']
['भि ', 'ज् ', 'श् ', 'सा ', 'भा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'शाशु ']
['भि ', 'श् ', 'भा ', 'ज् ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'भाब ']
['भा ', 'भि ', 'श् ', 'बो ', 'भउणी ', 'ज् ', 'श ', 'झ ', 'भ ', 'शाशु ']
['समस्य़ा ', 'एक ', 'असुबिधा ', 'किछि ', 'कौणसि ', 'समस्य़ ', 'प्रश्न ', 'समस्या ', 'गोटिए ', 'सेमानङ्क ']
['। ', 'ब ', '. ', 'ि ', '</s> ', 'द ', '| ', 'ँ ', 'छि ', 'ए ']
['पाखकु ', 'निकटकु ', 'पाखरे ', 'निकटरे ', 'घरकु ', 'आड़कु ', 'सह ', 'निकटरु ', 'पाख ', 'साङ्गरे ']
['</s> ', '. ', '। ', '" ', "' ", 'मुँ ', '- ', 'मो ', '! ', 'I ']
['िबाकु ', 'िबारे ', 'िबार ', 'िकि ', 'ाइबाकु ', 'िबे ', 'िले ', 'िय ', 'िला ', 'िबारु ']
['</s> ', '। ', '" ', '. ', '| ', "' ", '- ', ', ', 'I ', '۔ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'बो ', 'भाइर ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'स् ', 'माम ', 'भाइर ', 'जेजे ', 'क ', 'भ्रातृ ', 'सान ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'जेजे ', 'बड़ ', 'भउणी ', 'सान ', 'भाइर ', 'खु ', 'बो ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'क ', 'बड़ ', 'भउणी ', 'सान ', 'जेजे ', 'सम्प ', 'भ्रातृ ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'क ', 'खु ', 'सान ', 'भाइर ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'पाइँ ', 'बड़ ', 'जेजे ', 'सान ', 'क ', 'सम्प ', 'भउणी ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'क ', 'सम्प ', 'खु ', 'जेजे ', 'सान ', 'भ्रातृ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', "' ", 'पुअ ']
['पुत ', 'भण ', 'भ ', 'स् ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भ्र ', 'ज् ', 'भाग ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'नाति ', 'पुअ ', "' "]
['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'सान ', 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'नाति ', 'सान ', 'पुअ ', 'सम्पर्कीय़ ']
['पुत ', 'भण ', 'पाइँ ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'पुअ ', 'नाति ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'सान ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'सान ', "' ", 'भाइ ']
['भ ', 'भण ', 'पुत ', 'भाइ ', 'भा ', 'स् ', 'भउणी ', 'सम्पर्कीय़ ', 'झ ', 'भाब ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', 'भाइ ', 'झि ', "' "]
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'बो ', 'ब ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'झ ', 'बो ', 'भाइ ', 'न ', 'ब ']
['भ ', 'भण ', 'पाइँ ', 'पुत ', 'भाइ ', 'झ ', 'भउणी ', 'बो ', 'सम्पर्कीय़ ', 'भा ']
['भ ', 'भण ', 'पुत ', 'भा ', 'भउणी ', 'भाइ ', 'झ ', 'बो ', 'भाब ', 'न ']
['जेजे ', 'न ', 'नाति ', 'दादी ', 'दिदि ', 'माआ ', 'नानी ', 'माउ ', "' ", 'दादा ']
['जेजे ', 'माआ ', 'न ', 'नाति ', 'पिताम ', 'दादी ', 'माउ ', 'दादा ', 'दिदि ', 'पितामह ']
['जेजे ', 'पिताम ', 'नाति ', 'माआ ', 'न ', 'दादा ', 'पितामह ', 'दादी ', 'माउ ', 'बापा ']
['जेजे ', 'माआ ', 'पिताम ', 'न ', 'नाति ', 'दादी ', 'माउ ', 'दादा ', 'पितामह ', 'नानी ']
['जेजे ', 'नाति ', 'माआ ', 'पिताम ', 'दादा ', 'न ', 'माउ ', 'दादी ', 'पितामह ', 'बापा ']
['जेजे ', 'माआ ', 'नाति ', 'पिताम ', 'न ', 'दादी ', 'दादा ', 'माउ ', 'पितामह ', 'नानी ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', '" ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बापाङ्क ', 'बड़ ', 'नाति ', 'द ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'द ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'द ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ', 'द ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'बापा ', 'काक ', 'भाइ ', 'बाप ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'बापा ', 'दादा ', 'भाइ ', 'सम्पर्कीय़ ', 'बाप ', 'माउ ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'सम्पर्कीय़ ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'काक ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'बापा ', 'भाइ ', 'दादा ', 'सम्पर्कीय़ ', 'बाप ', 'माउ ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'सम्पर्कीय़ ', 'बापा ', 'भाइ ', 'दादा ', 'माउ ', 'बाप ']
['माउ ', 'जेजे ', 'माम ', 'काका ', 'बो ', 'भउणी ', 'माङ्क ', "' ", 'आ ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'काका ', 'सम्पर्कीय़ ', 'भउणी ', 'माङ्क ', 'बो ', 'अ ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'काका ', 'भउणी ', 'माङ्क ', 'बापा ', 'अ ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'भउणी ', 'बो ', 'माङ्क ', 'काका ', 'अ ', 'माआ ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'काका ', 'भउणी ', 'माङ्क ', 'अ ', 'बापा ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'भउणी ', 'माङ्क ', 'अ ', 'काका ', 'माआ ', 'सम्पर्कीय़ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'सा ', 'श ', 'भाइ ', 'शा ']
['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'सा ', 'श ', 'भाइ ', 'बो ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'सान ']
['</s> ', '। ', '" ', '. ', ', ', '- ', '| ', "' ", 'I ', '( ']
['जणे ', 'सदस्य़ ', 'सदस्या ', 'सांसद ', 'कर्मी ', 'सद ', 'महिळा ', 'सभ्य़ ', 'बिधाय़क ', '। ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( ']
['</s> ', '। ', '| ', '" ', '. ', '- ', 'से ', '_ ', 'I ', "' "]
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'जेजे ', 'भउणी ', 'बड़ ', 'सान ', 'पुत ', 'काका ', 'खु ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'सम्प ', 'जणे ', 'सान ', 'जेजे ', 'माम ', 'बड़ ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'जेजे ', 'माम ', 'सान ', 'भउणी ', 'बड़ ', 'सम्प ', 'पुत ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'जेजे ', 'माम ', 'सान ', 'बड़ ', 'सम्प ', 'पुत ', 'साबत ']
['सम्पर्कीय़ ', 'भाइ ', 'जेजे ', 'सान ', 'माम ', 'भउणी ', 'बड़ ', 'सम्प ', 'पुत ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'जेजे ', 'माम ', 'सान ', 'बड़ ', 'सम्प ', 'साबत ', 'नाति ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'भा ', 'नाति ', 'सम्पर्कीय़ ', 'पुअ ', 'सान ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'जणे ', 'पु ', 'नाति ', 'सान ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'सान ', 'पुअ ', 'भा ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'सान ', 'पुअ ', 'भा ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'सान ', 'नाति ', 'पु ', 'पुअ ', 'ज् ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पु ', 'पुअ ', 'भा ']
['भ ', 'पुत ', 'भण ', 'भउणी ', 'भा ', 'बो ', 'झ ', 'भाइ ', 'झिअ ', 'सान ']
['भ ', 'जणे ', 'पुत ', 'भण ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ']
['भ ', 'पुत ', 'भण ', 'भउणी ', 'बो ', 'भा ', 'भाइ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ']
['भ ', 'पुत ', 'भण ', 'भउणी ', 'भा ', 'बो ', 'भाइ ', 'सान ', 'झ ', 'झिअ ']
['भ ', 'पुत ', 'भण ', 'भउणी ', 'बो ', 'भाइ ', 'भा ', 'सान ', 'नाति ', 'सम्पर्कीय़ ']
['भ ', 'पुत ', 'भण ', 'भउणी ', 'बो ', 'भा ', 'भाइ ', 'सान ', 'झिअ ', 'सम्पर्कीय़ ']
['जेजे ', 'न ', 'दादी ', 'नाति ', 'नानी ', 'दिदि ', 'माआ ', "' ", 'माउ ', 'ठाकु ']
['जेजे ', 'नाति ', 'न ', 'दादी ', 'पितामह ', 'पिताम ', 'दादा ', 'नानी ', 'दिदि ', 'मात ']
['जेजे ', 'पिताम ', 'न ', 'नाति ', 'पितामह ', 'दादी ', 'माआ ', 'नानी ', 'दादा ', 'माउ ']
['जेजे ', 'न ', 'पिताम ', 'दादी ', 'नाति ', 'माआ ', 'नानी ', 'पितामह ', 'माउ ', 'मात ']
['जेजे ', 'पिताम ', 'नाति ', 'न ', 'माआ ', 'दादी ', 'पितामह ', 'दादा ', 'माउ ', 'नानी ']
['जेजे ', 'न ', 'नाति ', 'पिताम ', 'माआ ', 'दादी ', 'नानी ', 'माउ ', 'पितामह ', 'दादा ']
['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'बड़ ', 'द ', 'पिता ', 'नाति ', 'बापाङ्क ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'दादा ', 'बापा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'सम्पर्कीय़ ', 'दादा ', 'भाइ ', 'काक ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'सम्पर्कीय़ ', 'भाइ ', 'दादा ', 'काक ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'भाइ ', 'दादा ', 'माउ ']
['माउ ', 'जेजे ', 'माम ', 'काका ', 'माङ्क ', 'भउणी ', 'आ ', "' ", 'अ ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'खु ', 'सम्पर्कीय़ ', 'अ ', 'आ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'बो ', 'सम्पर्कीय़ ', 'आ ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'काका ', 'अ ', 'माआ ', 'आ ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'बो ', 'आ ', 'अ ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'अ ', 'काका ', 'माआ ', 'आ ', 'बो ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'भाब ']
['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'भाब ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['</s> ', '। ', '" ', '. ', ', ', '- ', "' ", '| ', 'I ', '( ']
['जणे ', 'सदस्य़ ', 'सदस्या ', 'सभ्य़ ', 'सांसद ', 'महिळा ', 'सद ', 'जण ', 'सदस्य ', 'एक ']
['। ', '| ', '</s> ', '. ', ', ', 'I ', '" ', 'बोलि ', '۔ ', '_ ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', '۔ ', 'I ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'खु ', 'काका ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'सम्प ', 'भउणी ', 'माम ', 'भ्रातृ ', 'सान ', 'बड़ ', 'पुत ', 'जणे ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'जेजे ', 'भउणी ', 'सम्प ', 'सान ', 'पुत ', 'बड़ ', 'भण ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सम्प ', 'सान ', 'भण ', 'खु ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'जेजे ', 'भउणी ', 'सान ', 'सम्प ', 'बड़ ', 'पुत ', 'भण ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'माम ', 'जेजे ', 'सान ', 'सम्प ', 'बड़ ', 'पुत ', 'भण ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'पुअ ', 'सान ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'जणे ', 'सान ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'पुअ ', 'भ्र ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'पुअ ', 'भ्र ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'सान ', 'पुअ ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', 'भाइ ', "' ", 'झिअ ']
['भ ', 'भण ', 'पुत ', 'जणे ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ']
['भ ', 'पुत ', 'भण ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'बो ', 'सम्पर्कीय़ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न ']
['भ ', 'पुत ', 'भण ', 'भउणी ', 'भाइ ', 'भा ', 'बो ', 'सान ', 'झ ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सान ', 'सम्पर्कीय़ ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'दिदि ', 'नाति ', 'माउ ', 'माआ ', "' ", 'दादा ']
['जेजे ', 'न ', 'दादी ', 'नाति ', 'पिताम ', 'दादा ', 'पितामह ', 'नानी ', 'दिदि ', 'माउ ']
['जेजे ', 'न ', 'पिताम ', 'नाति ', 'दादी ', 'माआ ', 'नानी ', 'पितामह ', 'माउ ', 'दादा ']
['जेजे ', 'न ', 'दादी ', 'पिताम ', 'नाति ', 'नानी ', 'माआ ', 'माउ ', 'पितामह ', 'मात ']
['जेजे ', 'न ', 'नाति ', 'पिताम ', 'माआ ', 'दादी ', 'माउ ', 'नानी ', 'दादा ', 'पितामह ']
['जेजे ', 'न ', 'दादी ', 'नाति ', 'माआ ', 'पिताम ', 'नानी ', 'माउ ', 'दादा ', 'पितामह ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'चाचा ', 'भाइ ']
['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'जेजे ', 'काक ', 'दादा ', 'बापा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'दादा ', 'काक ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'माउ ', 'बापा ', 'दादा ', 'माङ्क ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', "' ", 'काका ', 'भउणी ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'काका ', 'आ ', 'अ ', 'खु ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'आ ', 'भउणी ', 'खु ', 'अ ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'काका ', 'खु ', 'माआ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'काका ', 'अ ', 'भउणी ', 'खु ', 'बो ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'भउणी ', 'अ ', 'काका ', 'खु ', 'माआ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'भ ', 'श ', 'बो ', 'भाइ ', 'दे ']
['</s> ', '। ', '" ', '. ', ', ', "' ", '| ', '- ', 'I ', '( ']
['. ', 'सदस्य़ ', 'र ', "' ", '- ', '" ', 'सदस्य ', 'कर्मी ', 'सभ्य़ ', '्र ']
['। ', '</s> ', '| ', '. ', '- ', 'अ ', ' ', 'े ', 'ँ ', '_ ']
['। ', '</s> ', '| ', '. ', '- ', 'अ ', ' ', 'े ', 'ँ ', '_ ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "]
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', "' "]
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'जेजे ', 'भउणी ', 'बड़ ', 'खु ', 'सान ', 'पुत ', 'भाइर ']
['सम्पर्कीय़ ', 'भाइ ', 'सम्प ', 'माम ', 'भउणी ', 'सान ', 'भ्रातृ ', 'जणे ', 'पुत ', 'बड़ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'जेजे ', 'भउणी ', 'सान ', 'खु ', 'पुत ', 'भण ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'जेजे ', 'सान ', 'भउणी ', 'पुत ', 'खु ', 'भण ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'सान ', 'खु ', 'भण ', 'पुत ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'जणे ', 'सान ', 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'भा ', 'भ्र ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'भा ', 'पुअ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'सान ']
['भ ', 'भण ', 'पुत ', 'जणे ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सान ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'न ', 'सम्पर्कीय़ ']
['जेजे ', 'दादी ', 'न ', 'नानी ', 'दिदि ', 'नाति ', 'माआ ', 'माउ ', 'दादा ', 'ठाकु ']
['जेजे ', 'दादी ', 'न ', 'नाति ', 'पिताम ', 'दादा ', 'पितामह ', 'नानी ', 'दिदि ', 'माउ ']
['जेजे ', 'न ', 'पिताम ', 'दादी ', 'नाति ', 'नानी ', 'पितामह ', 'माआ ', 'दादा ', 'माउ ']
['जेजे ', 'न ', 'दादी ', 'पिताम ', 'नाति ', 'नानी ', 'माआ ', 'पितामह ', 'माउ ', 'दादा ']
['जेजे ', 'न ', 'नाति ', 'दादी ', 'पिताम ', 'नानी ', 'माआ ', 'दादा ', 'माउ ', 'पितामह ']
['जेजे ', 'न ', 'दादी ', 'नाति ', 'पिताम ', 'नानी ', 'माआ ', 'माउ ', 'दादा ', 'पितामह ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'काक ', 'जेजे ', 'दादा ', 'बापा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'भाइ ', 'दादा ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', 'भउणी ', 'अ ', 'खु ', "' "]
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'सम्पर्कीय़ ', 'काका ', 'आ ', 'खु ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'आ ', 'सम्पर्कीय़ ', 'खु ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'काका ', 'सम्पर्कीय़ ', 'माआ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'काका ', 'भउणी ', 'अ ', 'सम्पर्कीय़ ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'काका ', 'सम्पर्कीय़ ', 'खु ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'श ', 'भ ', 'बो ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'दे ']
['</s> ', '। ', '" ', '. ', ', ', '- ', '| ', "' ", 'I ', '( ']
['जणे ', 'सदस्य़ ', 'सदस्या ', 'जण ', 'अन्य़तम ', 'सदस्य ', 'सभ्य़ ', 'एक ', 'महिळा ', 'सद ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '᱾ ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '᱾ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'सान ', 'काका ', 'भाइर ']
['सम्पर्कीय़ ', 'भाइ ', 'सम्प ', 'माम ', 'भउणी ', 'भ्रातृ ', 'जणे ', 'सान ', 'बड़ ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'जेजे ', 'सान ', 'खु ', 'पुत ', 'भण ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'क ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'जेजे ', 'सान ', 'खु ', 'पुत ', 'भण ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'जणे ', 'नाति ', 'सान ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भा ', 'भ्र ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'भा ', 'पुअ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'सान ']
['भ ', 'भण ', 'पुत ', 'जणे ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'बो ', 'सम्पर्कीय़ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न ']
['जेजे ', 'दादी ', 'न ', 'नानी ', 'दिदि ', 'नाति ', 'माआ ', 'माउ ', "' ", 'दादा ']
['जेजे ', 'दादी ', 'न ', 'नाति ', 'पिताम ', 'पितामह ', 'दादा ', 'नानी ', 'दिदि ', 'मात ']
['जेजे ', 'पिताम ', 'न ', 'नाति ', 'दादी ', 'पितामह ', 'नानी ', 'माआ ', 'दादा ', 'माउ ']
['जेजे ', 'पिताम ', 'न ', 'दादी ', 'नाति ', 'नानी ', 'माआ ', 'पितामह ', 'माउ ', 'मात ']
['जेजे ', 'न ', 'पिताम ', 'नाति ', 'दादी ', 'माआ ', 'नानी ', 'पितामह ', 'दादा ', 'माउ ']
['जेजे ', 'न ', 'पिताम ', 'दादी ', 'नाति ', 'नानी ', 'माआ ', 'माउ ', 'पितामह ', 'दादा ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'पिताम ', "' ", 'बड़ ', 'बापाङ्क ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'बापा ', 'दादा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'सम्पर्कीय़ ', 'जेजे ', 'काक ', 'दादा ', 'बापा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'बापा ', 'काक ', 'दादा ', 'भाइ ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'काक ', 'बापा ', 'माउ ', 'माङ्क ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'अ ', 'काका ', "' ", 'भउणी ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'काका ', 'सम्पर्कीय़ ', 'आ ', 'अ ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'काका ', 'भउणी ', 'आ ', 'सम्पर्कीय़ ', 'खु ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'काका ', 'अ ', 'माआ ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'काका ', 'भउणी ', 'अ ', 'खु ', 'सम्पर्कीय़ ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'माआ ', 'काका ', 'सम्पर्कीय़ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शा ']
['भि ', 'ज् ', 'श् ', 'भा ', 'भ ', 'श ', 'सा ', 'भाइ ', 'बो ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'सा ', 'भ ', 'बो ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'दे ']
['</s> ', '। ', '" ', '| ', '. ', "' ", '- ', 'I ', '! ', '_ ']
['के ', 'केर ', '. ', 'क ', 'के ', 'केक ', 'केइ ', 'किर ', 'कॆ ', '्के ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '- ', '| ', 'I ', '۔ ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['। ', '| ', '</s> ', '. ', 'I ', ', ', '_ ', '" ', 'बोलि ', '۔ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'सान ', 'पुत ', 'भाइर ']
['सम्पर्कीय़ ', 'जणे ', 'भाइ ', 'माम ', 'सम्प ', 'भ्रातृ ', 'क ', 'भउणी ', 'खु ', 'सान ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'जेजे ', 'सान ', 'खु ', 'भण ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'जेजे ', 'खु ', 'सान ', 'भण ', 'पुत ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'जणे ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भ्र ', 'नाति ', 'सान ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'पुअ ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'नाति ', 'सान ', 'पु ', 'भ्र ', 'भा ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'सान ']
['भ ', 'भण ', 'पुत ', 'जणे ', 'झ ', 'भउणी ', 'भा ', 'भाइ ', 'सम्पर्कीय़ ', 'बो ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'सम्पर्कीय़ ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'सम्पर्कीय़ ', 'बो ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'बो ', 'सान ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'बो ', 'सम्पर्कीय़ ', 'न ']
['जेजे ', 'माआ ', "' ", 'बापा ', 'न ', 'दादा ', 'बड़ ', 'नाति ', 'मा ', 'नानी ']
['जेजे ', 'पिताम ', 'माआ ', 'दादा ', 'बापा ', 'पितामह ', 'नाति ', 'दादी ', 'बड़ ', 'मा ']
['जेजे ', 'माआ ', 'पिताम ', 'दादा ', 'नाति ', 'बापा ', 'दादी ', 'पितामह ', 'मा ', 'न ']
['जेजे ', 'नानी ', 'दादी ', 'पिताम ', 'न ', 'दादा ', 'नाति ', 'पितामह ', 'मात ', 'आइ ']
['जेजे ', 'बापा ', 'दादा ', 'पितामह ', "' ", 'पिताम ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'बापा ', 'दादा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'बापाङ्क ', 'पिता ', 'दाद ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', "' ", 'भाइ ', 'दादा ', 'चाचा ', 'बड़ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'दादा ', 'भाइ ', 'सम्पर्कीय़ ', 'चाचा ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'दादा ', 'भाइ ', 'सम्पर्कीय़ ', 'माउ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'माङ्क ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'माउ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'काका ', 'बो ', 'भउणी ', "' ", 'माङ्क ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'काका ', 'माङ्क ', 'बापा ', 'भउणी ', 'माआ ', 'बो ', 'आ ']
['माउ ', 'जेजे ', 'माम ', 'माआ ', 'माङ्क ', 'भउणी ', 'काका ', 'बो ', 'बापा ', 'आ ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'अ ', 'काकी ', 'ब ', 'खु ', 'कुनि ']
['भि ', 'श् ', 'ज् ', 'भा ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'सा ', 'भ ', 'बो ', 'सान ', 'भाइ ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['</s> ', 'भाइ ', 'पुअ ', '| ', 'जणे ', 'िआ ', 'ाइ ', ', ', 'ए ', ' ']
['</s> ', 'भउणी ', 'जणे ', ', ', 'िआ ', 'पुअ ', '| ', 'ए ', 'कि ', 'ाइ ']
['</s> ', 'भउणी ', 'जणे ', ', ', 'िआ ', 'पुअ ', '| ', 'ए ', 'कि ', 'ाइ ']
['</s> ', '। ', '| ', '. ', '" ', '_ ', '- ', 'I ', ', ', '[ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'खु ', 'बो ', 'भाइर ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सान ', 'भउणी ', 'जेजे ', 'बड़ ', 'सम्प ', 'भण ', 'खु ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'माम ', 'सान ', 'जेजे ', 'बड़ ', 'सम्प ', 'साबत ', 'खु ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'जेजे ', 'काक ', 'खु ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'भा ', "' ", 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ', 'पुअ ', 'भ्र ', 'पु ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ', 'पुअ ', 'भ्र ', 'पु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'भ्र ', 'भा ', 'पु ', 'भाग ', 'नाति ']
['भ ', 'भउणी ', 'भण ', 'पुत ', 'भा ', 'बो ', 'सान ', 'भाइ ', "' ", 'झ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'भाइ ', 'बो ', 'भा ', 'न ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'भाइ ', 'बो ', 'भा ', 'न ', 'झ ']
['भ ', 'भण ', 'पुत ', 'भा ', 'झ ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'ब ', 'न ']
['जेजे ', 'माआ ', "' ", 'न ', 'नाति ', 'दादा ', 'माउ ', 'माम ', 'बड़ ', 'नानी ']
['जेजे ', 'माआ ', 'नाति ', 'न ', 'दादा ', 'माउ ', 'पिताम ', 'बड़ ', 'माम ', 'मा ']
['जेजे ', 'माआ ', 'न ', 'नाति ', 'माउ ', 'दादा ', 'पिताम ', 'मा ', 'दादी ', 'नानी ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'पिताम ', 'नाति ', 'दिदि ', 'माउ ', 'दादा ', 'द ']
['जेजे ', 'बापा ', 'दादा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'दाद ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'बड़ ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'दादा ', 'बापा ', 'भाइ ', 'सम्पर्कीय़ ', 'माउ ', 'चाचा ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'दादा ', 'बापा ', 'सम्पर्कीय़ ', 'माउ ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माङ्क ', 'चाचा ', 'माउ ', 'जेजे ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'आ ', "' ", 'अ ', 'भउणी ', 'खु ', 'माङ्क ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'माङ्क ', 'भउणी ', 'अ ', 'आ ', 'काका ', 'बड़ ']
['माउ ', 'जेजे ', 'माम ', 'भउणी ', 'माङ्क ', 'अ ', 'बो ', 'आ ', 'काका ', 'माआ ']
['माउ ', 'आ ', 'माम ', 'जेजे ', 'माङ्क ', 'ब ', 'अ ', 'कुनि ', 'खु ', 'काकी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'बो ', 'सा ', 'सान ', 'भाइ ']
['भि ', 'श् ', 'ज् ', 'भा ', 'सा ', 'भ ', 'श ', 'बो ', 'सान ', 'भाइ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'शा ', 'शाशु ']
['</s> ', '| ', '. ', '। ', '/ ', ' ', 'एहि ', 'l ', ', ', 'अन्य़ ']
[', ', '</s> ', '। ', '. ', '| ', 'एबं ', '; ', 'ओ ', '? ', '! ']
[', ', '</s> ', '। ', '. ', '| ', 'एबं ', '; ', '? ', 'ओ ', '! ']
['भल ', 'उत्तम ', 'श्रेष्ठ ', 'सुन्दर ', 'उन्नत ', 'सर्बो ', 'अधिक ', 'उपयुक्त ', 'बड़ ', 'उत्कृष्ट ']
['</s> ', '. ', '। ', '- ', 'जणे ', 'मा ', 'ः ', 'र ', 'ा ', ', ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'बड़ ', 'साबत ', 'सम्प ', 'नाति ']
['भाइ ', 'पुअ ', 'भउणी ', 'जणे ', 'झिअ ', ', ', 'ाम ', '. ', 'बा ', 'ाइ ']
['सम्पर्कीय़ ', 'माम ', 'क ', 'भाइ ', 'भउणी ', 'भ्रातृ ', 'सम्प ', 'जेजे ', 'खु ', 'काक ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'पु ', 'नाति ', 'भा ', "' ", 'बो ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'सम्पर्कीय़ ', 'पु ', 'पुअ ', 'भ्र ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'सम्पर्कीय़ ', 'पु ', 'पुअ ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्र ', 'भाग ', 'नाति ']
['भ ', 'भउणी ', 'भण ', 'पुत ', 'बो ', 'भा ', 'झ ', 'सान ', "' ", 'भाइ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'बो ', 'भाइ ', 'न ', 'भा ', 'झ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'बो ', 'भाइ ', 'भा ', 'न ', 'झ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'ब ', 'बो ']
['जेजे ', 'माआ ', "' ", 'नाति ', 'न ', 'माउ ', 'दादा ', 'बड़ ', 'माम ', 'बापा ']
['जेजे ', 'माआ ', 'पिताम ', 'नाति ', 'दादा ', 'माउ ', 'बापा ', 'पितामह ', 'न ', 'बड़ ']
['जेजे ', 'माआ ', 'नाति ', 'पिताम ', 'माउ ', 'न ', 'दादा ', 'मा ', 'बड़ ', 'बापा ']
['जेजे ', 'दादी ', 'नानी ', 'न ', 'पिताम ', 'नाति ', 'पितामह ', 'मात ', 'दिदि ', 'दादा ']
['जेजे ', 'बापा ', 'दादा ', 'पितामह ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'पिताम ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'दाद ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'बड़ ', 'माउ ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'चाचा ', 'बाप ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'दादा ', 'बापा ', 'माउ ', 'भाइ ', 'सम्पर्कीय़ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'चाचा ', 'जेजे ', 'माङ्क ', 'सम्पर्कीय़ ', 'माउ ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', "' ", 'बो ', 'भउणी ', 'अ ', 'आ ', 'काका ', 'माङ्क ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'भउणी ', 'माङ्क ', 'काका ', 'अ ', 'बड़ ', 'माआ ']
['माउ ', 'जेजे ', 'माम ', 'भउणी ', 'बो ', 'माङ्क ', 'अ ', 'माआ ', 'काका ', 'आ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'ब ', 'अ ', 'खु ', 'कुनि ', 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'भाइ ', 'सा ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'बो ', 'भ ', 'सा ', 'श ', 'सान ', 'भाइ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'शा ', 'भाइ ']
['</s> ', '| ', 'ङ्क ', '" ', ' ', '/ ', ': ', '. ', 'by ', "' "]
['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', '! ', 'I ', '? ']
['</s> ', '। ', '. ', '| ', '" ', ', ', '- ', '! ', 'I ', '? ']
['भल ', 'उत्तम ', 'श्रेष्ठ ', 'सर्बो ', 'सुन्दर ', 'उन्नत ', 'बड़ ', 'अधिक ', 'उत्कृष्ट ', 'उपयुक्त ']
['मो ', 'मोर ', 'भाइ ', 'ताङ्क ', 'बो ', 'भउणी ', 'ताङ्कर ', 'माम ', 'बन्धु ', 'मुँ ']
['सम्पर्कीय़ ', 'भाइ ', 'सान ', 'जेजे ', 'भउणी ', 'माम ', 'बड़ ', 'नाति ', 'भण ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'सान ', 'माम ', 'जेजे ', 'बड़ ', 'नाति ', 'साबत ', 'भण ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'जेजे ', 'काक ', 'बड़ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'भा ', 'बो ', 'बड़ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'सम्पर्कीय़ ', 'पुअ ', 'बड़ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'सम्पर्कीय़ ', 'पुअ ', 'भउणी ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्र ', 'नाति ', 'भाग ']
['भ ', 'भउणी ', 'भण ', 'पुत ', 'बो ', 'भा ', 'सान ', 'झ ', "' ", 'भाइ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'बो ', 'सान ', 'भाइ ', 'भा ', 'नाति ', 'न ']
['भ ', 'भण ', 'भउणी ', 'पुत ', 'बो ', 'सान ', 'भाइ ', 'भा ', 'न ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'ब ', 'सम्पर्कीय़ ']
['जेजे ', 'न ', "' ", 'माआ ', 'नाति ', 'माउ ', 'नानी ', 'माम ', 'बड़ ', 'दिदि ']
['जेजे ', 'माआ ', 'न ', 'नाति ', 'माउ ', 'पिताम ', 'दादा ', 'माम ', 'पितामह ', 'बड़ ']
['जेजे ', 'माआ ', 'न ', 'नाति ', 'माउ ', 'पिताम ', 'मा ', 'दादी ', 'नानी ', 'दादा ']
['जेजे ', 'न ', 'नानी ', 'दादी ', 'नाति ', 'पिताम ', 'माउ ', 'दिदि ', 'मात ', 'आइ ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'बड़ ', 'पिताम ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'दाद ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'माउ ', 'बो ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'दादा ', 'बापा ', 'भाइ ', 'माउ ', 'सम्पर्कीय़ ', 'बाप ']
['माम ', 'काका ', 'जेजे ', 'मामा ', 'माउ ', 'दादा ', 'सम्पर्कीय़ ', 'भाइ ', 'बापा ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माङ्क ', 'माउ ', 'चाचा ', 'जेजे ', 'आङ्क ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'अ ', 'भउणी ', "' ", 'आ ', 'खु ', 'माङ्क ']
['माउ ', 'जेजे ', 'माम ', 'बो ', 'माङ्क ', 'भउणी ', 'अ ', 'काका ', 'बड़ ', 'ब ']
['माउ ', 'जेजे ', 'माम ', 'भउणी ', 'माङ्क ', 'बो ', 'अ ', 'माआ ', 'आ ', 'काका ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'ब ', 'अ ', 'कुनि ', 'खु ', 'भउणी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'बो ', 'श ', 'सा ', 'सान ', 'भाइ ']
['भि ', 'श् ', 'ज् ', 'भा ', 'बो ', 'सा ', 'श ', 'भ ', 'सान ', 'शाशु ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'शा ', 'शाशु ']
['भा ', 'भि ', 'श् ', 'बो ', 'ज् ', 'झ ', 'भउणी ', 'श ', 'भ ', 'शा ']
['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', '! ', '? ', 'I ']
['</s> ', '। ', '| ', '. ', '" ', '_ ', '- ', '! ', 'I ', ', ']
['भल ', 'उत्तम ', 'श्रेष्ठ ', 'सुन्दर ', 'सर्बो ', 'अधिक ', 'उन्नत ', 'उपयुक्त ', 'उत्कृष्ट ', 'बड़ ']
['</s> ', '. ', '- ', 'जणे ', 'मा ', '। ', 'ङ्क ', 'र ', 'घर ', 'ः ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'माम ', 'सान ', 'जेजे ', 'बड़ ', 'साबत ', 'पुत ', 'नाति ']
['ळित ', 'ळक ', 'ळी ', 'ळिक ', 'ळन ', 'ध्य़ ', 'षी ', 'ठि ', 'क्षिक ', 'चार ']
['भल ', 'उत्तम ', 'सुन्दर ', 'श्रेष्ठ ', 'सर्बो ', 'उन्नत ', 'अधिक ', 'उपयुक्त ', 'उत्कृष्ट ', 'बड़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सान ', 'भा ', 'नाति ', "' ", 'बो ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'नाति ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'नाति ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'भउणी ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'भाग ', 'भ्र ']
['भ ', 'भण ', 'भउणी ', 'पुत ', 'भा ', 'बो ', 'झ ', "' ", 'सान ', 'भाइ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'भा ', 'बो ', 'झ ', 'भाइ ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'सान ', 'बो ', 'झ ', 'न ', 'भाइ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'ब ', 'बो ']
['जेजे ', "' ", 'माआ ', 'न ', 'नानी ', 'नाति ', 'माउ ', 'दादी ', 'दिदि ', 'माम ']
['जेजे ', 'माआ ', 'न ', 'पिताम ', 'नाति ', 'दादी ', 'माउ ', 'नानी ', 'दादा ', 'पितामह ']
['जेजे ', 'माआ ', 'न ', 'दादी ', 'पिताम ', 'माउ ', 'नानी ', 'नाति ', 'मात ', 'मा ']
['जेजे ', 'न ', 'दादी ', 'नानी ', 'पिताम ', 'माउ ', 'दिदि ', 'नाति ', 'ठाकु ', 'मात ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'पिताम ', 'बापाङ्क ', 'बड़ ', 'पिता ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'पिताम ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बापाङ्क ', 'बड़ ', 'दाद ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'काक ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'दादा ', 'सम्पर्कीय़ ', 'भाइ ', 'चाचा ', 'काक ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'माउ ', 'बापा ', 'दादा ', 'माङ्क ', 'काक ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'माङ्क ', 'माउ ', 'चाचा ', 'जेजे ', 'बापा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'अ ', "' ", 'माङ्क ', 'भउणी ', 'खु ', 'बो ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'अ ', 'आ ', 'भउणी ', 'काका ', 'बो ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'अ ', 'आ ', 'भउणी ', 'माआ ', 'खु ', 'बो ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'ब ', 'अ ', 'कुनि ', 'काकी ', 'खु ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'सा ', 'भ ', 'बो ', 'सान ', 'भाइ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'शा ', 'दे ']
['</s> ', '| ', '. ', 'ात ', '। ', 'भाइ ', 'ाज ', 'ा ', 'े ', '्ब ']
['</s> ', ', ', '। ', '. ', '| ', 'एबं ', '; ', 'याहा ', '- ', '? ']
['</s> ', '। ', '. ', '| ', '" ', '- ', ', ', '! ', 'I ', '( ']
['अग्निशम ', 'अग्नि ', 'अग्निश ', 'दमक ', 'अग्निशमन ', 'फाय़ार ', 'निआँ ', 'अग्निकाण्ड ', 'दमकल ', 'अग्निक ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'खु ', 'बड़ ', 'भाइर ', "' "]
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सान ', 'सम्प ', 'भउणी ', 'जेजे ', 'भण ', 'खु ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'सम्प ', 'जेजे ', 'खु ', 'भण ', 'पुत ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'बन्धु ', 'खु ', 'काक ']
['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'सान ', 'भा ', 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'सान ', 'नाति ', 'पु ', 'पुअ ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'नाति ', 'पु ', 'भ्र ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'भाग ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', "' ", 'भा ', 'झ ', 'बो ', 'सान ', 'भाइ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'सान ', 'न ', 'बो ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'न ', 'भाइ ', 'सान ', 'बो ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'न ', 'सम्पर्कीय़ ', 'ब ']
['जेजे ', 'न ', "' ", 'नाति ', 'नानी ', 'दादी ', 'माआ ', 'माउ ', 'दिदि ', 'माम ']
['जेजे ', 'न ', 'पिताम ', 'नाति ', 'पितामह ', 'माउ ', 'दादी ', 'नानी ', 'मात ', 'माआ ']
['जेजे ', 'न ', 'नाति ', 'पिताम ', 'नानी ', 'दादी ', 'माउ ', 'माआ ', 'मात ', 'पितामह ']
['जेजे ', 'नानी ', 'दादी ', 'न ', 'पिताम ', 'नाति ', 'पितामह ', 'मात ', 'दिदि ', 'माउ ']
['जेजे ', 'पितामह ', 'दादा ', 'बापा ', "' ", 'द ', 'पिताम ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'पिता ', 'द ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'नाति ', 'बापाङ्क ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'दाद ', 'बड़ ', 'बापाङ्क ', 'तात ']
['माम ', 'काका ', 'मामा ', "' ", 'जेजे ', 'बापा ', 'काक ', 'दादा ', 'आ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'दादा ', 'बापा ', 'काक ', 'चाचा ', 'भाइ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'सम्पर्कीय़ ', 'माउ ', 'काक ', 'दादा ', 'चाचा ', 'माङ्क ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'चाचा ', 'माङ्क ', 'माउ ', 'जेजे ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', "' ", 'अ ', 'खु ', 'भउणी ', 'माङ्क ', 'काका ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'काका ', 'बो ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'आ ', 'अ ', 'खु ', 'बो ', 'माआ ']
['माउ ', 'माम ', 'आ ', 'जेजे ', 'माङ्क ', 'अ ', 'काकी ', 'खु ', 'ब ', 'कुनि ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'भाब ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'शाशु ', 'भाइ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'शा ', 'झ ']
[', ', '</s> ', '। ', '. ', '| ', '; ', 'एबं ', '? ', '! ', '" ']
['</s> ', '| ', '. ', '। ', ', ', 'ताङ्क ', 'जणे ', 'भउणी ', 'अ ', 'ँ ']
['</s> ', '| ', '. ', '। ', ', ', 'ताङ्क ', 'जणे ', 'भउणी ', 'अ ', 'ँ ']
['सन ', 'सन् ', 'ण्ण ', 'सननि ', 'स् ', 'स्न ', 'सेन ', 'सिआ ', 'सन ', 'सनगी ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'सान ', 'पुत ', 'नाति ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'सान ', 'जेजे ', 'भण ', 'पुत ', 'बड़ ']
['बा ', 'ाता ', 'ाम ', "' ", 'ाइ ', '<unk> ', 'नेता ', 'म ', '. ', 'पुअ ']
['सम्पर्कीय़ ', 'माम ', 'क ', 'भाइ ', 'भ्रातृ ', 'सम्प ', 'भउणी ', 'काक ', 'खु ', 'जेजे ']
['पुत ', 'भण ', 'भ ', 'भाइ ', "' ", 'पु ', 'भा ', 'नाति ', 'सान ', 'सम्पर्कीय़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'सान ', 'भ्र ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्र ', 'भाग ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', "' ", 'भा ', 'बो ', 'न ', '" ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'बो ', 'भाइ ', 'न ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भउणी ', 'भा ', 'बो ', 'न ', 'भाइ ', 'सान ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'न ', 'बो ']
['जेजे ', 'माआ ', 'न ', "' ", 'नानी ', 'माउ ', 'नाति ', 'माम ', 'दिदि ', 'दादा ']
['जेजे ', 'माआ ', 'पिताम ', 'न ', 'नाति ', 'माउ ', 'पितामह ', 'दादा ', 'दादी ', 'नानी ']
['जेजे ', 'माआ ', 'न ', 'पिताम ', 'माउ ', 'नाति ', 'दादी ', 'नानी ', 'दादा ', 'पितामह ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'पिताम ', 'नाति ', 'दिदि ', 'माउ ', 'पितामह ', 'मात ']
['जेजे ', 'दादा ', 'बापा ', 'पितामह ', 'द ', "' ", 'पिताम ', 'बड़ ', 'बापाङ्क ', 'पिता ']
['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'पिताम ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'द ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'बापा ', 'पिताम ', 'पिता ', 'बड़ ', 'द ', 'बापाङ्क ', 'नाति ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'द ', 'बापा ', 'बड़ ', 'दाद ', 'बापाङ्क ', 'पिता ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'बापा ', 'दादा ', 'भाइ ', 'चाचा ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'दादा ', 'भाइ ', 'सम्पर्कीय़ ', 'चाचा ', 'माउ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'दादा ', 'सम्पर्कीय़ ', 'बापा ', 'माउ ', 'भाइ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'काक ', 'सम्पर्कीय़ ', 'चाचा ', 'माङ्क ', 'जेजे ', 'माउ ', 'दादा ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'अ ', 'खु ', "' ", 'माङ्क ', 'बो ', 'भउणी ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'बो ', 'काका ', 'अ ', 'आ ', 'खु ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'भउणी ', 'अ ', 'आ ', 'बो ', 'माआ ', 'काका ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'ब ', 'कुनि ', 'खु ', 'भउणी ', 'अ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'सान ', 'भाइ ']
['भि ', 'श् ', 'ज् ', 'भा ', 'भ ', 'श ', 'सा ', 'बो ', 'शा ', 'शाशु ']
['</s> ', '। ', '. ', '| ', '" ', '! ', '- ', ', ', 'I ', '? ']
['</s> ', '। ', '. ', '" ', '- ', ', ', '| ', '( ', 'I ', "' "]
['</s> ', '| ', '। ', 'से ', '. ', 'ताङ्क ', '" ', '_ ', '! ', 'एहि ']
['कारि ', 'शिळ ', 'कळाकार ', 'कळ ', 'कार ', 'शिळ्प ', 'कारीगर ', 'कुश ', 'ब ', 'चित्र ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सान ', 'बड़ ', 'खु ', 'भाइर ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सान ', 'भउणी ', 'जेजे ', 'सम्प ', 'बड़ ', 'भण ', 'पुत ']
['सम्पर्कीय़ ', 'भाइ ', 'भउणी ', 'माम ', 'सान ', 'जेजे ', 'सम्प ', 'बड़ ', 'भण ', 'पुत ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'क ', 'सम्प ', 'भ्रातृ ', 'भउणी ', 'जेजे ', 'काक ', 'खु ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', "' ", 'सान ', 'भा ', 'नाति ', 'पुअ ']
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'पुअ ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'सम्पर्कीय़ ', 'नाति ', 'पु ', 'भ्र ', 'पुअ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'भ्र ', 'नाति ', 'भाग ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', "' ", 'बो ', 'सान ', 'भाइ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'सान ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'सान ', 'न ', 'बो ', 'भाइ ']
['भ ', 'भण ', 'पुत ', 'झ ', 'भा ', 'भाइ ', 'भउणी ', 'सम्पर्कीय़ ', 'न ', 'ब ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'माउ ', 'दिदि ', 'नाति ', 'माम ', 'दादा ']
['जेजे ', 'नानी ', 'दादी ', 'पिताम ', 'माआ ', 'न ', 'मात ', 'माउ ', 'नाति ', 'पितामह ']
['जेजे ', 'न ', 'पिताम ', 'नानी ', 'माआ ', 'दादी ', 'नाति ', 'माउ ', 'पितामह ', 'मात ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बापाङ्क ', "' ", 'बड़ ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'माङ्क ', 'जेजे ', 'माउ ', 'आङ्क ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'माङ्क ', 'काक ', 'जेजे ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ', 'दादा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'बापा ', 'सम्पर्कीय़ ', 'माउ ', 'माङ्क ', 'चाचा ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'खु ', "' ", 'भउणी ', 'मा ', 'कुनि ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'पि ', 'काकी ', 'माआ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', 'भउणी ', 'अ ', 'खु ', 'माआ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', '! ', 'I ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', '! ', 'I ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'भाइर ', 'सान ', 'क ']
['</s> ', '। ', '. ', '| ', '" ', '! ', '- ', ', ', '( ', '? ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'सम्प ', 'भउणी ', 'खु ', 'जेजे ', 'सान ', 'क ', 'भण ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'भा ', 'पु ', 'भाइर ', 'भ्र ', 'सान ', "' "]
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'भ्र ', 'पु ', 'भा ', 'नाति ', 'सान ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'भा ', 'पु ', 'भ्र ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'भाइर ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'न ', 'बो ', 'सम्पर्कीय़ ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'सान ', 'बो ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'माउ ', 'माम ', 'नाति ', 'दिदि ', 'दादा ']
['जेजे ', 'पिताम ', 'नानी ', 'माआ ', 'दादी ', 'न ', 'मात ', 'माउ ', 'नाति ', 'पितामह ']
['जेजे ', 'पिताम ', 'न ', 'माआ ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'पितामह ', 'दादा ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'बापाङ्क ', 'पिताम ', "' ", 'बड़ ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'बापाङ्क ', 'द ', 'पिता ', 'बड़ ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'पिता ', 'बड़ ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माङ्क ', 'माउ ', 'आङ्क ', 'आ ']
['माम ', 'काका ', 'मामा ', 'माङ्क ', 'जेजे ', 'काक ', 'माउ ', 'सम्पर्कीय़ ', 'दादा ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'काक ', 'सम्पर्कीय़ ', 'भाइ ', 'माङ्क ', 'माउ ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', "' ", 'खु ', 'मा ', 'भउणी ', 'काका ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'माआ ', 'पि ', 'काकी ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'काका ', 'माआ ', 'भउणी ', 'मा ', 'अ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'बो ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'बो ', 'सा ', 'भाइ ', 'शाशु ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'बो ', 'सा ', 'भाइ ', 'सान ']
['</s> ', '। ', '" ', '| ', '. ', "' ", 'I ', '- ', '_ ', '! ']
['। ', '| ', '</s> ', '. ', ', ', 'I ', '۔ ', '_ ', '! ', '; ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'बड़ ', 'खु ', 'भाइर ', 'सान ', 'काका ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'भण ', 'सम्प ', 'सान ', 'बड़ ', 'खु ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'सम्प ', 'सान ', 'बड़ ', 'खु ', 'भण ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'भाइर ', 'भ्र ', "' "]
['पुत ', 'भण ', 'भाइ ', 'भ ', 'सम्पर्कीय़ ', 'पु ', 'सान ', 'नाति ', 'भ्र ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'पु ', 'नाति ', 'भा ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'बो ', 'भाइ ', 'झि ', 'न ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'भा ', 'झ ', 'सान ', 'न ', 'बो ']
['जेजे ', 'नानी ', 'न ', 'माआ ', 'दादी ', 'माउ ', 'माम ', "' ", 'नाति ', 'दादा ']
['जेजे ', 'नानी ', 'माआ ', 'पिताम ', 'दादी ', 'न ', 'माउ ', 'मात ', 'नाति ', 'दादा ']
['जेजे ', 'न ', 'पिताम ', 'माआ ', 'नानी ', 'दादी ', 'नाति ', 'माउ ', 'पितामह ', 'दादा ']
['जेजे ', 'दादा ', 'पितामह ', 'बापा ', 'द ', 'बापाङ्क ', "' ", 'पिताम ', 'बड़ ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'जेजे ', 'माङ्क ', 'माउ ', 'आ ', 'आङ्क ']
['माम ', 'काका ', 'मामा ', 'माङ्क ', 'जेजे ', 'काक ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ', 'दादा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'बापा ', 'माउ ', 'चाचा ', 'माङ्क ', 'सम्पर्कीय़ ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', "' ", 'भउणी ', 'खु ', 'मा ', 'अ ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'माआ ', 'पि ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'भउणी ', 'काका ', 'माआ ', 'अ ', 'खु ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'श ', 'बो ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', '! ', 'I ', '? ']
['</s> ', '। ', '. ', '" ', '| ', ', ', '- ', '! ', 'I ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['</s> ', '। ', '. ', '" ', '| ', '! ', ', ', '- ', '? ', '( ']
['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '[ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'सम्प ', 'जेजे ', 'खु ', 'बड़ ', 'भण ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'भाइर ', "' ", 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'पु ', 'भ्र ', 'नाति ', 'भा ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'सम्पर्कीय़ ', 'पु ', 'नाति ', 'भा ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'भाइर ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'भा ', 'झ ', 'सान ', 'न ', 'बो ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'माउ ', 'दिदि ', 'माम ', 'नाति ', "' "]
['जेजे ', 'नानी ', 'दादी ', 'माआ ', 'पिताम ', 'मात ', 'न ', 'माउ ', 'नाति ', 'पितामह ']
['जेजे ', 'न ', 'पिताम ', 'नानी ', 'माआ ', 'दादी ', 'माउ ', 'नाति ', 'मात ', 'पितामह ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'बापाङ्क ', 'पिताम ', "' ", 'बड़ ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', "' ", 'काक ', 'माङ्क ', 'जेजे ', 'माउ ', 'आङ्क ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'माङ्क ', 'काक ', 'जेजे ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ', 'भाइ ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'माङ्क ', 'बापा ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'खु ', "' ", 'भउणी ', 'मा ', 'कुनि ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'पि ', 'माआ ', 'काकी ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'भउणी ', 'अ ', 'माआ ', 'खु ', 'काका ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'बो ', 'श ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'दे ']
['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( ']
['</s> ', '. ', '। ', '" ', '- ', '| ', "' ", '! ', ', ', '[ ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'भाइर ', 'सान ', 'क ']
['</s> ', '। ', '. ', '" ', '| ', '! ', ', ', '- ', '( ', '? ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'खु ', 'सान ', 'जेजे ', 'भण ', 'क ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', "' ", 'भाइर ', 'सान ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'पु ', 'भ्र ', 'भा ', 'सान ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'पु ', 'भा ', 'भ्र ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'भाइर ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'झ ', 'भा ', 'भाइ ', 'न ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'सान ', 'बो ']
['जेजे ', 'नानी ', 'न ', 'दादी ', 'माआ ', 'माउ ', 'दिदि ', 'नाति ', "' ", 'मात ']
['जेजे ', 'नानी ', 'दादी ', 'पिताम ', 'न ', 'मात ', 'माआ ', 'माउ ', 'नाति ', 'पितामह ']
['जेजे ', 'न ', 'पिताम ', 'नानी ', 'दादी ', 'माआ ', 'नाति ', 'माउ ', 'पितामह ', 'मात ']
['जेजे ', 'दादा ', 'पितामह ', 'द ', 'बापा ', 'पिताम ', 'बापाङ्क ', "' ", 'बड़ ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद ']
['जेजे ', 'पितामह ', 'दादा ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'काक ', "' ", 'माङ्क ', 'जेजे ', 'माउ ', 'आङ्क ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'माङ्क ', 'काक ', 'जेजे ', 'माउ ', 'सम्पर्कीय़ ', 'चाचा ', 'दादा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'काक ', 'बापा ', 'माङ्क ', 'सम्पर्कीय़ ', 'माउ ', 'चाचा ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', "' ", 'खु ', 'भउणी ', 'कुनि ', 'मा ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'भउणी ', 'मा ', 'पि ', 'काकी ', 'कुनि ']
['माउ ', 'जेजे ', 'माम ', 'माङ्क ', 'आ ', 'भउणी ', 'काका ', 'माआ ', 'खु ', 'अ ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'श ', 'सा ', 'बो ', 'भाइ ', 'शा ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['</s> ', '। ', '. ', '| ', '" ', ', ', '- ', '! ', 'I ', '? ']
['</s> ', '. ', '। ', '" ', '- ', "' ", '| ', '! ', ', ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'माम ', 'भाइ ', 'भउणी ', 'जेजे ', 'खु ', 'बड़ ', 'भाइर ', 'सान ', 'सम्प ']
['</s> ', '। ', '. ', '| ', '" ', '! ', '- ', ', ', '( ', '? ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सम्प ', 'खु ', 'सान ', 'जेजे ', 'भण ', 'बड़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'भा ', 'पु ', "' ", 'सान ', 'भ्र ', 'भाइर ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'भ्र ', 'पु ', 'भा ', 'सान ', 'नाति ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सम्पर्कीय़ ', 'सान ', 'भा ', 'भ्र ', 'पु ', 'नाति ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', "' ", 'भाइर ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'भाइ ', 'झ ', 'न ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'भा ', 'झ ', 'न ', 'सान ', 'बो ']
['जेजे ', 'नानी ', 'न ', 'माउ ', 'माआ ', 'माम ', 'दादी ', 'नाति ', 'दादा ', "' "]
['जेजे ', 'नानी ', 'पिताम ', 'न ', 'माआ ', 'दादी ', 'माउ ', 'मात ', 'नाति ', 'दादा ']
['जेजे ', 'न ', 'पिताम ', 'नानी ', 'माआ ', 'नाति ', 'दादी ', 'माउ ', 'दादा ', 'मात ']
['जेजे ', 'दादा ', 'द ', 'बापा ', 'पितामह ', 'बापाङ्क ', 'पिताम ', "' ", 'बड़ ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बापाङ्क ', 'पिता ', 'बड़ ', 'दाद ']
['जेजे ', 'दादा ', 'पितामह ', 'पिताम ', 'बापा ', 'द ', 'बड़ ', 'पिता ', 'बापाङ्क ', 'नाति ']
['माम ', 'काका ', 'मामा ', 'जेजे ', "' ", 'काक ', 'माउ ', 'माङ्क ', 'आ ', 'चाचा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'माउ ', 'माङ्क ', 'काक ', 'सम्पर्कीय़ ', 'चाचा ', 'दादा ']
['माम ', 'काका ', 'मामा ', 'जेजे ', 'बापा ', 'काक ', 'माउ ', 'भाइ ', 'चाचा ', 'दादा ']
['माउ ', 'माम ', 'जेजे ', 'आ ', 'माङ्क ', 'खु ', 'मा ', 'भउणी ', "' ", 'अ ']
['माउ ', 'माम ', 'जेजे ', 'माङ्क ', 'आ ', 'मा ', 'भउणी ', 'पि ', 'काकी ', 'अ ']
['माउ ', 'जेजे ', 'माम ', 'आ ', 'माङ्क ', 'खु ', 'काका ', 'भउणी ', 'अ ', 'काकी ']
['भि ', 'श् ', 'भा ', 'ज् ', 'बो ', 'भ ', 'श ', 'सा ', 'भाइ ', 'भाइर ']
['भि ', 'श् ', 'भा ', 'ज् ', 'भ ', 'सा ', 'बो ', 'श ', 'भाइ ', 'सान ']
['भि ', 'श् ', 'ज् ', 'भा ', 'श ', 'भ ', 'सा ', 'बो ', 'भाइ ', 'सान ']
['</s> ', '. ', '। ', '" ', '- ', "' ", '! ', ', ', '| ', '( ']
['</s> ', '. ', '। ', '" ', '- ', "' ", ', ', '| ', '! ', '( ']
['</s> ', '। ', '. ', '" ', ', ', '| ', '- ', 'I ', '۔ ', '( ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'जेजे ', 'बड़ ', 'सान ', 'भाइर ', 'खु ', 'भण ']
['</s> ', '. ', '। ', '" ', "' ", '- ', '! ', ', ', '| ', '[ ']
['सम्पर्कीय़ ', 'भाइ ', 'माम ', 'भउणी ', 'सान ', 'जेजे ', 'सम्प ', 'खु ', 'भण ', 'बड़ ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'पु ', 'भा ', 'सान ', 'भाइर ', 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'पु ', 'सम्पर्कीय़ ', 'भा ', 'नाति ', 'भ्र ']
['पुत ', 'भण ', 'भ ', 'भाइ ', 'सान ', 'सम्पर्कीय़ ', 'पु ', 'भा ', 'नाति ', 'भ्र ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'बो ', 'न ', 'भाइर ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भा ', 'झ ', 'भाइ ', 'न ', 'बो ', 'सान ']
['भ ', 'भण ', 'पुत ', 'भउणी ', 'भाइ ', 'भा ', 'झ ', 'सान ', 'न ', 'बो ']